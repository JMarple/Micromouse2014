
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00002d98  00002e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800108  00800108  00002e34  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000042d  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013f8  00000000  00000000  00003321  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000753  00000000  00000000  00004719  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ea5  00000000  00000000  00004e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00005d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d8  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000608  00000000  00000000  0000665c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__vector_17>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__vector_21>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_32>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 08       	sbc	r3, r15
      da:	00 00       	nop
      dc:	00 be       	out	0x30, r0	; 48
      de:	92 24       	eor	r9, r2
      e0:	49 12       	cpse	r4, r25
      e2:	3e ab       	std	Y+54, r19	; 0x36
      e4:	aa aa       	std	Y+50, r10	; 0x32
      e6:	2a be       	out	0x3a, r2	; 58
      e8:	cd cc       	rjmp	.-1638   	; 0xfffffa84 <__eeprom_end+0xff7efa84>
      ea:	cc 4c       	sbci	r28, 0xCC	; 204
      ec:	3e 00       	.word	0x003e	; ????
      ee:	00 00       	nop
      f0:	80 be       	out	0x30, r8	; 48
      f2:	ab aa       	std	Y+51, r10	; 0x33
      f4:	aa aa       	std	Y+50, r10	; 0x32
      f6:	3e 00       	.word	0x003e	; ????
      f8:	00 00       	nop
      fa:	00 bf       	out	0x30, r16	; 48
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 00       	.word	0x003f	; ????
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 41       	sbci	r16, 0x18	; 24
     108:	78 d3       	rcall	.+1776   	; 0x7fa <rotateLeft+0x68>
     10a:	bb 43       	sbci	r27, 0x3B	; 59
     10c:	87 d1       	rcall	.+782    	; 0x41c <fixAngle+0x42>
     10e:	13 3d       	cpi	r17, 0xD3	; 211
     110:	19 0e       	add	r1, r25
     112:	3c c3       	rjmp	.+1656   	; 0x78c <rotateRight+0xa6>
     114:	bd 42       	sbci	r27, 0x2D	; 45
     116:	82 ad       	ldd	r24, Z+58	; 0x3a
     118:	2b 3e       	cpi	r18, 0xEB	; 235
     11a:	68 ec       	ldi	r22, 0xC8	; 200
     11c:	82 76       	andi	r24, 0x62	; 98
     11e:	be d9       	rcall	.-3204   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
     120:	8f e1       	ldi	r24, 0x1F	; 31
     122:	a9 3e       	cpi	r26, 0xE9	; 233
     124:	4c 80       	ldd	r4, Y+4	; 0x04
     126:	ef ff       	.word	0xffef	; ????
     128:	be 01       	movw	r22, r28
     12a:	c4 ff       	sbrs	r28, 4
     12c:	7f 3f       	cpi	r23, 0xFF	; 255
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	00 6e       	ori	r16, 0xE0	; 224

00000133 <__c.1790>:
     133:	6e 61 6e 00                                         nan.

00000137 <__c.1788>:
     137:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     147:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     157:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     167:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     177:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     187:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     197:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a7:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b7:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c7:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d7:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e7:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f7:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     207:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     217:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     227:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	da e0       	ldi	r29, 0x0A	; 10
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b1 e0       	ldi	r27, 0x01	; 1
     248:	e8 e9       	ldi	r30, 0x98	; 152
     24a:	fd e2       	ldi	r31, 0x2D	; 45
     24c:	02 c0       	rjmp	.+4      	; 0x252 <.do_copy_data_start>

0000024e <.do_copy_data_loop>:
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0

00000252 <.do_copy_data_start>:
     252:	a8 30       	cpi	r26, 0x08	; 8
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <.do_copy_data_loop>

00000258 <__do_clear_bss>:
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	a8 e0       	ldi	r26, 0x08	; 8
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a2 37       	cpi	r26, 0x72	; 114
     264:	b1 07       	cpc	r27, r17
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
extern volatile int cells[16][16];
extern volatile int gyroSum;
extern volatile int gyroComp;

int main(void)
{
     274:	6f 92       	push	r6
     276:	7f 92       	push	r7
     278:	8f 92       	push	r8
     27a:	9f 92       	push	r9
     27c:	af 92       	push	r10
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
	setupADC();	
     290:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <setupADC>
	setupStepperMotor();
     294:	0e 94 30 0b 	call	0x1660	; 0x1660 <setupStepperMotor>
	startTimer();
     298:	0e 94 43 07 	call	0xe86	; 0xe86 <startTimer>
	
	
	USART_init();
     29c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <USART_init>
	
	mouse.velocity = 0;
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	80 93 50 01 	sts	0x0150, r24
     2ac:	90 93 51 01 	sts	0x0151, r25
     2b0:	a0 93 52 01 	sts	0x0152, r26
     2b4:	b0 93 53 01 	sts	0x0153, r27
	mouse.maxVelocity = 5000;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e4       	ldi	r25, 0x40	; 64
     2bc:	ac e9       	ldi	r26, 0x9C	; 156
     2be:	b5 e4       	ldi	r27, 0x45	; 69
     2c0:	80 93 4c 01 	sts	0x014C, r24
     2c4:	90 93 4d 01 	sts	0x014D, r25
     2c8:	a0 93 4e 01 	sts	0x014E, r26
     2cc:	b0 93 4f 01 	sts	0x014F, r27
	mouse.acceleration = 2000;
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	aa ef       	ldi	r26, 0xFA	; 250
     2d6:	b4 e4       	ldi	r27, 0x44	; 68
     2d8:	80 93 44 01 	sts	0x0144, r24
     2dc:	90 93 45 01 	sts	0x0145, r25
     2e0:	a0 93 46 01 	sts	0x0146, r26
     2e4:	b0 93 47 01 	sts	0x0147, r27
	mouse.deceleration = 10000;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e4       	ldi	r25, 0x40	; 64
     2ec:	ac e1       	ldi	r26, 0x1C	; 28
     2ee:	b6 e4       	ldi	r27, 0x46	; 70
     2f0:	80 93 48 01 	sts	0x0148, r24
     2f4:	90 93 49 01 	sts	0x0149, r25
     2f8:	a0 93 4a 01 	sts	0x014A, r26
     2fc:	b0 93 4b 01 	sts	0x014B, r27

	enableDrive(1);
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <enableDrive>
	turnOnTimers(1,1);
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 39 0c 	call	0x1872	; 0x1872 <turnOnTimers>
     314:	cc 24       	eor	r12, r12
     316:	dd 24       	eor	r13, r13
			moveBackwardsAndCorrect();
		}	
		
		if(left && right)		
		{
			mouse.IR_CORRECT = 20;
     318:	84 e1       	ldi	r24, 0x14	; 20
     31a:	68 2e       	mov	r6, r24
     31c:	71 2c       	mov	r7, r1
	enableDrive(1);
	turnOnTimers(1,1);
	//2.8
	for(int i = 0; i < 30; i++)
	{		
		int right = isWallRight();
     31e:	0e 94 03 07 	call	0xe06	; 0xe06 <isWallRight>
     322:	4c 01       	movw	r8, r24
		int front = isWallFront();
     324:	0e 94 17 07 	call	0xe2e	; 0xe2e <isWallFront>
     328:	ec 01       	movw	r28, r24
		int left = isWallLeft();
     32a:	0e 94 ef 06 	call	0xdde	; 0xdde <isWallLeft>
     32e:	5c 01       	movw	r10, r24
		float angle = getFrontAngle();
     330:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <getFrontAngle>
     334:	7b 01       	movw	r14, r22
     336:	8c 01       	movw	r16, r24
		
		int lFront = getFrontLeftIR();
     338:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <getFrontLeftIR>
		int rFront = getFrontRightIR();
     33c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <getFrontRightIR>
		
		if(!right)
     340:	81 14       	cp	r8, r1
     342:	91 04       	cpc	r9, r1
     344:	51 f4       	brne	.+20     	; 0x35a <main+0xe6>
		{
			if(front)
     346:	cd 2b       	or	r28, r29
     348:	29 f0       	breq	.+10     	; 0x354 <main+0xe0>
				rotateRightWithFix(angle);
     34a:	c8 01       	movw	r24, r16
     34c:	b7 01       	movw	r22, r14
     34e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <rotateRightWithFix>
     352:	0f c0       	rjmp	.+30     	; 0x372 <main+0xfe>
			else
				rotateRight();
     354:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rotateRight>
     358:	0c c0       	rjmp	.+24     	; 0x372 <main+0xfe>
		}
		else if(front && !left)
     35a:	cd 2b       	or	r28, r29
     35c:	51 f0       	breq	.+20     	; 0x372 <main+0xfe>
     35e:	ab 28       	or	r10, r11
     360:	29 f4       	brne	.+10     	; 0x36c <main+0xf8>
		{
			rotateLeftWithFix(angle);
     362:	c8 01       	movw	r24, r16
     364:	b7 01       	movw	r22, r14
     366:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <rotateLeftWithFix>
     36a:	0e c0       	rjmp	.+28     	; 0x388 <main+0x114>
		}
		else if(front)
		{
			moveBackwardsAndCorrect();
     36c:	0e 94 1f 04 	call	0x83e	; 0x83e <moveBackwardsAndCorrect>
     370:	04 c0       	rjmp	.+8      	; 0x37a <main+0x106>
		}	
		
		if(left && right)		
     372:	ab 28       	or	r10, r11
     374:	49 f0       	breq	.+18     	; 0x388 <main+0x114>
     376:	89 28       	or	r8, r9
     378:	39 f0       	breq	.+14     	; 0x388 <main+0x114>
		{
			mouse.IR_CORRECT = 20;
     37a:	70 92 55 01 	sts	0x0155, r7
     37e:	60 92 54 01 	sts	0x0154, r6
			turnOnLeds(1);
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	02 c0       	rjmp	.+4      	; 0x38c <main+0x118>
		}
		else
		{
			turnOnLeds(0);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <turnOnLeds>
		}
		moveForwardAndStop();
     390:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <moveForwardAndStop>
		
		mouse.IR_CORRECT = 0;		
     394:	10 92 55 01 	sts	0x0155, r1
     398:	10 92 54 01 	sts	0x0154, r1
	mouse.deceleration = 10000;

	enableDrive(1);
	turnOnTimers(1,1);
	//2.8
	for(int i = 0; i < 30; i++)
     39c:	08 94       	sec
     39e:	c1 1c       	adc	r12, r1
     3a0:	d1 1c       	adc	r13, r1
     3a2:	8e e1       	ldi	r24, 0x1E	; 30
     3a4:	c8 16       	cp	r12, r24
     3a6:	d1 04       	cpc	r13, r1
     3a8:	09 f0       	breq	.+2      	; 0x3ac <main+0x138>
     3aa:	b9 cf       	rjmp	.-142    	; 0x31e <main+0xaa>
	printlnNum(angle);
	
	rotateRightWithFix(angle);
	*/
	
	turnOnTimers(0, 0);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	0e 94 39 0c 	call	0x1872	; 0x1872 <turnOnTimers>
	enableDrive(0);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <enableDrive>
	
	while(1==1)
	{
		printNum((float)getFrontLeftIR());
     3c0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <getFrontLeftIR>
     3c4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <printNum>
		print(",");
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <print>
		printlnNum((float)getFrontRightIR());	
     3d0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <getFrontRightIR>
     3d4:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <printlnNum>
     3d8:	f3 cf       	rjmp	.-26     	; 0x3c0 <main+0x14c>

000003da <fixAngle>:
	
	straight(320+addAngle, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 	
}

void fixAngle(float angle)
{
     3da:	2f 92       	push	r2
     3dc:	3f 92       	push	r3
     3de:	4f 92       	push	r4
     3e0:	5f 92       	push	r5
     3e2:	6f 92       	push	r6
     3e4:	7f 92       	push	r7
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	df 93       	push	r29
     3fc:	cf 93       	push	r28
     3fe:	00 d0       	rcall	.+0      	; 0x400 <fixAngle+0x26>
     400:	00 d0       	rcall	.+0      	; 0x402 <fixAngle+0x28>
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	7b 01       	movw	r14, r22
     408:	8c 01       	movw	r16, r24
	if(angle > 0)
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__gesf2>
     416:	18 16       	cp	r1, r24
     418:	3c f4       	brge	.+14     	; 0x428 <fixAngle+0x4e>
	{
		setDirection(0, 1);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
     426:	0a c0       	rjmp	.+20     	; 0x43c <fixAngle+0x62>
	}
	else
	{
		setDirection(1, 0);
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
		angle = -angle;
     434:	17 fb       	bst	r17, 7
     436:	10 95       	com	r17
     438:	17 f9       	bld	r17, 7
     43a:	10 95       	com	r17
	}
	
	straight((int)angle*3, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 
     43c:	a0 90 4c 01 	lds	r10, 0x014C
     440:	b0 90 4d 01 	lds	r11, 0x014D
     444:	c0 90 4e 01 	lds	r12, 0x014E
     448:	d0 90 4f 01 	lds	r13, 0x014F
     44c:	60 90 44 01 	lds	r6, 0x0144
     450:	70 90 45 01 	lds	r7, 0x0145
     454:	80 90 46 01 	lds	r8, 0x0146
     458:	90 90 47 01 	lds	r9, 0x0147
     45c:	80 91 48 01 	lds	r24, 0x0148
     460:	90 91 49 01 	lds	r25, 0x0149
     464:	a0 91 4a 01 	lds	r26, 0x014A
     468:	b0 91 4b 01 	lds	r27, 0x014B
     46c:	89 83       	std	Y+1, r24	; 0x01
     46e:	9a 83       	std	Y+2, r25	; 0x02
     470:	ab 83       	std	Y+3, r26	; 0x03
     472:	bc 83       	std	Y+4, r27	; 0x04
     474:	c8 01       	movw	r24, r16
     476:	b7 01       	movw	r22, r14
     478:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     47c:	7b 01       	movw	r14, r22
     47e:	ee 0c       	add	r14, r14
     480:	ff 1c       	adc	r15, r15
     482:	e6 0e       	add	r14, r22
     484:	f7 1e       	adc	r15, r23
     486:	00 27       	eor	r16, r16
     488:	f7 fc       	sbrc	r15, 7
     48a:	00 95       	com	r16
     48c:	10 2f       	mov	r17, r16
     48e:	c6 01       	movw	r24, r12
     490:	b5 01       	movw	r22, r10
     492:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     496:	1b 01       	movw	r2, r22
     498:	2c 01       	movw	r4, r24
     49a:	c4 01       	movw	r24, r8
     49c:	b3 01       	movw	r22, r6
     49e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     4a2:	3b 01       	movw	r6, r22
     4a4:	4c 01       	movw	r8, r24
     4a6:	69 81       	ldd	r22, Y+1	; 0x01
     4a8:	7a 81       	ldd	r23, Y+2	; 0x02
     4aa:	8b 81       	ldd	r24, Y+3	; 0x03
     4ac:	9c 81       	ldd	r25, Y+4	; 0x04
     4ae:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     4b2:	5b 01       	movw	r10, r22
     4b4:	6c 01       	movw	r12, r24
     4b6:	c8 01       	movw	r24, r16
     4b8:	b7 01       	movw	r22, r14
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	91 01       	movw	r18, r2
     4c0:	00 e0       	ldi	r16, 0x00	; 0
     4c2:	10 e0       	ldi	r17, 0x00	; 0
     4c4:	73 01       	movw	r14, r6
     4c6:	65 01       	movw	r12, r10
     4c8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	7f 90       	pop	r7
     4ee:	6f 90       	pop	r6
     4f0:	5f 90       	pop	r5
     4f2:	4f 90       	pop	r4
     4f4:	3f 90       	pop	r3
     4f6:	2f 90       	pop	r2
     4f8:	08 95       	ret

000004fa <rotateRightWithFix>:
	
	straight(320+addAngle, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 	
}

void rotateRightWithFix(float angle)
{
     4fa:	2f 92       	push	r2
     4fc:	3f 92       	push	r3
     4fe:	4f 92       	push	r4
     500:	5f 92       	push	r5
     502:	6f 92       	push	r6
     504:	7f 92       	push	r7
     506:	8f 92       	push	r8
     508:	9f 92       	push	r9
     50a:	af 92       	push	r10
     50c:	bf 92       	push	r11
     50e:	cf 92       	push	r12
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	00 d0       	rcall	.+0      	; 0x520 <rotateRightWithFix+0x26>
     520:	00 d0       	rcall	.+0      	; 0x522 <rotateRightWithFix+0x28>
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	7b 01       	movw	r14, r22
     528:	8c 01       	movw	r16, r24
	setDirection(1, 0);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	
	int addAngle = -angle*3;
	
	straight(320+addAngle, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 	
     536:	a0 90 4c 01 	lds	r10, 0x014C
     53a:	b0 90 4d 01 	lds	r11, 0x014D
     53e:	c0 90 4e 01 	lds	r12, 0x014E
     542:	d0 90 4f 01 	lds	r13, 0x014F
     546:	e4 e4       	ldi	r30, 0x44	; 68
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	61 90       	ld	r6, Z+
     54c:	71 90       	ld	r7, Z+
     54e:	81 90       	ld	r8, Z+
     550:	91 90       	ld	r9, Z+
     552:	80 81       	ld	r24, Z
     554:	91 81       	ldd	r25, Z+1	; 0x01
     556:	a2 81       	ldd	r26, Z+2	; 0x02
     558:	b3 81       	ldd	r27, Z+3	; 0x03
     55a:	89 83       	std	Y+1, r24	; 0x01
     55c:	9a 83       	std	Y+2, r25	; 0x02
     55e:	ab 83       	std	Y+3, r26	; 0x03
     560:	bc 83       	std	Y+4, r27	; 0x04
     562:	c8 01       	movw	r24, r16
     564:	b7 01       	movw	r22, r14
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e4       	ldi	r20, 0x40	; 64
     56c:	50 ec       	ldi	r21, 0xC0	; 192
     56e:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
     572:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     576:	60 5c       	subi	r22, 0xC0	; 192
     578:	7e 4f       	sbci	r23, 0xFE	; 254
     57a:	1b 01       	movw	r2, r22
     57c:	44 24       	eor	r4, r4
     57e:	37 fc       	sbrc	r3, 7
     580:	40 94       	com	r4
     582:	54 2c       	mov	r5, r4
     584:	c6 01       	movw	r24, r12
     586:	b5 01       	movw	r22, r10
     588:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     58c:	7b 01       	movw	r14, r22
     58e:	8c 01       	movw	r16, r24
     590:	c4 01       	movw	r24, r8
     592:	b3 01       	movw	r22, r6
     594:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     598:	3b 01       	movw	r6, r22
     59a:	4c 01       	movw	r8, r24
     59c:	69 81       	ldd	r22, Y+1	; 0x01
     59e:	7a 81       	ldd	r23, Y+2	; 0x02
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	9c 81       	ldd	r25, Y+4	; 0x04
     5a4:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     5a8:	5b 01       	movw	r10, r22
     5aa:	6c 01       	movw	r12, r24
     5ac:	c2 01       	movw	r24, r4
     5ae:	b1 01       	movw	r22, r2
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	97 01       	movw	r18, r14
     5b6:	00 e0       	ldi	r16, 0x00	; 0
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	73 01       	movw	r14, r6
     5bc:	65 01       	movw	r12, r10
     5be:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	cf 91       	pop	r28
     5cc:	df 91       	pop	r29
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	af 90       	pop	r10
     5de:	9f 90       	pop	r9
     5e0:	8f 90       	pop	r8
     5e2:	7f 90       	pop	r7
     5e4:	6f 90       	pop	r6
     5e6:	5f 90       	pop	r5
     5e8:	4f 90       	pop	r4
     5ea:	3f 90       	pop	r3
     5ec:	2f 90       	pop	r2
     5ee:	08 95       	ret

000005f0 <rotateLeftWithFix>:
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void rotateLeftWithFix(float angle)
{
     5f0:	2f 92       	push	r2
     5f2:	3f 92       	push	r3
     5f4:	4f 92       	push	r4
     5f6:	5f 92       	push	r5
     5f8:	6f 92       	push	r6
     5fa:	7f 92       	push	r7
     5fc:	8f 92       	push	r8
     5fe:	9f 92       	push	r9
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	df 93       	push	r29
     612:	cf 93       	push	r28
     614:	00 d0       	rcall	.+0      	; 0x616 <rotateLeftWithFix+0x26>
     616:	00 d0       	rcall	.+0      	; 0x618 <rotateLeftWithFix+0x28>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	7b 01       	movw	r14, r22
     61e:	8c 01       	movw	r16, r24
	//Rotate Left
	setDirection(0, 1);
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	
	int addAngle = angle*3;
	
	straight(320+addAngle, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 	
     62c:	a0 90 4c 01 	lds	r10, 0x014C
     630:	b0 90 4d 01 	lds	r11, 0x014D
     634:	c0 90 4e 01 	lds	r12, 0x014E
     638:	d0 90 4f 01 	lds	r13, 0x014F
     63c:	e4 e4       	ldi	r30, 0x44	; 68
     63e:	f1 e0       	ldi	r31, 0x01	; 1
     640:	61 90       	ld	r6, Z+
     642:	71 90       	ld	r7, Z+
     644:	81 90       	ld	r8, Z+
     646:	91 90       	ld	r9, Z+
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	a2 81       	ldd	r26, Z+2	; 0x02
     64e:	b3 81       	ldd	r27, Z+3	; 0x03
     650:	89 83       	std	Y+1, r24	; 0x01
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	ab 83       	std	Y+3, r26	; 0x03
     656:	bc 83       	std	Y+4, r27	; 0x04
     658:	c8 01       	movw	r24, r16
     65a:	b7 01       	movw	r22, r14
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	40 e4       	ldi	r20, 0x40	; 64
     662:	50 e4       	ldi	r21, 0x40	; 64
     664:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
     668:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     66c:	60 5c       	subi	r22, 0xC0	; 192
     66e:	7e 4f       	sbci	r23, 0xFE	; 254
     670:	1b 01       	movw	r2, r22
     672:	44 24       	eor	r4, r4
     674:	37 fc       	sbrc	r3, 7
     676:	40 94       	com	r4
     678:	54 2c       	mov	r5, r4
     67a:	c6 01       	movw	r24, r12
     67c:	b5 01       	movw	r22, r10
     67e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     682:	7b 01       	movw	r14, r22
     684:	8c 01       	movw	r16, r24
     686:	c4 01       	movw	r24, r8
     688:	b3 01       	movw	r22, r6
     68a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     68e:	3b 01       	movw	r6, r22
     690:	4c 01       	movw	r8, r24
     692:	69 81       	ldd	r22, Y+1	; 0x01
     694:	7a 81       	ldd	r23, Y+2	; 0x02
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	9c 81       	ldd	r25, Y+4	; 0x04
     69a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     69e:	5b 01       	movw	r10, r22
     6a0:	6c 01       	movw	r12, r24
     6a2:	c2 01       	movw	r24, r4
     6a4:	b1 01       	movw	r22, r2
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	97 01       	movw	r18, r14
     6ac:	00 e0       	ldi	r16, 0x00	; 0
     6ae:	10 e0       	ldi	r17, 0x00	; 0
     6b0:	73 01       	movw	r14, r6
     6b2:	65 01       	movw	r12, r10
     6b4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	bf 90       	pop	r11
     6d2:	af 90       	pop	r10
     6d4:	9f 90       	pop	r9
     6d6:	8f 90       	pop	r8
     6d8:	7f 90       	pop	r7
     6da:	6f 90       	pop	r6
     6dc:	5f 90       	pop	r5
     6de:	4f 90       	pop	r4
     6e0:	3f 90       	pop	r3
     6e2:	2f 90       	pop	r2
     6e4:	08 95       	ret

000006e6 <rotateRight>:
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void rotateRight()
{
     6e6:	2f 92       	push	r2
     6e8:	3f 92       	push	r3
     6ea:	4f 92       	push	r4
     6ec:	5f 92       	push	r5
     6ee:	6f 92       	push	r6
     6f0:	7f 92       	push	r7
     6f2:	8f 92       	push	r8
     6f4:	9f 92       	push	r9
     6f6:	af 92       	push	r10
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
	//Rotate Right
	setDirection(1, 0);
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     712:	60 91 4c 01 	lds	r22, 0x014C
     716:	70 91 4d 01 	lds	r23, 0x014D
     71a:	80 91 4e 01 	lds	r24, 0x014E
     71e:	90 91 4f 01 	lds	r25, 0x014F
     722:	e4 e4       	ldi	r30, 0x44	; 68
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	e1 90       	ld	r14, Z+
     728:	f1 90       	ld	r15, Z+
     72a:	01 91       	ld	r16, Z+
     72c:	11 91       	ld	r17, Z+
     72e:	a0 80       	ld	r10, Z
     730:	b1 80       	ldd	r11, Z+1	; 0x01
     732:	c2 80       	ldd	r12, Z+2	; 0x02
     734:	d3 80       	ldd	r13, Z+3	; 0x03
     736:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     73a:	1b 01       	movw	r2, r22
     73c:	2c 01       	movw	r4, r24
     73e:	c8 01       	movw	r24, r16
     740:	b7 01       	movw	r22, r14
     742:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     746:	3b 01       	movw	r6, r22
     748:	4c 01       	movw	r8, r24
     74a:	c6 01       	movw	r24, r12
     74c:	b5 01       	movw	r22, r10
     74e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     752:	5b 01       	movw	r10, r22
     754:	6c 01       	movw	r12, r24
     756:	60 e4       	ldi	r22, 0x40	; 64
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	91 01       	movw	r18, r2
     764:	00 e0       	ldi	r16, 0x00	; 0
     766:	10 e0       	ldi	r17, 0x00	; 0
     768:	73 01       	movw	r14, r6
     76a:	65 01       	movw	r12, r10
     76c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	9f 90       	pop	r9
     782:	8f 90       	pop	r8
     784:	7f 90       	pop	r7
     786:	6f 90       	pop	r6
     788:	5f 90       	pop	r5
     78a:	4f 90       	pop	r4
     78c:	3f 90       	pop	r3
     78e:	2f 90       	pop	r2
     790:	08 95       	ret

00000792 <rotateLeft>:
	setDirection(0, 0);
	straight(130, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void rotateLeft()
{
     792:	2f 92       	push	r2
     794:	3f 92       	push	r3
     796:	4f 92       	push	r4
     798:	5f 92       	push	r5
     79a:	6f 92       	push	r6
     79c:	7f 92       	push	r7
     79e:	8f 92       	push	r8
     7a0:	9f 92       	push	r9
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
	//Rotate Left
	setDirection(0, 1);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     7be:	60 91 4c 01 	lds	r22, 0x014C
     7c2:	70 91 4d 01 	lds	r23, 0x014D
     7c6:	80 91 4e 01 	lds	r24, 0x014E
     7ca:	90 91 4f 01 	lds	r25, 0x014F
     7ce:	e4 e4       	ldi	r30, 0x44	; 68
     7d0:	f1 e0       	ldi	r31, 0x01	; 1
     7d2:	e1 90       	ld	r14, Z+
     7d4:	f1 90       	ld	r15, Z+
     7d6:	01 91       	ld	r16, Z+
     7d8:	11 91       	ld	r17, Z+
     7da:	a0 80       	ld	r10, Z
     7dc:	b1 80       	ldd	r11, Z+1	; 0x01
     7de:	c2 80       	ldd	r12, Z+2	; 0x02
     7e0:	d3 80       	ldd	r13, Z+3	; 0x03
     7e2:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     7e6:	1b 01       	movw	r2, r22
     7e8:	2c 01       	movw	r4, r24
     7ea:	c8 01       	movw	r24, r16
     7ec:	b7 01       	movw	r22, r14
     7ee:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     7f2:	3b 01       	movw	r6, r22
     7f4:	4c 01       	movw	r8, r24
     7f6:	c6 01       	movw	r24, r12
     7f8:	b5 01       	movw	r22, r10
     7fa:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     7fe:	5b 01       	movw	r10, r22
     800:	6c 01       	movw	r12, r24
     802:	60 e4       	ldi	r22, 0x40	; 64
     804:	71 e0       	ldi	r23, 0x01	; 1
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	91 01       	movw	r18, r2
     810:	00 e0       	ldi	r16, 0x00	; 0
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	73 01       	movw	r14, r6
     816:	65 01       	movw	r12, r10
     818:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	9f 90       	pop	r9
     82e:	8f 90       	pop	r8
     830:	7f 90       	pop	r7
     832:	6f 90       	pop	r6
     834:	5f 90       	pop	r5
     836:	4f 90       	pop	r4
     838:	3f 90       	pop	r3
     83a:	2f 90       	pop	r2
     83c:	08 95       	ret

0000083e <moveBackwardsAndCorrect>:
	setDirection(0, 0);
	straight(length*42, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void moveBackwardsAndCorrect()
{
     83e:	2f 92       	push	r2
     840:	3f 92       	push	r3
     842:	4f 92       	push	r4
     844:	5f 92       	push	r5
     846:	6f 92       	push	r6
     848:	7f 92       	push	r7
     84a:	8f 92       	push	r8
     84c:	9f 92       	push	r9
     84e:	af 92       	push	r10
     850:	bf 92       	push	r11
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	28 97       	sbiw	r28, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
	//Rotate Left 180
	setDirection(0, 1);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     87e:	3c e4       	ldi	r19, 0x4C	; 76
     880:	43 2e       	mov	r4, r19
     882:	31 e0       	ldi	r19, 0x01	; 1
     884:	53 2e       	mov	r5, r19
     886:	60 91 4c 01 	lds	r22, 0x014C
     88a:	70 91 4d 01 	lds	r23, 0x014D
     88e:	80 91 4e 01 	lds	r24, 0x014E
     892:	90 91 4f 01 	lds	r25, 0x014F
     896:	28 ef       	ldi	r18, 0xF8	; 248
     898:	22 2e       	mov	r2, r18
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	32 2e       	mov	r3, r18
     89e:	24 0c       	add	r2, r4
     8a0:	35 1c       	adc	r3, r5
     8a2:	f1 01       	movw	r30, r2
     8a4:	e0 80       	ld	r14, Z
     8a6:	f1 80       	ldd	r15, Z+1	; 0x01
     8a8:	02 81       	ldd	r16, Z+2	; 0x02
     8aa:	13 81       	ldd	r17, Z+3	; 0x03
     8ac:	f2 01       	movw	r30, r4
     8ae:	d2 90       	ld	r13, -Z
     8b0:	c2 90       	ld	r12, -Z
     8b2:	b2 90       	ld	r11, -Z
     8b4:	a2 90       	ld	r10, -Z
     8b6:	2f 01       	movw	r4, r30
     8b8:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     8bc:	69 83       	std	Y+1, r22	; 0x01
     8be:	7a 83       	std	Y+2, r23	; 0x02
     8c0:	8b 83       	std	Y+3, r24	; 0x03
     8c2:	9c 83       	std	Y+4, r25	; 0x04
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     8cc:	3b 01       	movw	r6, r22
     8ce:	4c 01       	movw	r8, r24
     8d0:	c6 01       	movw	r24, r12
     8d2:	b5 01       	movw	r22, r10
     8d4:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     8d8:	5b 01       	movw	r10, r22
     8da:	6c 01       	movw	r12, r24
     8dc:	60 e8       	ldi	r22, 0x80	; 128
     8de:	72 e0       	ldi	r23, 0x02	; 2
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	29 81       	ldd	r18, Y+1	; 0x01
     8ea:	3a 81       	ldd	r19, Y+2	; 0x02
     8ec:	00 e0       	ldi	r16, 0x00	; 0
     8ee:	10 e0       	ldi	r17, 0x00	; 0
     8f0:	73 01       	movw	r14, r6
     8f2:	65 01       	movw	r12, r10
     8f4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
	
	
	//Go Backwards
	setDirection(1, 1);	
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	straight(250, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     904:	60 91 4c 01 	lds	r22, 0x014C
     908:	70 91 4d 01 	lds	r23, 0x014D
     90c:	80 91 4e 01 	lds	r24, 0x014E
     910:	90 91 4f 01 	lds	r25, 0x014F
     914:	f1 01       	movw	r30, r2
     916:	e0 80       	ld	r14, Z
     918:	f1 80       	ldd	r15, Z+1	; 0x01
     91a:	02 81       	ldd	r16, Z+2	; 0x02
     91c:	13 81       	ldd	r17, Z+3	; 0x03
     91e:	f2 01       	movw	r30, r4
     920:	a0 80       	ld	r10, Z
     922:	b1 80       	ldd	r11, Z+1	; 0x01
     924:	c2 80       	ldd	r12, Z+2	; 0x02
     926:	d3 80       	ldd	r13, Z+3	; 0x03
     928:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     92c:	6d 83       	std	Y+5, r22	; 0x05
     92e:	7e 83       	std	Y+6, r23	; 0x06
     930:	8f 83       	std	Y+7, r24	; 0x07
     932:	98 87       	std	Y+8, r25	; 0x08
     934:	c8 01       	movw	r24, r16
     936:	b7 01       	movw	r22, r14
     938:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     93c:	3b 01       	movw	r6, r22
     93e:	4c 01       	movw	r8, r24
     940:	c6 01       	movw	r24, r12
     942:	b5 01       	movw	r22, r10
     944:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     948:	5b 01       	movw	r10, r22
     94a:	6c 01       	movw	r12, r24
     94c:	6a ef       	ldi	r22, 0xFA	; 250
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	2d 81       	ldd	r18, Y+5	; 0x05
     95a:	3e 81       	ldd	r19, Y+6	; 0x06
     95c:	00 e0       	ldi	r16, 0x00	; 0
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	73 01       	movw	r14, r6
     962:	65 01       	movw	r12, r10
     964:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
	
	setDirection(0, 0);
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	straight(130, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     974:	60 91 4c 01 	lds	r22, 0x014C
     978:	70 91 4d 01 	lds	r23, 0x014D
     97c:	80 91 4e 01 	lds	r24, 0x014E
     980:	90 91 4f 01 	lds	r25, 0x014F
     984:	f1 01       	movw	r30, r2
     986:	e0 80       	ld	r14, Z
     988:	f1 80       	ldd	r15, Z+1	; 0x01
     98a:	02 81       	ldd	r16, Z+2	; 0x02
     98c:	13 81       	ldd	r17, Z+3	; 0x03
     98e:	f2 01       	movw	r30, r4
     990:	a0 80       	ld	r10, Z
     992:	b1 80       	ldd	r11, Z+1	; 0x01
     994:	c2 80       	ldd	r12, Z+2	; 0x02
     996:	d3 80       	ldd	r13, Z+3	; 0x03
     998:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     99c:	1b 01       	movw	r2, r22
     99e:	2c 01       	movw	r4, r24
     9a0:	c8 01       	movw	r24, r16
     9a2:	b7 01       	movw	r22, r14
     9a4:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     9a8:	3b 01       	movw	r6, r22
     9aa:	4c 01       	movw	r8, r24
     9ac:	c6 01       	movw	r24, r12
     9ae:	b5 01       	movw	r22, r10
     9b0:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     9b4:	5b 01       	movw	r10, r22
     9b6:	6c 01       	movw	r12, r24
     9b8:	62 e8       	ldi	r22, 0x82	; 130
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	91 01       	movw	r18, r2
     9c6:	00 e0       	ldi	r16, 0x00	; 0
     9c8:	10 e0       	ldi	r17, 0x00	; 0
     9ca:	73 01       	movw	r14, r6
     9cc:	65 01       	movw	r12, r10
     9ce:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     9d2:	28 96       	adiw	r28, 0x08	; 8
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	9f 90       	pop	r9
     9f4:	8f 90       	pop	r8
     9f6:	7f 90       	pop	r7
     9f8:	6f 90       	pop	r6
     9fa:	5f 90       	pop	r5
     9fc:	4f 90       	pop	r4
     9fe:	3f 90       	pop	r3
     a00:	2f 90       	pop	r2
     a02:	08 95       	ret

00000a04 <moveFix>:
	//Move Mouse
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void moveFix(int length)
{
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	28 97       	sbiw	r28, 0x08	; 8
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	8c 01       	movw	r16, r24
	if(length > 0)
     a3a:	18 16       	cp	r1, r24
     a3c:	19 06       	cpc	r1, r25
     a3e:	3c f4       	brge	.+14     	; 0xa4e <moveFix+0x4a>
	{
		setDirection(1, 1);
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
     a4c:	09 c0       	rjmp	.+18     	; 0xa60 <moveFix+0x5c>
	}
	else
	{
		setDirection(0, 0);
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
		length = -length;
     a5a:	10 95       	com	r17
     a5c:	01 95       	neg	r16
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	setDirection(0, 0);
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	straight(length*42, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     a6c:	60 91 50 01 	lds	r22, 0x0150
     a70:	70 91 51 01 	lds	r23, 0x0151
     a74:	80 91 52 01 	lds	r24, 0x0152
     a78:	90 91 53 01 	lds	r25, 0x0153
     a7c:	a0 90 4c 01 	lds	r10, 0x014C
     a80:	b0 90 4d 01 	lds	r11, 0x014D
     a84:	c0 90 4e 01 	lds	r12, 0x014E
     a88:	d0 90 4f 01 	lds	r13, 0x014F
     a8c:	60 90 44 01 	lds	r6, 0x0144
     a90:	70 90 45 01 	lds	r7, 0x0145
     a94:	80 90 46 01 	lds	r8, 0x0146
     a98:	90 90 47 01 	lds	r9, 0x0147
     a9c:	20 91 48 01 	lds	r18, 0x0148
     aa0:	30 91 49 01 	lds	r19, 0x0149
     aa4:	40 91 4a 01 	lds	r20, 0x014A
     aa8:	50 91 4b 01 	lds	r21, 0x014B
     aac:	29 83       	std	Y+1, r18	; 0x01
     aae:	3a 83       	std	Y+2, r19	; 0x02
     ab0:	4b 83       	std	Y+3, r20	; 0x03
     ab2:	5c 83       	std	Y+4, r21	; 0x04
     ab4:	2a e2       	ldi	r18, 0x2A	; 42
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	02 9f       	mul	r16, r18
     aba:	70 01       	movw	r14, r0
     abc:	03 9f       	mul	r16, r19
     abe:	f0 0c       	add	r15, r0
     ac0:	12 9f       	mul	r17, r18
     ac2:	f0 0c       	add	r15, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	00 27       	eor	r16, r16
     ac8:	f7 fc       	sbrc	r15, 7
     aca:	00 95       	com	r16
     acc:	10 2f       	mov	r17, r16
     ace:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     ad2:	6d 83       	std	Y+5, r22	; 0x05
     ad4:	7e 83       	std	Y+6, r23	; 0x06
     ad6:	8f 83       	std	Y+7, r24	; 0x07
     ad8:	98 87       	std	Y+8, r25	; 0x08
     ada:	c6 01       	movw	r24, r12
     adc:	b5 01       	movw	r22, r10
     ade:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     ae2:	1b 01       	movw	r2, r22
     ae4:	2c 01       	movw	r4, r24
     ae6:	c4 01       	movw	r24, r8
     ae8:	b3 01       	movw	r22, r6
     aea:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     aee:	3b 01       	movw	r6, r22
     af0:	4c 01       	movw	r8, r24
     af2:	69 81       	ldd	r22, Y+1	; 0x01
     af4:	7a 81       	ldd	r23, Y+2	; 0x02
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     afe:	5b 01       	movw	r10, r22
     b00:	6c 01       	movw	r12, r24
     b02:	c8 01       	movw	r24, r16
     b04:	b7 01       	movw	r22, r14
     b06:	4d 81       	ldd	r20, Y+5	; 0x05
     b08:	5e 81       	ldd	r21, Y+6	; 0x06
     b0a:	91 01       	movw	r18, r2
     b0c:	00 e0       	ldi	r16, 0x00	; 0
     b0e:	10 e0       	ldi	r17, 0x00	; 0
     b10:	73 01       	movw	r14, r6
     b12:	65 01       	movw	r12, r10
     b14:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     b18:	28 96       	adiw	r28, 0x08	; 8
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	bf 90       	pop	r11
     b36:	af 90       	pop	r10
     b38:	9f 90       	pop	r9
     b3a:	8f 90       	pop	r8
     b3c:	7f 90       	pop	r7
     b3e:	6f 90       	pop	r6
     b40:	5f 90       	pop	r5
     b42:	4f 90       	pop	r4
     b44:	3f 90       	pop	r3
     b46:	2f 90       	pop	r2
     b48:	08 95       	ret

00000b4a <moveBackwards>:
	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void moveBackwards()
{
     b4a:	2f 92       	push	r2
     b4c:	3f 92       	push	r3
     b4e:	4f 92       	push	r4
     b50:	5f 92       	push	r5
     b52:	6f 92       	push	r6
     b54:	7f 92       	push	r7
     b56:	8f 92       	push	r8
     b58:	9f 92       	push	r9
     b5a:	af 92       	push	r10
     b5c:	bf 92       	push	r11
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
	//Rotate Left
	setDirection(0, 1);
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>
	
	//Move Mouse
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     b76:	60 91 4c 01 	lds	r22, 0x014C
     b7a:	70 91 4d 01 	lds	r23, 0x014D
     b7e:	80 91 4e 01 	lds	r24, 0x014E
     b82:	90 91 4f 01 	lds	r25, 0x014F
     b86:	e4 e4       	ldi	r30, 0x44	; 68
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	e1 90       	ld	r14, Z+
     b8c:	f1 90       	ld	r15, Z+
     b8e:	01 91       	ld	r16, Z+
     b90:	11 91       	ld	r17, Z+
     b92:	a0 80       	ld	r10, Z
     b94:	b1 80       	ldd	r11, Z+1	; 0x01
     b96:	c2 80       	ldd	r12, Z+2	; 0x02
     b98:	d3 80       	ldd	r13, Z+3	; 0x03
     b9a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     b9e:	1b 01       	movw	r2, r22
     ba0:	2c 01       	movw	r4, r24
     ba2:	c8 01       	movw	r24, r16
     ba4:	b7 01       	movw	r22, r14
     ba6:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     baa:	3b 01       	movw	r6, r22
     bac:	4c 01       	movw	r8, r24
     bae:	c6 01       	movw	r24, r12
     bb0:	b5 01       	movw	r22, r10
     bb2:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     bb6:	5b 01       	movw	r10, r22
     bb8:	6c 01       	movw	r12, r24
     bba:	60 e8       	ldi	r22, 0x80	; 128
     bbc:	72 e0       	ldi	r23, 0x02	; 2
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	91 01       	movw	r18, r2
     bc8:	00 e0       	ldi	r16, 0x00	; 0
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	73 01       	movw	r14, r6
     bce:	65 01       	movw	r12, r10
     bd0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	9f 90       	pop	r9
     be6:	8f 90       	pop	r8
     be8:	7f 90       	pop	r7
     bea:	6f 90       	pop	r6
     bec:	5f 90       	pop	r5
     bee:	4f 90       	pop	r4
     bf0:	3f 90       	pop	r3
     bf2:	2f 90       	pop	r2
     bf4:	08 95       	ret

00000bf6 <moveForwardAndStop>:
	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, mouse.maxVelocity, mouse.acceleration, mouse.deceleration);
}

void moveForwardAndStop()
{	
     bf6:	2f 92       	push	r2
     bf8:	3f 92       	push	r3
     bfa:	4f 92       	push	r4
     bfc:	5f 92       	push	r5
     bfe:	6f 92       	push	r6
     c00:	7f 92       	push	r7
     c02:	8f 92       	push	r8
     c04:	9f 92       	push	r9
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <moveForwardAndStop+0x26>
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <moveForwardAndStop+0x28>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
	//Make the robot go forward
	setDirection(0, 0);
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>

	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     c2e:	60 91 50 01 	lds	r22, 0x0150
     c32:	70 91 51 01 	lds	r23, 0x0151
     c36:	80 91 52 01 	lds	r24, 0x0152
     c3a:	90 91 53 01 	lds	r25, 0x0153
     c3e:	ec e4       	ldi	r30, 0x4C	; 76
     c40:	f1 e0       	ldi	r31, 0x01	; 1
     c42:	e0 80       	ld	r14, Z
     c44:	f1 80       	ldd	r15, Z+1	; 0x01
     c46:	02 81       	ldd	r16, Z+2	; 0x02
     c48:	13 81       	ldd	r17, Z+3	; 0x03
     c4a:	38 97       	sbiw	r30, 0x08	; 8
     c4c:	a1 90       	ld	r10, Z+
     c4e:	b1 90       	ld	r11, Z+
     c50:	c1 90       	ld	r12, Z+
     c52:	d1 90       	ld	r13, Z+
     c54:	20 80       	ld	r2, Z
     c56:	31 80       	ldd	r3, Z+1	; 0x01
     c58:	42 80       	ldd	r4, Z+2	; 0x02
     c5a:	53 80       	ldd	r5, Z+3	; 0x03
     c5c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     c60:	69 83       	std	Y+1, r22	; 0x01
     c62:	7a 83       	std	Y+2, r23	; 0x02
     c64:	8b 83       	std	Y+3, r24	; 0x03
     c66:	9c 83       	std	Y+4, r25	; 0x04
     c68:	c8 01       	movw	r24, r16
     c6a:	b7 01       	movw	r22, r14
     c6c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     c70:	7b 01       	movw	r14, r22
     c72:	8c 01       	movw	r16, r24
     c74:	c6 01       	movw	r24, r12
     c76:	b5 01       	movw	r22, r10
     c78:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     c7c:	3b 01       	movw	r6, r22
     c7e:	4c 01       	movw	r8, r24
     c80:	c2 01       	movw	r24, r4
     c82:	b1 01       	movw	r22, r2
     c84:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     c88:	5b 01       	movw	r10, r22
     c8a:	6c 01       	movw	r12, r24
     c8c:	6a ef       	ldi	r22, 0xFA	; 250
     c8e:	72 e0       	ldi	r23, 0x02	; 2
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	49 81       	ldd	r20, Y+1	; 0x01
     c96:	5a 81       	ldd	r21, Y+2	; 0x02
     c98:	97 01       	movw	r18, r14
     c9a:	00 e0       	ldi	r16, 0x00	; 0
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	73 01       	movw	r14, r6
     ca0:	65 01       	movw	r12, r10
     ca2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	7f 90       	pop	r7
     cc8:	6f 90       	pop	r6
     cca:	5f 90       	pop	r5
     ccc:	4f 90       	pop	r4
     cce:	3f 90       	pop	r3
     cd0:	2f 90       	pop	r2
     cd2:	08 95       	ret

00000cd4 <moveForward>:
	//If there is something less then 8 cm away from sensor 
	return (value < 14);
}

void moveForward()
{
     cd4:	2f 92       	push	r2
     cd6:	3f 92       	push	r3
     cd8:	4f 92       	push	r4
     cda:	5f 92       	push	r5
     cdc:	6f 92       	push	r6
     cde:	7f 92       	push	r7
     ce0:	8f 92       	push	r8
     ce2:	9f 92       	push	r9
     ce4:	af 92       	push	r10
     ce6:	bf 92       	push	r11
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	28 97       	sbiw	r28, 0x08	; 8
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
	//Make the robot go forward
	setDirection(0, 0);
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <setDirection>

	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, mouse.maxVelocity, mouse.acceleration, mouse.deceleration);
     d14:	a0 e5       	ldi	r26, 0x50	; 80
     d16:	b1 e0       	ldi	r27, 0x01	; 1
     d18:	60 91 50 01 	lds	r22, 0x0150
     d1c:	70 91 51 01 	lds	r23, 0x0151
     d20:	80 91 52 01 	lds	r24, 0x0152
     d24:	90 91 53 01 	lds	r25, 0x0153
     d28:	fd 01       	movw	r30, r26
     d2a:	12 91       	ld	r17, -Z
     d2c:	02 91       	ld	r16, -Z
     d2e:	f2 90       	ld	r15, -Z
     d30:	e2 90       	ld	r14, -Z
     d32:	a0 80       	ld	r10, Z
     d34:	b1 80       	ldd	r11, Z+1	; 0x01
     d36:	c2 80       	ldd	r12, Z+2	; 0x02
     d38:	d3 80       	ldd	r13, Z+3	; 0x03
     d3a:	1c 97       	sbiw	r26, 0x0c	; 12
     d3c:	6d 90       	ld	r6, X+
     d3e:	7d 90       	ld	r7, X+
     d40:	8d 90       	ld	r8, X+
     d42:	9d 90       	ld	r9, X+
     d44:	2d 91       	ld	r18, X+
     d46:	3d 91       	ld	r19, X+
     d48:	4d 91       	ld	r20, X+
     d4a:	5c 91       	ld	r21, X
     d4c:	29 83       	std	Y+1, r18	; 0x01
     d4e:	3a 83       	std	Y+2, r19	; 0x02
     d50:	4b 83       	std	Y+3, r20	; 0x03
     d52:	5c 83       	std	Y+4, r21	; 0x04
     d54:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     d58:	6d 83       	std	Y+5, r22	; 0x05
     d5a:	7e 83       	std	Y+6, r23	; 0x06
     d5c:	8f 83       	std	Y+7, r24	; 0x07
     d5e:	98 87       	std	Y+8, r25	; 0x08
     d60:	c8 01       	movw	r24, r16
     d62:	b7 01       	movw	r22, r14
     d64:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     d68:	1b 01       	movw	r2, r22
     d6a:	2c 01       	movw	r4, r24
     d6c:	c6 01       	movw	r24, r12
     d6e:	b5 01       	movw	r22, r10
     d70:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     d74:	7b 01       	movw	r14, r22
     d76:	8c 01       	movw	r16, r24
     d78:	c4 01       	movw	r24, r8
     d7a:	b3 01       	movw	r22, r6
     d7c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     d80:	3b 01       	movw	r6, r22
     d82:	4c 01       	movw	r8, r24
     d84:	69 81       	ldd	r22, Y+1	; 0x01
     d86:	7a 81       	ldd	r23, Y+2	; 0x02
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	6a ef       	ldi	r22, 0xFA	; 250
     d96:	72 e0       	ldi	r23, 0x02	; 2
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	4d 81       	ldd	r20, Y+5	; 0x05
     d9e:	5e 81       	ldd	r21, Y+6	; 0x06
     da0:	91 01       	movw	r18, r2
     da2:	87 01       	movw	r16, r14
     da4:	73 01       	movw	r14, r6
     da6:	65 01       	movw	r12, r10
     da8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <straight>
}
     dac:	28 96       	adiw	r28, 0x08	; 8
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
     dc8:	bf 90       	pop	r11
     dca:	af 90       	pop	r10
     dcc:	9f 90       	pop	r9
     dce:	8f 90       	pop	r8
     dd0:	7f 90       	pop	r7
     dd2:	6f 90       	pop	r6
     dd4:	5f 90       	pop	r5
     dd6:	4f 90       	pop	r4
     dd8:	3f 90       	pop	r3
     dda:	2f 90       	pop	r2
     ddc:	08 95       	ret

00000dde <isWallLeft>:
	//If there is something less then 8 cm away from sensor 
	return (value < 14);
}

int isWallLeft()
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
	float value = getLeftIR();
     de2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <getLeftIR>
     de6:	c0 e0       	ldi	r28, 0x00	; 0
     de8:	d0 e0       	ldi	r29, 0x00	; 0
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e6       	ldi	r20, 0x60	; 96
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 82 12 	call	0x2504	; 0x2504 <__cmpsf2>
     df6:	88 23       	and	r24, r24
     df8:	14 f4       	brge	.+4      	; 0xdfe <isWallLeft+0x20>
     dfa:	c1 e0       	ldi	r28, 0x01	; 1
     dfc:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 8 cm away from sensor 
	return (value < 14);
}
     dfe:	ce 01       	movw	r24, r28
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <isWallRight>:
	//If there is something less then 16 cm away from sensor
	return (value < 10);		
}

int isWallRight()
{
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
	float value = getRightIR();
     e0a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <getRightIR>
     e0e:	c0 e0       	ldi	r28, 0x00	; 0
     e10:	d0 e0       	ldi	r29, 0x00	; 0
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e6       	ldi	r20, 0x60	; 96
     e18:	51 e4       	ldi	r21, 0x41	; 65
     e1a:	0e 94 82 12 	call	0x2504	; 0x2504 <__cmpsf2>
     e1e:	88 23       	and	r24, r24
     e20:	14 f4       	brge	.+4      	; 0xe26 <isWallRight+0x20>
     e22:	c1 e0       	ldi	r28, 0x01	; 1
     e24:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 8 cm away from sensor 
	return (value < 14);
}
     e26:	ce 01       	movw	r24, r28
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <isWallFront>:

//Create Mouse
volatile Mouse mouse;

int isWallFront()
{
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
    float value = getFrontLeftIR();
     e3a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <getFrontLeftIR>
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
	float value2 = getFrontRightIR();
     e42:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <getFrontRightIR>
     e46:	9b 01       	movw	r18, r22
     e48:	ac 01       	movw	r20, r24
	
	//Average front sensors
	value = (value + value2)/2;
     e4a:	c8 01       	movw	r24, r16
     e4c:	b7 01       	movw	r22, r14
     e4e:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
     e52:	c0 e0       	ldi	r28, 0x00	; 0
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	5f e3       	ldi	r21, 0x3F	; 63
     e5e:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e2       	ldi	r20, 0x20	; 32
     e68:	51 e4       	ldi	r21, 0x41	; 65
     e6a:	0e 94 82 12 	call	0x2504	; 0x2504 <__cmpsf2>
     e6e:	88 23       	and	r24, r24
     e70:	14 f4       	brge	.+4      	; 0xe76 <isWallFront+0x48>
     e72:	c1 e0       	ldi	r28, 0x01	; 1
     e74:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 16 cm away from sensor
	return (value < 10);		
}
     e76:	ce 01       	movw	r24, r28
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	08 95       	ret

00000e86 <startTimer>:
}

void startTimer()
{
	//Refresh Loop Timer1  
	TCCR0A = (1 << WGM01);//Set CTC
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00) | (1 << CS01);//prescalar to
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;//Compare Ticks 
     e8e:	9a ef       	ldi	r25, 0xFA	; 250
     e90:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);//Enable Timer Interrupts
     e92:	80 93 6e 00 	sts	0x006E, r24
	
	milliseconds = 0;
     e96:	10 92 0a 01 	sts	0x010A, r1
     e9a:	10 92 0b 01 	sts	0x010B, r1
     e9e:	10 92 0c 01 	sts	0x010C, r1
     ea2:	10 92 0d 01 	sts	0x010D, r1
}
     ea6:	08 95       	ret

00000ea8 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
     eb6:	af 93       	push	r26
     eb8:	bf 93       	push	r27
	milliseconds++;		
     eba:	80 91 0a 01 	lds	r24, 0x010A
     ebe:	90 91 0b 01 	lds	r25, 0x010B
     ec2:	a0 91 0c 01 	lds	r26, 0x010C
     ec6:	b0 91 0d 01 	lds	r27, 0x010D
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	a1 1d       	adc	r26, r1
     ece:	b1 1d       	adc	r27, r1
     ed0:	80 93 0a 01 	sts	0x010A, r24
     ed4:	90 93 0b 01 	sts	0x010B, r25
     ed8:	a0 93 0c 01 	sts	0x010C, r26
     edc:	b0 93 0d 01 	sts	0x010D, r27
}
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <getOffsetError>:
volatile float lPrevious;
volatile float rPrevious;
volatile int flag;

int getOffsetError()
{
     ef2:	2f 92       	push	r2
     ef4:	3f 92       	push	r3
     ef6:	4f 92       	push	r4
     ef8:	5f 92       	push	r5
     efa:	6f 92       	push	r6
     efc:	7f 92       	push	r7
     efe:	8f 92       	push	r8
     f00:	9f 92       	push	r9
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
	if(flag != 1)
     f12:	80 91 56 01 	lds	r24, 0x0156
     f16:	90 91 57 01 	lds	r25, 0x0157
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	d1 f0       	breq	.+52     	; 0xf52 <getOffsetError+0x60>
	{
		lPrevious = getLeftIR();
     f1e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <getLeftIR>
     f22:	60 93 5c 01 	sts	0x015C, r22
     f26:	70 93 5d 01 	sts	0x015D, r23
     f2a:	80 93 5e 01 	sts	0x015E, r24
     f2e:	90 93 5f 01 	sts	0x015F, r25
		rPrevious = getRightIR();
     f32:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <getRightIR>
     f36:	60 93 58 01 	sts	0x0158, r22
     f3a:	70 93 59 01 	sts	0x0159, r23
     f3e:	80 93 5a 01 	sts	0x015A, r24
     f42:	90 93 5b 01 	sts	0x015B, r25
		flag = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	90 93 57 01 	sts	0x0157, r25
     f4e:	80 93 56 01 	sts	0x0156, r24
	}
	
	float left = getLeftIR();
     f52:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <getLeftIR>
     f56:	1b 01       	movw	r2, r22
     f58:	2c 01       	movw	r4, r24
	float right = getRightIR();
     f5a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <getRightIR>
     f5e:	3b 01       	movw	r6, r22
     f60:	4c 01       	movw	r8, r24
			
	//If derivative of IR readings is greater then 1
	if(left-lPrevious > 1)
     f62:	20 91 5c 01 	lds	r18, 0x015C
     f66:	30 91 5d 01 	lds	r19, 0x015D
     f6a:	40 91 5e 01 	lds	r20, 0x015E
     f6e:	50 91 5f 01 	lds	r21, 0x015F
     f72:	c2 01       	movw	r24, r4
     f74:	b1 01       	movw	r22, r2
     f76:	0e 94 bb 11 	call	0x2376	; 0x2376 <__subsf3>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__gesf2>
     f86:	18 16       	cp	r1, r24
     f88:	24 f4       	brge	.+8      	; 0xf92 <getOffsetError+0xa0>
	{		
		mouse.IR_CORRECT = 0;
     f8a:	10 92 55 01 	sts	0x0155, r1
     f8e:	10 92 54 01 	sts	0x0154, r1
	}
	if(right-rPrevious > 1)
     f92:	20 91 58 01 	lds	r18, 0x0158
     f96:	30 91 59 01 	lds	r19, 0x0159
     f9a:	40 91 5a 01 	lds	r20, 0x015A
     f9e:	50 91 5b 01 	lds	r21, 0x015B
     fa2:	c4 01       	movw	r24, r8
     fa4:	b3 01       	movw	r22, r6
     fa6:	0e 94 bb 11 	call	0x2376	; 0x2376 <__subsf3>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	5f e3       	ldi	r21, 0x3F	; 63
     fb2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__gesf2>
     fb6:	18 16       	cp	r1, r24
     fb8:	24 f4       	brge	.+8      	; 0xfc2 <getOffsetError+0xd0>
	{
		mouse.IR_CORRECT = 0;
     fba:	10 92 55 01 	sts	0x0155, r1
     fbe:	10 92 54 01 	sts	0x0154, r1
	}
	
	float error = (right-left)*mouse.IR_CORRECT;
     fc2:	c4 01       	movw	r24, r8
     fc4:	b3 01       	movw	r22, r6
     fc6:	a2 01       	movw	r20, r4
     fc8:	91 01       	movw	r18, r2
     fca:	0e 94 bb 11 	call	0x2376	; 0x2376 <__subsf3>
     fce:	5b 01       	movw	r10, r22
     fd0:	6c 01       	movw	r12, r24
     fd2:	00 91 54 01 	lds	r16, 0x0154
     fd6:	10 91 55 01 	lds	r17, 0x0155
	
	if(right-left > 6)
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 ec       	ldi	r20, 0xC0	; 192
     fe0:	50 e4       	ldi	r21, 0x40	; 64
     fe2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__gesf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	74 f0       	brlt	.+28     	; 0x1006 <getOffsetError+0x114>
	if(right-rPrevious > 1)
	{
		mouse.IR_CORRECT = 0;
	}
	
	float error = (right-left)*mouse.IR_CORRECT;
     fea:	b8 01       	movw	r22, r16
     fec:	88 27       	eor	r24, r24
     fee:	77 fd       	sbrc	r23, 7
     ff0:	80 95       	com	r24
     ff2:	98 2f       	mov	r25, r24
     ff4:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	c6 01       	movw	r24, r12
     ffe:	b5 01       	movw	r22, r10
    1000:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1004:	0f c0       	rjmp	.+30     	; 0x1024 <getOffsetError+0x132>
	
	if(right-left > 6)
		error = 3*mouse.IR_CORRECT;
    1006:	20 91 54 01 	lds	r18, 0x0154
    100a:	30 91 55 01 	lds	r19, 0x0155
    100e:	b9 01       	movw	r22, r18
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	62 0f       	add	r22, r18
    1016:	73 1f       	adc	r23, r19
    1018:	88 27       	eor	r24, r24
    101a:	77 fd       	sbrc	r23, 7
    101c:	80 95       	com	r24
    101e:	98 2f       	mov	r25, r24
    1020:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1024:	7b 01       	movw	r14, r22
    1026:	8c 01       	movw	r16, r24
	if(right-left < -6)
    1028:	c6 01       	movw	r24, r12
    102a:	b5 01       	movw	r22, r10
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 ec       	ldi	r20, 0xC0	; 192
    1032:	50 ec       	ldi	r21, 0xC0	; 192
    1034:	0e 94 82 12 	call	0x2504	; 0x2504 <__cmpsf2>
    1038:	88 23       	and	r24, r24
    103a:	a4 f4       	brge	.+40     	; 0x1064 <getOffsetError+0x172>
		error = -3*mouse.IR_CORRECT;
    103c:	20 91 54 01 	lds	r18, 0x0154
    1040:	30 91 55 01 	lds	r19, 0x0155
    1044:	b9 01       	movw	r22, r18
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	62 0f       	add	r22, r18
    104c:	73 1f       	adc	r23, r19
    104e:	70 95       	com	r23
    1050:	61 95       	neg	r22
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	88 27       	eor	r24, r24
    1056:	77 fd       	sbrc	r23, 7
    1058:	80 95       	com	r24
    105a:	98 2f       	mov	r25, r24
    105c:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1060:	7b 01       	movw	r14, r22
    1062:	8c 01       	movw	r16, r24

		
	lPrevious = left;
    1064:	20 92 5c 01 	sts	0x015C, r2
    1068:	30 92 5d 01 	sts	0x015D, r3
    106c:	40 92 5e 01 	sts	0x015E, r4
    1070:	50 92 5f 01 	sts	0x015F, r5
	rPrevious = right;
    1074:	60 92 58 01 	sts	0x0158, r6
    1078:	70 92 59 01 	sts	0x0159, r7
    107c:	80 92 5a 01 	sts	0x015A, r8
    1080:	90 92 5b 01 	sts	0x015B, r9
    1084:	c8 01       	movw	r24, r16
    1086:	b7 01       	movw	r22, r14
    1088:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
	return error;
}
    108c:	cb 01       	movw	r24, r22
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	bf 90       	pop	r11
    109c:	af 90       	pop	r10
    109e:	9f 90       	pop	r9
    10a0:	8f 90       	pop	r8
    10a2:	7f 90       	pop	r7
    10a4:	6f 90       	pop	r6
    10a6:	5f 90       	pop	r5
    10a8:	4f 90       	pop	r4
    10aa:	3f 90       	pop	r3
    10ac:	2f 90       	pop	r2
    10ae:	08 95       	ret

000010b0 <straight>:
extern volatile long milliseconds;
extern volatile Mouse mouse;


void straight(long stepTarget, int inSpeed, int maxSpeed, int exitSpeed, int accel, int decel)
{
    10b0:	2f 92       	push	r2
    10b2:	3f 92       	push	r3
    10b4:	4f 92       	push	r4
    10b6:	5f 92       	push	r5
    10b8:	6f 92       	push	r6
    10ba:	7f 92       	push	r7
    10bc:	8f 92       	push	r8
    10be:	9f 92       	push	r9
    10c0:	af 92       	push	r10
    10c2:	bf 92       	push	r11
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	ae 97       	sbiw	r28, 0x2e	; 46
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	69 87       	std	Y+9, r22	; 0x09
    10e6:	7a 87       	std	Y+10, r23	; 0x0a
    10e8:	8b 87       	std	Y+11, r24	; 0x0b
    10ea:	9c 87       	std	Y+12, r25	; 0x0c
    10ec:	3e a7       	std	Y+46, r19	; 0x2e
    10ee:	2d a7       	std	Y+45, r18	; 0x2d
    10f0:	1e 87       	std	Y+14, r17	; 0x0e
    10f2:	0d 87       	std	Y+13, r16	; 0x0d
    10f4:	d8 8a       	std	Y+16, r13	; 0x10
    10f6:	cf 86       	std	Y+15, r12	; 0x0f
	unsigned long startTime = milliseconds;
    10f8:	80 91 0a 01 	lds	r24, 0x010A
    10fc:	90 91 0b 01 	lds	r25, 0x010B
    1100:	a0 91 0c 01 	lds	r26, 0x010C
    1104:	b0 91 0d 01 	lds	r27, 0x010D
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	af 83       	std	Y+7, r26	; 0x07
    110e:	b8 87       	std	Y+8, r27	; 0x08
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
    1110:	10 92 14 01 	sts	0x0114, r1
    1114:	10 92 15 01 	sts	0x0115, r1
    1118:	10 92 16 01 	sts	0x0116, r1
    111c:	10 92 17 01 	sts	0x0117, r1
    1120:	80 91 14 01 	lds	r24, 0x0114
    1124:	90 91 15 01 	lds	r25, 0x0115
    1128:	a0 91 16 01 	lds	r26, 0x0116
    112c:	b0 91 17 01 	lds	r27, 0x0117
    1130:	80 93 2c 01 	sts	0x012C, r24
    1134:	90 93 2d 01 	sts	0x012D, r25
    1138:	a0 93 2e 01 	sts	0x012E, r26
    113c:	b0 93 2f 01 	sts	0x012F, r27
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
    1140:	ca 01       	movw	r24, r20
    1142:	aa 27       	eor	r26, r26
    1144:	97 fd       	sbrc	r25, 7
    1146:	a0 95       	com	r26
    1148:	ba 2f       	mov	r27, r26
    114a:	89 8f       	std	Y+25, r24	; 0x19
    114c:	9a 8f       	std	Y+26, r25	; 0x1a
    114e:	ab 8f       	std	Y+27, r26	; 0x1b
    1150:	bc 8f       	std	Y+28, r27	; 0x1c
    1152:	97 01       	movw	r18, r14
    1154:	44 27       	eor	r20, r20
    1156:	37 fd       	sbrc	r19, 7
    1158:	40 95       	com	r20
    115a:	54 2f       	mov	r21, r20
    115c:	2d 8f       	std	Y+29, r18	; 0x1d
    115e:	3e 8f       	std	Y+30, r19	; 0x1e
    1160:	4f 8f       	std	Y+31, r20	; 0x1f
    1162:	58 a3       	std	Y+32, r21	; 0x20
    1164:	8d a5       	ldd	r24, Y+45	; 0x2d
    1166:	9e a5       	ldd	r25, Y+46	; 0x2e
    1168:	aa 27       	eor	r26, r26
    116a:	97 fd       	sbrc	r25, 7
    116c:	a0 95       	com	r26
    116e:	ba 2f       	mov	r27, r26
    1170:	89 a3       	std	Y+33, r24	; 0x21
    1172:	9a a3       	std	Y+34, r25	; 0x22
    1174:	ab a3       	std	Y+35, r26	; 0x23
    1176:	bc a3       	std	Y+36, r27	; 0x24
		
		mouse.velocity = curSpeed;
		mouse.leftMotor.currentStepDelay = getDelayFromVelocity(curSpeed - error);
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed + error);
		
		float decelStepsUntilStop = curSpeed * curSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
    1178:	96 01       	movw	r18, r12
    117a:	44 27       	eor	r20, r20
    117c:	37 fd       	sbrc	r19, 7
    117e:	40 95       	com	r20
    1180:	54 2f       	mov	r21, r20
    1182:	2d a3       	std	Y+37, r18	; 0x25
    1184:	3e a3       	std	Y+38, r19	; 0x26
    1186:	4f a3       	std	Y+39, r20	; 0x27
    1188:	58 a7       	std	Y+40, r21	; 0x28
    118a:	c8 01       	movw	r24, r16
    118c:	aa 27       	eor	r26, r26
    118e:	97 fd       	sbrc	r25, 7
    1190:	a0 95       	com	r26
    1192:	ba 2f       	mov	r27, r26
    1194:	89 a7       	std	Y+41, r24	; 0x29
    1196:	9a a7       	std	Y+42, r25	; 0x2a
    1198:	ab a7       	std	Y+43, r26	; 0x2b
    119a:	bc a7       	std	Y+44, r27	; 0x2c
    119c:	05 c1       	rjmp	.+522    	; 0x13a8 <straight+0x2f8>
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
	{
		
		float curSpeed = inSpeed + accel*(float)((milliseconds-startTime)/1000.0);
    119e:	60 91 0a 01 	lds	r22, 0x010A
    11a2:	70 91 0b 01 	lds	r23, 0x010B
    11a6:	80 91 0c 01 	lds	r24, 0x010C
    11aa:	90 91 0d 01 	lds	r25, 0x010D
    11ae:	2d 81       	ldd	r18, Y+5	; 0x05
    11b0:	3e 81       	ldd	r19, Y+6	; 0x06
    11b2:	4f 81       	ldd	r20, Y+7	; 0x07
    11b4:	58 85       	ldd	r21, Y+8	; 0x08
    11b6:	62 1b       	sub	r22, r18
    11b8:	73 0b       	sbc	r23, r19
    11ba:	84 0b       	sbc	r24, r20
    11bc:	95 0b       	sbc	r25, r21
    11be:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatunsisf>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a e7       	ldi	r20, 0x7A	; 122
    11c8:	54 e4       	ldi	r21, 0x44	; 68
    11ca:	0e 94 86 12 	call	0x250c	; 0x250c <__divsf3>
    11ce:	9b 01       	movw	r18, r22
    11d0:	ac 01       	movw	r20, r24
    11d2:	c6 01       	movw	r24, r12
    11d4:	b5 01       	movw	r22, r10
    11d6:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	c4 01       	movw	r24, r8
    11e0:	b3 01       	movw	r22, r6
    11e2:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    11e6:	69 8b       	std	Y+17, r22	; 0x11
    11e8:	7a 8b       	std	Y+18, r23	; 0x12
    11ea:	8b 8b       	std	Y+19, r24	; 0x13
    11ec:	9c 8b       	std	Y+20, r25	; 0x14
		
		int error = getOffsetError();
    11ee:	0e 94 79 07 	call	0xef2	; 0xef2 <getOffsetError>
		
		mouse.velocity = curSpeed;
    11f2:	29 89       	ldd	r18, Y+17	; 0x11
    11f4:	3a 89       	ldd	r19, Y+18	; 0x12
    11f6:	4b 89       	ldd	r20, Y+19	; 0x13
    11f8:	5c 89       	ldd	r21, Y+20	; 0x14
    11fa:	20 93 50 01 	sts	0x0150, r18
    11fe:	30 93 51 01 	sts	0x0151, r19
    1202:	40 93 52 01 	sts	0x0152, r20
    1206:	50 93 53 01 	sts	0x0153, r21
		mouse.leftMotor.currentStepDelay = getDelayFromVelocity(curSpeed - error);
    120a:	aa 27       	eor	r26, r26
    120c:	97 fd       	sbrc	r25, 7
    120e:	a0 95       	com	r26
    1210:	ba 2f       	mov	r27, r26
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    121a:	7b 01       	movw	r14, r22
    121c:	8c 01       	movw	r16, r24
    121e:	69 89       	ldd	r22, Y+17	; 0x11
    1220:	7a 89       	ldd	r23, Y+18	; 0x12
    1222:	8b 89       	ldd	r24, Y+19	; 0x13
    1224:	9c 89       	ldd	r25, Y+20	; 0x14
    1226:	a8 01       	movw	r20, r16
    1228:	97 01       	movw	r18, r14
    122a:	0e 94 bb 11 	call	0x2376	; 0x2376 <__subsf3>
    122e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <getDelayFromVelocity>
    123a:	aa 27       	eor	r26, r26
    123c:	97 fd       	sbrc	r25, 7
    123e:	a0 95       	com	r26
    1240:	ba 2f       	mov	r27, r26
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    124a:	60 93 18 01 	sts	0x0118, r22
    124e:	70 93 19 01 	sts	0x0119, r23
    1252:	80 93 1a 01 	sts	0x011A, r24
    1256:	90 93 1b 01 	sts	0x011B, r25
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed + error);
    125a:	69 89       	ldd	r22, Y+17	; 0x11
    125c:	7a 89       	ldd	r23, Y+18	; 0x12
    125e:	8b 89       	ldd	r24, Y+19	; 0x13
    1260:	9c 89       	ldd	r25, Y+20	; 0x14
    1262:	a8 01       	movw	r20, r16
    1264:	97 01       	movw	r18, r14
    1266:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    126a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <getDelayFromVelocity>
    1276:	aa 27       	eor	r26, r26
    1278:	97 fd       	sbrc	r25, 7
    127a:	a0 95       	com	r26
    127c:	ba 2f       	mov	r27, r26
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1286:	60 93 30 01 	sts	0x0130, r22
    128a:	70 93 31 01 	sts	0x0131, r23
    128e:	80 93 32 01 	sts	0x0132, r24
    1292:	90 93 33 01 	sts	0x0133, r25
		
		float decelStepsUntilStop = curSpeed * curSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
    1296:	6d a1       	ldd	r22, Y+37	; 0x25
    1298:	7e a1       	ldd	r23, Y+38	; 0x26
    129a:	8f a1       	ldd	r24, Y+39	; 0x27
    129c:	98 a5       	ldd	r25, Y+40	; 0x28
    129e:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    12a2:	5b 01       	movw	r10, r22
    12a4:	6c 01       	movw	r12, r24
    12a6:	69 a5       	ldd	r22, Y+41	; 0x29
    12a8:	7a a5       	ldd	r23, Y+42	; 0x2a
    12aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ae:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    12b2:	3b 01       	movw	r6, r22
    12b4:	4c 01       	movw	r8, r24
		
		//If we need to start deceleratings
		if(mouse.leftMotor.stepCount + decelStepsUntilStop >= stepTarget)
    12b6:	60 91 14 01 	lds	r22, 0x0114
    12ba:	70 91 15 01 	lds	r23, 0x0115
    12be:	80 91 16 01 	lds	r24, 0x0116
    12c2:	90 91 17 01 	lds	r25, 0x0117
    12c6:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    12ca:	6d 8b       	std	Y+21, r22	; 0x15
    12cc:	7e 8b       	std	Y+22, r23	; 0x16
    12ce:	8f 8b       	std	Y+23, r24	; 0x17
    12d0:	98 8f       	std	Y+24, r25	; 0x18
    12d2:	69 89       	ldd	r22, Y+17	; 0x11
    12d4:	7a 89       	ldd	r23, Y+18	; 0x12
    12d6:	8b 89       	ldd	r24, Y+19	; 0x13
    12d8:	9c 89       	ldd	r25, Y+20	; 0x14
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    12e2:	7b 01       	movw	r14, r22
    12e4:	8c 01       	movw	r16, r24
    12e6:	c6 01       	movw	r24, r12
    12e8:	b5 01       	movw	r22, r10
    12ea:	a6 01       	movw	r20, r12
    12ec:	95 01       	movw	r18, r10
    12ee:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	c8 01       	movw	r24, r16
    12f8:	b7 01       	movw	r22, r14
    12fa:	0e 94 86 12 	call	0x250c	; 0x250c <__divsf3>
    12fe:	1b 01       	movw	r2, r22
    1300:	2c 01       	movw	r4, r24
    1302:	c4 01       	movw	r24, r8
    1304:	b3 01       	movw	r22, r6
    1306:	a4 01       	movw	r20, r8
    1308:	93 01       	movw	r18, r6
    130a:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    130e:	7b 01       	movw	r14, r22
    1310:	8c 01       	movw	r16, r24
    1312:	c6 01       	movw	r24, r12
    1314:	b5 01       	movw	r22, r10
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 ec       	ldi	r21, 0xC0	; 192
    131e:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1322:	9b 01       	movw	r18, r22
    1324:	ac 01       	movw	r20, r24
    1326:	c8 01       	movw	r24, r16
    1328:	b7 01       	movw	r22, r14
    132a:	0e 94 86 12 	call	0x250c	; 0x250c <__divsf3>
    132e:	9b 01       	movw	r18, r22
    1330:	ac 01       	movw	r20, r24
    1332:	c2 01       	movw	r24, r4
    1334:	b1 01       	movw	r22, r2
    1336:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    133a:	9b 01       	movw	r18, r22
    133c:	ac 01       	movw	r20, r24
    133e:	6d 89       	ldd	r22, Y+21	; 0x15
    1340:	7e 89       	ldd	r23, Y+22	; 0x16
    1342:	8f 89       	ldd	r24, Y+23	; 0x17
    1344:	98 8d       	ldd	r25, Y+24	; 0x18
    1346:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    134a:	7b 01       	movw	r14, r22
    134c:	8c 01       	movw	r16, r24
    134e:	69 85       	ldd	r22, Y+9	; 0x09
    1350:	7a 85       	ldd	r23, Y+10	; 0x0a
    1352:	8b 85       	ldd	r24, Y+11	; 0x0b
    1354:	9c 85       	ldd	r25, Y+12	; 0x0c
    1356:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	c8 01       	movw	r24, r16
    1360:	b7 01       	movw	r22, r14
    1362:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__gesf2>
    1366:	88 23       	and	r24, r24
    1368:	4c f0       	brlt	.+18     	; 0x137c <straight+0x2cc>
		{
			maxSpeed = curSpeed;
    136a:	69 89       	ldd	r22, Y+17	; 0x11
    136c:	7a 89       	ldd	r23, Y+18	; 0x12
    136e:	8b 89       	ldd	r24, Y+19	; 0x13
    1370:	9c 89       	ldd	r25, Y+20	; 0x14
    1372:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
    1376:	7e a7       	std	Y+46, r23	; 0x2e
    1378:	6d a7       	std	Y+45, r22	; 0x2d
    137a:	5a c0       	rjmp	.+180    	; 0x1430 <straight+0x380>
			break;
		}
		
		//If we're accelerating past our stepTarget;
		if(mouse.leftMotor.stepCount >= stepTarget)
    137c:	80 91 14 01 	lds	r24, 0x0114
    1380:	90 91 15 01 	lds	r25, 0x0115
    1384:	a0 91 16 01 	lds	r26, 0x0116
    1388:	b0 91 17 01 	lds	r27, 0x0117
    138c:	29 85       	ldd	r18, Y+9	; 0x09
    138e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1390:	4b 85       	ldd	r20, Y+11	; 0x0b
    1392:	5c 85       	ldd	r21, Y+12	; 0x0c
    1394:	82 17       	cp	r24, r18
    1396:	93 07       	cpc	r25, r19
    1398:	a4 07       	cpc	r26, r20
    139a:	b5 07       	cpc	r27, r21
    139c:	0c f0       	brlt	.+2      	; 0x13a0 <straight+0x2f0>
    139e:	47 c1       	rjmp	.+654    	; 0x162e <straight+0x57e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a0:	80 ea       	ldi	r24, 0xA0	; 160
    13a2:	9f e0       	ldi	r25, 0x0F	; 15
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <straight+0x2f4>
void straight(long stepTarget, int inSpeed, int maxSpeed, int exitSpeed, int accel, int decel)
{
	unsigned long startTime = milliseconds;
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
    13a8:	69 8d       	ldd	r22, Y+25	; 0x19
    13aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b0:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    13b4:	3b 01       	movw	r6, r22
    13b6:	4c 01       	movw	r8, r24
    13b8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13ba:	7e 8d       	ldd	r23, Y+30	; 0x1e
    13bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13be:	98 a1       	ldd	r25, Y+32	; 0x20
    13c0:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    13c4:	5b 01       	movw	r10, r22
    13c6:	6c 01       	movw	r12, r24
    13c8:	60 91 0a 01 	lds	r22, 0x010A
    13cc:	70 91 0b 01 	lds	r23, 0x010B
    13d0:	80 91 0c 01 	lds	r24, 0x010C
    13d4:	90 91 0d 01 	lds	r25, 0x010D
    13d8:	2d 81       	ldd	r18, Y+5	; 0x05
    13da:	3e 81       	ldd	r19, Y+6	; 0x06
    13dc:	4f 81       	ldd	r20, Y+7	; 0x07
    13de:	58 85       	ldd	r21, Y+8	; 0x08
    13e0:	62 1b       	sub	r22, r18
    13e2:	73 0b       	sbc	r23, r19
    13e4:	84 0b       	sbc	r24, r20
    13e6:	95 0b       	sbc	r25, r21
    13e8:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatunsisf>
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	4a e7       	ldi	r20, 0x7A	; 122
    13f2:	54 e4       	ldi	r21, 0x44	; 68
    13f4:	0e 94 86 12 	call	0x250c	; 0x250c <__divsf3>
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	c6 01       	movw	r24, r12
    13fe:	b5 01       	movw	r22, r10
    1400:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	c4 01       	movw	r24, r8
    140a:	b3 01       	movw	r22, r6
    140c:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    1410:	7b 01       	movw	r14, r22
    1412:	8c 01       	movw	r16, r24
    1414:	69 a1       	ldd	r22, Y+33	; 0x21
    1416:	7a a1       	ldd	r23, Y+34	; 0x22
    1418:	8b a1       	ldd	r24, Y+35	; 0x23
    141a:	9c a1       	ldd	r25, Y+36	; 0x24
    141c:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	c8 01       	movw	r24, r16
    1426:	b7 01       	movw	r22, r14
    1428:	0e 94 82 12 	call	0x2504	; 0x2504 <__cmpsf2>
    142c:	87 fd       	sbrc	r24, 7
    142e:	b7 ce       	rjmp	.-658    	; 0x119e <straight+0xee>
		}
		_delay_ms(1);
	}	
	
	//Calculate when to start decelerating
	float decelSteps = (float)maxSpeed * (float)maxSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
    1430:	4d a5       	ldd	r20, Y+45	; 0x2d
    1432:	5e a5       	ldd	r21, Y+46	; 0x2e
    1434:	ba 01       	movw	r22, r20
    1436:	88 27       	eor	r24, r24
    1438:	77 fd       	sbrc	r23, 7
    143a:	80 95       	com	r24
    143c:	98 2f       	mov	r25, r24
    143e:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1442:	1b 01       	movw	r2, r22
    1444:	2c 01       	movw	r4, r24
    1446:	af 85       	ldd	r26, Y+15	; 0x0f
    1448:	b8 89       	ldd	r27, Y+16	; 0x10
    144a:	bd 01       	movw	r22, r26
    144c:	88 27       	eor	r24, r24
    144e:	77 fd       	sbrc	r23, 7
    1450:	80 95       	com	r24
    1452:	98 2f       	mov	r25, r24
    1454:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1458:	3b 01       	movw	r6, r22
    145a:	4c 01       	movw	r8, r24
    145c:	ed 85       	ldd	r30, Y+13	; 0x0d
    145e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1460:	bf 01       	movw	r22, r30
    1462:	88 27       	eor	r24, r24
    1464:	77 fd       	sbrc	r23, 7
    1466:	80 95       	com	r24
    1468:	98 2f       	mov	r25, r24
    146a:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    146e:	69 83       	std	Y+1, r22	; 0x01
    1470:	7a 83       	std	Y+2, r23	; 0x02
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	c2 01       	movw	r24, r4
    1478:	b1 01       	movw	r22, r2
    147a:	a2 01       	movw	r20, r4
    147c:	91 01       	movw	r18, r2
    147e:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1482:	7b 01       	movw	r14, r22
    1484:	8c 01       	movw	r16, r24
    1486:	c4 01       	movw	r24, r8
    1488:	b3 01       	movw	r22, r6
    148a:	a4 01       	movw	r20, r8
    148c:	93 01       	movw	r18, r6
    148e:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	c8 01       	movw	r24, r16
    1498:	b7 01       	movw	r22, r14
    149a:	0e 94 86 12 	call	0x250c	; 0x250c <__divsf3>
    149e:	5b 01       	movw	r10, r22
    14a0:	6c 01       	movw	r12, r24
    14a2:	69 81       	ldd	r22, Y+1	; 0x01
    14a4:	7a 81       	ldd	r23, Y+2	; 0x02
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    14b2:	7b 01       	movw	r14, r22
    14b4:	8c 01       	movw	r16, r24
    14b6:	c4 01       	movw	r24, r8
    14b8:	b3 01       	movw	r22, r6
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	50 ec       	ldi	r21, 0xC0	; 192
    14c2:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	c8 01       	movw	r24, r16
    14cc:	b7 01       	movw	r22, r14
    14ce:	0e 94 86 12 	call	0x250c	; 0x250c <__divsf3>
    14d2:	9b 01       	movw	r18, r22
    14d4:	ac 01       	movw	r20, r24
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    14de:	5b 01       	movw	r10, r22
    14e0:	6c 01       	movw	r12, r24

	//Decelerate n stuff
	while(mouse.leftMotor.stepCount + decelSteps < stepTarget);
    14e2:	60 91 14 01 	lds	r22, 0x0114
    14e6:	70 91 15 01 	lds	r23, 0x0115
    14ea:	80 91 16 01 	lds	r24, 0x0116
    14ee:	90 91 17 01 	lds	r25, 0x0117
    14f2:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    14f6:	a6 01       	movw	r20, r12
    14f8:	95 01       	movw	r18, r10
    14fa:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    14fe:	7b 01       	movw	r14, r22
    1500:	8c 01       	movw	r16, r24
    1502:	69 85       	ldd	r22, Y+9	; 0x09
    1504:	7a 85       	ldd	r23, Y+10	; 0x0a
    1506:	8b 85       	ldd	r24, Y+11	; 0x0b
    1508:	9c 85       	ldd	r25, Y+12	; 0x0c
    150a:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    150e:	9b 01       	movw	r18, r22
    1510:	ac 01       	movw	r20, r24
    1512:	c8 01       	movw	r24, r16
    1514:	b7 01       	movw	r22, r14
    1516:	0e 94 82 12 	call	0x2504	; 0x2504 <__cmpsf2>
    151a:	87 fd       	sbrc	r24, 7
    151c:	e2 cf       	rjmp	.-60     	; 0x14e2 <straight+0x432>
	
	startTime = milliseconds;
    151e:	a0 90 0a 01 	lds	r10, 0x010A
    1522:	b0 90 0b 01 	lds	r11, 0x010B
    1526:	c0 90 0c 01 	lds	r12, 0x010C
    152a:	d0 90 0d 01 	lds	r13, 0x010D
    152e:	56 c0       	rjmp	.+172    	; 0x15dc <straight+0x52c>
		
	while(maxSpeed - decel*(float)((milliseconds-startTime)/1000.0) > exitSpeed)
	{		
		float curSpeed = maxSpeed - decel*(float)((milliseconds-startTime)/1000.0);
    1530:	60 91 0a 01 	lds	r22, 0x010A
    1534:	70 91 0b 01 	lds	r23, 0x010B
    1538:	80 91 0c 01 	lds	r24, 0x010C
    153c:	90 91 0d 01 	lds	r25, 0x010D
    1540:	6a 19       	sub	r22, r10
    1542:	7b 09       	sbc	r23, r11
    1544:	8c 09       	sbc	r24, r12
    1546:	9d 09       	sbc	r25, r13
    1548:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatunsisf>
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	4a e7       	ldi	r20, 0x7A	; 122
    1552:	54 ec       	ldi	r21, 0xC4	; 196
    1554:	0e 94 86 12 	call	0x250c	; 0x250c <__divsf3>
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	c4 01       	movw	r24, r8
    155e:	b3 01       	movw	r22, r6
    1560:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1564:	9b 01       	movw	r18, r22
    1566:	ac 01       	movw	r20, r24
    1568:	c2 01       	movw	r24, r4
    156a:	b1 01       	movw	r22, r2
    156c:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
		
		mouse.velocity = curSpeed;
    1570:	60 93 50 01 	sts	0x0150, r22
    1574:	70 93 51 01 	sts	0x0151, r23
    1578:	80 93 52 01 	sts	0x0152, r24
    157c:	90 93 53 01 	sts	0x0153, r25
		mouse.leftMotor.currentStepDelay =  getDelayFromVelocity(curSpeed);
    1580:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
    1584:	7b 01       	movw	r14, r22
    1586:	8c 01       	movw	r16, r24
    1588:	cb 01       	movw	r24, r22
    158a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <getDelayFromVelocity>
    158e:	aa 27       	eor	r26, r26
    1590:	97 fd       	sbrc	r25, 7
    1592:	a0 95       	com	r26
    1594:	ba 2f       	mov	r27, r26
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    159e:	60 93 18 01 	sts	0x0118, r22
    15a2:	70 93 19 01 	sts	0x0119, r23
    15a6:	80 93 1a 01 	sts	0x011A, r24
    15aa:	90 93 1b 01 	sts	0x011B, r25
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed);
    15ae:	c7 01       	movw	r24, r14
    15b0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <getDelayFromVelocity>
    15b4:	aa 27       	eor	r26, r26
    15b6:	97 fd       	sbrc	r25, 7
    15b8:	a0 95       	com	r26
    15ba:	ba 2f       	mov	r27, r26
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    15c4:	60 93 30 01 	sts	0x0130, r22
    15c8:	70 93 31 01 	sts	0x0131, r23
    15cc:	80 93 32 01 	sts	0x0132, r24
    15d0:	90 93 33 01 	sts	0x0133, r25
    15d4:	80 ea       	ldi	r24, 0xA0	; 160
    15d6:	9f e0       	ldi	r25, 0x0F	; 15
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <straight+0x528>
	//Decelerate n stuff
	while(mouse.leftMotor.stepCount + decelSteps < stepTarget);
	
	startTime = milliseconds;
		
	while(maxSpeed - decel*(float)((milliseconds-startTime)/1000.0) > exitSpeed)
    15dc:	60 91 0a 01 	lds	r22, 0x010A
    15e0:	70 91 0b 01 	lds	r23, 0x010B
    15e4:	80 91 0c 01 	lds	r24, 0x010C
    15e8:	90 91 0d 01 	lds	r25, 0x010D
    15ec:	6a 19       	sub	r22, r10
    15ee:	7b 09       	sbc	r23, r11
    15f0:	8c 09       	sbc	r24, r12
    15f2:	9d 09       	sbc	r25, r13
    15f4:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatunsisf>
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	54 ec       	ldi	r21, 0xC4	; 196
    1600:	0e 94 86 12 	call	0x250c	; 0x250c <__divsf3>
    1604:	9b 01       	movw	r18, r22
    1606:	ac 01       	movw	r20, r24
    1608:	c4 01       	movw	r24, r8
    160a:	b3 01       	movw	r22, r6
    160c:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1610:	9b 01       	movw	r18, r22
    1612:	ac 01       	movw	r20, r24
    1614:	c2 01       	movw	r24, r4
    1616:	b1 01       	movw	r22, r2
    1618:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    161c:	29 81       	ldd	r18, Y+1	; 0x01
    161e:	3a 81       	ldd	r19, Y+2	; 0x02
    1620:	4b 81       	ldd	r20, Y+3	; 0x03
    1622:	5c 81       	ldd	r21, Y+4	; 0x04
    1624:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__gesf2>
    1628:	18 16       	cp	r1, r24
    162a:	0c f4       	brge	.+2      	; 0x162e <straight+0x57e>
    162c:	81 cf       	rjmp	.-254    	; 0x1530 <straight+0x480>
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed);
		
		_delay_ms(1);
	}

}
    162e:	ae 96       	adiw	r28, 0x2e	; 46
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	7f 90       	pop	r7
    1654:	6f 90       	pop	r6
    1656:	5f 90       	pop	r5
    1658:	4f 90       	pop	r4
    165a:	3f 90       	pop	r3
    165c:	2f 90       	pop	r2
    165e:	08 95       	ret

00001660 <setupStepperMotor>:
}

void setupStepperMotor()
{
	//Motor Pins are D2 and D4 on arduino nano
	DDRD |= (1 << PORTD1) | (1 << PORTD2) | (1 << PORTD3);
    1660:	8a b1       	in	r24, 0x0a	; 10
    1662:	8e 60       	ori	r24, 0x0E	; 14
    1664:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB1) | (1 << PORTB0) | (1 << PORTB6) | (1 << PORTB7);
    1666:	84 b1       	in	r24, 0x04	; 4
    1668:	83 6c       	ori	r24, 0xC3	; 195
    166a:	84 b9       	out	0x04, r24	; 4
	
	//Set to CTC
	TCCR1B = (1 << WGM12);
    166c:	88 e0       	ldi	r24, 0x08	; 8
    166e:	80 93 81 00 	sts	0x0081, r24
	TCCR3B = (1 << WGM32);
    1672:	80 93 91 00 	sts	0x0091, r24
	
	//Compare Ticks
	OCR1A = 0;
    1676:	10 92 89 00 	sts	0x0089, r1
    167a:	10 92 88 00 	sts	0x0088, r1
	OCR3A = 0;
    167e:	10 92 99 00 	sts	0x0099, r1
    1682:	10 92 98 00 	sts	0x0098, r1
	
	//Enable Interrupts
	TIMSK1 = (1 << OCIE1A);
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	80 93 6f 00 	sts	0x006F, r24
	TIMSK3 = (1 << OCIE3A);
    168c:	80 93 71 00 	sts	0x0071, r24
	
	//Set Prescalar to 0
	OCR1B = 0;
    1690:	10 92 8b 00 	sts	0x008B, r1
    1694:	10 92 8a 00 	sts	0x008A, r1
	OCR3B = 0;
    1698:	10 92 9b 00 	sts	0x009B, r1
    169c:	10 92 9a 00 	sts	0x009A, r1
	
	//Enable Interrupts
	sei(); 
    16a0:	78 94       	sei
{
	
	if(left)
		PORTB &= ~(1 << PB6);
	else
		PORTB |= (1 << PB6);
    16a2:	2e 9a       	sbi	0x05, 6	; 5
	
	//Enable Interrupts
	sei(); 
	
	enableDrive(0);	
}
    16a4:	08 95       	ret

000016a6 <enableDrive>:

void enableDrive(int left)
{
	
	if(left)
    16a6:	89 2b       	or	r24, r25
    16a8:	11 f0       	breq	.+4      	; 0x16ae <enableDrive+0x8>
		PORTB &= ~(1 << PB6);
    16aa:	2e 98       	cbi	0x05, 6	; 5
    16ac:	08 95       	ret
	else
		PORTB |= (1 << PB6);
    16ae:	2e 9a       	sbi	0x05, 6	; 5
    16b0:	08 95       	ret

000016b2 <pulseMotor>:
}

/* Pulse port and pin for 10 microseconds */
void pulseMotor(volatile uint8_t *port, uint8_t pin)
{
    16b2:	fc 01       	movw	r30, r24
	//Send Pulse to Motor
	(*port) |= (1 << pin);
    16b4:	20 81       	ld	r18, Z
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <pulseMotor+0xe>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	6a 95       	dec	r22
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <pulseMotor+0xa>
    16c4:	28 2b       	or	r18, r24
    16c6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16c8:	9a e1       	ldi	r25, 0x1A	; 26
    16ca:	9a 95       	dec	r25
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <pulseMotor+0x18>
	_delay_us(5);
	(*port) &= ~(1 << pin);
    16ce:	20 81       	ld	r18, Z
    16d0:	80 95       	com	r24
    16d2:	82 23       	and	r24, r18
    16d4:	80 83       	st	Z, r24
}
    16d6:	08 95       	ret

000016d8 <__vector_32>:
	OCR1A = mouse.leftMotor.currentStepDelay;
}

/* RIGHT MOTOR CONTROL */
ISR(TIMER3_COMPA_vect)
{	
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
	//Pulse and increment motor
	pulseMotor(&PORTB, PB7);
    16fa:	85 e2       	ldi	r24, 0x25	; 37
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	67 e0       	ldi	r22, 0x07	; 7
    1700:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <pulseMotor>
	mouse.rightMotor.stepCount++;
    1704:	80 91 2c 01 	lds	r24, 0x012C
    1708:	90 91 2d 01 	lds	r25, 0x012D
    170c:	a0 91 2e 01 	lds	r26, 0x012E
    1710:	b0 91 2f 01 	lds	r27, 0x012F
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	a1 1d       	adc	r26, r1
    1718:	b1 1d       	adc	r27, r1
    171a:	80 93 2c 01 	sts	0x012C, r24
    171e:	90 93 2d 01 	sts	0x012D, r25
    1722:	a0 93 2e 01 	sts	0x012E, r26
    1726:	b0 93 2f 01 	sts	0x012F, r27

	OCR3A = mouse.rightMotor.currentStepDelay;
    172a:	60 91 30 01 	lds	r22, 0x0130
    172e:	70 91 31 01 	lds	r23, 0x0131
    1732:	80 91 32 01 	lds	r24, 0x0132
    1736:	90 91 33 01 	lds	r25, 0x0133
    173a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fixunssfsi>
    173e:	70 93 99 00 	sts	0x0099, r23
    1742:	60 93 98 00 	sts	0x0098, r22
}
    1746:	ff 91       	pop	r31
    1748:	ef 91       	pop	r30
    174a:	bf 91       	pop	r27
    174c:	af 91       	pop	r26
    174e:	9f 91       	pop	r25
    1750:	8f 91       	pop	r24
    1752:	7f 91       	pop	r23
    1754:	6f 91       	pop	r22
    1756:	5f 91       	pop	r21
    1758:	4f 91       	pop	r20
    175a:	3f 91       	pop	r19
    175c:	2f 91       	pop	r18
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <__vector_17>:

extern volatile Mouse mouse;

/* LEFT MOTOR CONTROL */
ISR(TIMER1_COMPA_vect)
{
    1768:	1f 92       	push	r1
    176a:	0f 92       	push	r0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	0f 92       	push	r0
    1770:	11 24       	eor	r1, r1
    1772:	2f 93       	push	r18
    1774:	3f 93       	push	r19
    1776:	4f 93       	push	r20
    1778:	5f 93       	push	r21
    177a:	6f 93       	push	r22
    177c:	7f 93       	push	r23
    177e:	8f 93       	push	r24
    1780:	9f 93       	push	r25
    1782:	af 93       	push	r26
    1784:	bf 93       	push	r27
    1786:	ef 93       	push	r30
    1788:	ff 93       	push	r31
	pulseMotor(&PORTD, PD1);
    178a:	8b e2       	ldi	r24, 0x2B	; 43
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <pulseMotor>
	mouse.leftMotor.stepCount++;		
    1794:	80 91 14 01 	lds	r24, 0x0114
    1798:	90 91 15 01 	lds	r25, 0x0115
    179c:	a0 91 16 01 	lds	r26, 0x0116
    17a0:	b0 91 17 01 	lds	r27, 0x0117
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	a1 1d       	adc	r26, r1
    17a8:	b1 1d       	adc	r27, r1
    17aa:	80 93 14 01 	sts	0x0114, r24
    17ae:	90 93 15 01 	sts	0x0115, r25
    17b2:	a0 93 16 01 	sts	0x0116, r26
    17b6:	b0 93 17 01 	sts	0x0117, r27

	OCR1A = mouse.leftMotor.currentStepDelay;
    17ba:	60 91 18 01 	lds	r22, 0x0118
    17be:	70 91 19 01 	lds	r23, 0x0119
    17c2:	80 91 1a 01 	lds	r24, 0x011A
    17c6:	90 91 1b 01 	lds	r25, 0x011B
    17ca:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fixunssfsi>
    17ce:	70 93 89 00 	sts	0x0089, r23
    17d2:	60 93 88 00 	sts	0x0088, r22
}
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	3f 91       	pop	r19
    17ec:	2f 91       	pop	r18
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <setDirection>:
	(*port) &= ~(1 << pin);
}

void setDirection(int left, int right)
{
	if(left)
    17f8:	89 2b       	or	r24, r25
    17fa:	11 f0       	breq	.+4      	; 0x1800 <setDirection+0x8>
		PORTD &= ~(1 << PD0);
    17fc:	58 98       	cbi	0x0b, 0	; 11
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <setDirection+0xa>
	else
		PORTD |= (1 << PD0);
    1800:	58 9a       	sbi	0x0b, 0	; 11
		
	if(right)
    1802:	67 2b       	or	r22, r23
    1804:	11 f0       	breq	.+4      	; 0x180a <setDirection+0x12>
		PORTD |= (1 << PD6);
    1806:	5e 9a       	sbi	0x0b, 6	; 11
    1808:	08 95       	ret
	else
		PORTD &= ~(1 << PD6);
    180a:	5e 98       	cbi	0x0b, 6	; 11
    180c:	08 95       	ret

0000180e <eightBitTimerFix>:
}


int eightBitTimerFix(struct StepperMotor *motor)
{
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	ec 01       	movw	r28, r24
	
	int returnNum;

	if(motor->delayCounter <= 255)
    1814:	68 85       	ldd	r22, Y+8	; 0x08
    1816:	79 85       	ldd	r23, Y+9	; 0x09
    1818:	8a 85       	ldd	r24, Y+10	; 0x0a
    181a:	9b 85       	ldd	r25, Y+11	; 0x0b
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	53 e4       	ldi	r21, 0x43	; 67
    1824:	0e 94 82 12 	call	0x2504	; 0x2504 <__cmpsf2>
    1828:	18 16       	cp	r1, r24
    182a:	7c f0       	brlt	.+30     	; 0x184a <eightBitTimerFix+0x3c>
	{
		returnNum = motor->delayCounter;
    182c:	68 85       	ldd	r22, Y+8	; 0x08
    182e:	79 85       	ldd	r23, Y+9	; 0x09
    1830:	8a 85       	ldd	r24, Y+10	; 0x0a
    1832:	9b 85       	ldd	r25, Y+11	; 0x0b
    1834:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fixsfsi>
		motor->delayCounter = 0;	
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	88 87       	std	Y+8, r24	; 0x08
    1842:	99 87       	std	Y+9, r25	; 0x09
    1844:	aa 87       	std	Y+10, r26	; 0x0a
    1846:	bb 87       	std	Y+11, r27	; 0x0b
    1848:	10 c0       	rjmp	.+32     	; 0x186a <eightBitTimerFix+0x5c>
	}
	else
	{
		motor->delayCounter -= 255;
    184a:	68 85       	ldd	r22, Y+8	; 0x08
    184c:	79 85       	ldd	r23, Y+9	; 0x09
    184e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1850:	9b 85       	ldd	r25, Y+11	; 0x0b
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	53 e4       	ldi	r21, 0x43	; 67
    185a:	0e 94 bb 11 	call	0x2376	; 0x2376 <__subsf3>
    185e:	68 87       	std	Y+8, r22	; 0x08
    1860:	79 87       	std	Y+9, r23	; 0x09
    1862:	8a 87       	std	Y+10, r24	; 0x0a
    1864:	9b 87       	std	Y+11, r25	; 0x0b
    1866:	6f ef       	ldi	r22, 0xFF	; 255
    1868:	70 e0       	ldi	r23, 0x00	; 0
		returnNum = 255;
	}
	return returnNum;
}
    186a:	cb 01       	movw	r24, r22
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <turnOnTimers>:

void turnOnTimers(int one, int two)
{
	if(one)
    1872:	89 2b       	or	r24, r25
    1874:	21 f0       	breq	.+8      	; 0x187e <turnOnTimers+0xc>
		TCCR1B |= (1 << CS11) | (1 << CS10);
    1876:	80 91 81 00 	lds	r24, 0x0081
    187a:	83 60       	ori	r24, 0x03	; 3
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <turnOnTimers+0x12>
	else
		TCCR1B &= ~((1 << CS11) | (1 << CS10));
    187e:	80 91 81 00 	lds	r24, 0x0081
    1882:	8c 7f       	andi	r24, 0xFC	; 252
    1884:	80 93 81 00 	sts	0x0081, r24
		
	if(two)
    1888:	67 2b       	or	r22, r23
    188a:	21 f0       	breq	.+8      	; 0x1894 <turnOnTimers+0x22>
		TCCR3B |= (1 << CS31) | (1 << CS30);
    188c:	80 91 91 00 	lds	r24, 0x0091
    1890:	83 60       	ori	r24, 0x03	; 3
    1892:	03 c0       	rjmp	.+6      	; 0x189a <turnOnTimers+0x28>
	else	
		TCCR3B &= ~((1 << CS31) | (1 << CS30));
    1894:	80 91 91 00 	lds	r24, 0x0091
    1898:	8c 7f       	andi	r24, 0xFC	; 252
    189a:	80 93 91 00 	sts	0x0091, r24
    189e:	08 95       	ret

000018a0 <getDelayFromVelocity>:
}

int getDelayFromVelocity(int stepsPerSecond)
{
	if(stepsPerSecond < 10)
    18a0:	8a 30       	cpi	r24, 0x0A	; 10
    18a2:	91 05       	cpc	r25, r1
    18a4:	1c f4       	brge	.+6      	; 0x18ac <getDelayFromVelocity+0xc>
    18a6:	28 ea       	ldi	r18, 0xA8	; 168
    18a8:	31 e6       	ldi	r19, 0x61	; 97
    18aa:	0b c0       	rjmp	.+22     	; 0x18c2 <getDelayFromVelocity+0x22>
		return 25000;
	else
		return TIMER_FREQUENCY / stepsPerSecond;
    18ac:	9c 01       	movw	r18, r24
    18ae:	44 27       	eor	r20, r20
    18b0:	37 fd       	sbrc	r19, 7
    18b2:	40 95       	com	r20
    18b4:	54 2f       	mov	r21, r20
    18b6:	60 e9       	ldi	r22, 0x90	; 144
    18b8:	70 ed       	ldi	r23, 0xD0	; 208
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 ba 14 	call	0x2974	; 0x2974 <__divmodsi4>
}
    18c2:	c9 01       	movw	r24, r18
    18c4:	08 95       	ret

000018c6 <turnOnLeds>:
	return !(ReadADC(analogChannel) > 512);
}

void turnOnLeds(int num)
{
	if((num & 4) == 4)	
    18c6:	82 ff       	sbrs	r24, 2
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <turnOnLeds+0x8>
		PORTE |= (1 << PE6);
    18ca:	76 9a       	sbi	0x0e, 6	; 14
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <turnOnLeds+0xa>
	
	else
		PORTE &= ~(1 << PE6);
    18ce:	76 98       	cbi	0x0e, 6	; 14
		
	if((num & 2) == 2)
    18d0:	81 ff       	sbrs	r24, 1
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <turnOnLeds+0x12>
		PORTB |= (1 << PB5);
    18d4:	2d 9a       	sbi	0x05, 5	; 5
    18d6:	08 95       	ret
		
	else
		PORTB &= ~(1 << PB5);
    18d8:	2d 98       	cbi	0x05, 5	; 5
    18da:	08 95       	ret

000018dc <setupADC>:

/* Setup Analog To Digital Converter */
void setupADC()
{
	//Setup Registers
	ADMUX = (1 << REFS0);// | (1 << MUX0) | (1 << MUX1) | (1 << MUX2);
    18dc:	80 e4       	ldi	r24, 0x40	; 64
    18de:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);	
    18e2:	87 e8       	ldi	r24, 0x87	; 135
    18e4:	80 93 7a 00 	sts	0x007A, r24
	
	//IR Triggers
	DDRD |= (1 << PORTD4) | (1 << PORTD7);
    18e8:	8a b1       	in	r24, 0x0a	; 10
    18ea:	80 69       	ori	r24, 0x90	; 144
    18ec:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << PORTC6);
    18ee:	3e 9a       	sbi	0x07, 6	; 7
	
	//LED's
	DDRB |= (1 << PORTB4);
    18f0:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1 << PORTB5);
    18f2:	25 9a       	sbi	0x04, 5	; 4
	DDRE |= (1 << PORTE6);	
    18f4:	6e 9a       	sbi	0x0d, 6	; 13
}
    18f6:	08 95       	ret

000018f8 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX= (1 << REFS0) | ch;
    18f8:	87 70       	andi	r24, 0x07	; 7
    18fa:	80 64       	ori	r24, 0x40	; 64
    18fc:	80 93 7c 00 	sts	0x007C, r24

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
    1900:	80 91 7a 00 	lds	r24, 0x007A
    1904:	80 64       	ori	r24, 0x40	; 64
    1906:	80 93 7a 00 	sts	0x007A, r24
	
   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
    190a:	80 91 7a 00 	lds	r24, 0x007A
    190e:	84 ff       	sbrs	r24, 4
    1910:	fc cf       	rjmp	.-8      	; 0x190a <ReadADC+0x12>

   ADCSRA|=(1<<ADIF);
    1912:	80 91 7a 00 	lds	r24, 0x007A
    1916:	80 61       	ori	r24, 0x10	; 16
    1918:	80 93 7a 00 	sts	0x007A, r24

   return(ADC);
    191c:	20 91 78 00 	lds	r18, 0x0078
    1920:	30 91 79 00 	lds	r19, 0x0079
}
    1924:	c9 01       	movw	r24, r18
    1926:	08 95       	ret

00001928 <isButtonPushed>:
	gyroComp = ReadADC(7);
}

int isButtonPushed(int analogChannel)
{
	return !(ReadADC(analogChannel) > 512);
    1928:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <ReadADC>
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 50       	subi	r24, 0x01	; 1
    1932:	92 40       	sbci	r25, 0x02	; 2
    1934:	10 f4       	brcc	.+4      	; 0x193a <isButtonPushed+0x12>
    1936:	21 e0       	ldi	r18, 0x01	; 1
    1938:	30 e0       	ldi	r19, 0x00	; 0
}
    193a:	c9 01       	movw	r24, r18
    193c:	08 95       	ret

0000193e <calibrateGyro>:
	return gyroSum; 
}

void calibrateGyro()
{
	gyroComp = ReadADC(7);
    193e:	87 e0       	ldi	r24, 0x07	; 7
    1940:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <ReadADC>
    1944:	90 93 61 01 	sts	0x0161, r25
    1948:	80 93 60 01 	sts	0x0160, r24
}
    194c:	08 95       	ret

0000194e <updateGyroValue>:
volatile int gyroSum = 0;
volatile int gyroComp;

int updateGyroValue()
{
	int dif = ReadADC(7) - gyroComp;
    194e:	87 e0       	ldi	r24, 0x07	; 7
    1950:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <ReadADC>
    1954:	20 91 60 01 	lds	r18, 0x0160
    1958:	30 91 61 01 	lds	r19, 0x0161
    195c:	82 1b       	sub	r24, r18
    195e:	93 0b       	sbc	r25, r19
    1960:	9c 01       	movw	r18, r24
	
	if(dif > 2 || dif < -2)
    1962:	02 96       	adiw	r24, 0x02	; 2
    1964:	05 97       	sbiw	r24, 0x05	; 5
    1966:	50 f0       	brcs	.+20     	; 0x197c <updateGyroValue+0x2e>
		gyroSum += dif;
    1968:	80 91 08 01 	lds	r24, 0x0108
    196c:	90 91 09 01 	lds	r25, 0x0109
    1970:	82 0f       	add	r24, r18
    1972:	93 1f       	adc	r25, r19
    1974:	90 93 09 01 	sts	0x0109, r25
    1978:	80 93 08 01 	sts	0x0108, r24
		
	return gyroSum; 
    197c:	20 91 08 01 	lds	r18, 0x0108
    1980:	30 91 09 01 	lds	r19, 0x0109
}
    1984:	c9 01       	movw	r24, r18
    1986:	08 95       	ret

00001988 <getPotSensorValue>:
	return emit;	
}

int getPotSensorValue(int analogChannel)
{ 
	return ReadADC(analogChannel);
    1988:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <ReadADC>
}
    198c:	08 95       	ret

0000198e <getIRSensorValue>:
		
	return 90.0 - atan2(5,value2-value) * 57.2957795; 
}

int getIRSensorValue(volatile uint8_t *port, uint8_t pin, int analogChannel)
{
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	7c 01       	movw	r14, r24
    199c:	84 2f       	mov	r24, r20
	//Turn on Emitter
	(*port) |= (1 << pin);
    199e:	f7 01       	movw	r30, r14
    19a0:	90 81       	ld	r25, Z
    19a2:	01 e0       	ldi	r16, 0x01	; 1
    19a4:	10 e0       	ldi	r17, 0x00	; 0
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <getIRSensorValue+0x1e>
    19a8:	00 0f       	add	r16, r16
    19aa:	11 1f       	adc	r17, r17
    19ac:	6a 95       	dec	r22
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <getIRSensorValue+0x1a>
    19b0:	90 2b       	or	r25, r16
    19b2:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19b4:	90 e4       	ldi	r25, 0x40	; 64
    19b6:	c9 2e       	mov	r12, r25
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	d9 2e       	mov	r13, r25
    19bc:	f6 01       	movw	r30, r12
    19be:	31 97       	sbiw	r30, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <getIRSensorValue+0x30>
	
	_delay_us(80);
	
	int emit = ReadADC(analogChannel);
    19c2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <ReadADC>
	
	//Turn off Emitter
	(*port) &= ~(1 << pin);
    19c6:	f7 01       	movw	r30, r14
    19c8:	20 81       	ld	r18, Z
    19ca:	00 95       	com	r16
    19cc:	02 23       	and	r16, r18
    19ce:	00 83       	st	Z, r16
    19d0:	f6 01       	movw	r30, r12
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <getIRSensorValue+0x44>
	
	_delay_us(80);
	
	return emit;	
}
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	08 95       	ret

000019e4 <linearizeIRSensorValues_Front>:
{
	return -6.0220498115*log( input ) + 43.5411429577;
}

float linearizeIRSensorValues_Front(float input)
{
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	7b 01       	movw	r14, r22
    19ee:	8c 01       	movw	r16, r24
	if(input > 978)
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e8       	ldi	r19, 0x80	; 128
    19f4:	44 e7       	ldi	r20, 0x74	; 116
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__gesf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	6c f4       	brge	.+26     	; 0x1a1a <linearizeIRSensorValues_Front+0x36>
		return -0.17272727272*input + 173.6636363636;
    1a00:	c8 01       	movw	r24, r16
    1a02:	b7 01       	movw	r22, r14
    1a04:	2b e6       	ldi	r18, 0x6B	; 107
    1a06:	3f ed       	ldi	r19, 0xDF	; 223
    1a08:	40 e3       	ldi	r20, 0x30	; 48
    1a0a:	5e eb       	ldi	r21, 0xBE	; 190
    1a0c:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1a10:	24 ee       	ldi	r18, 0xE4	; 228
    1a12:	39 ea       	ldi	r19, 0xA9	; 169
    1a14:	4d e2       	ldi	r20, 0x2D	; 45
    1a16:	53 e4       	ldi	r21, 0x43	; 67
    1a18:	0e c0       	rjmp	.+28     	; 0x1a36 <linearizeIRSensorValues_Front+0x52>
	
	else
		return -3.8522217222*log( input ) + 31.2529127395;
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	b7 01       	movw	r22, r14
    1a1e:	0e 94 06 14 	call	0x280c	; 0x280c <log>
    1a22:	2d ec       	ldi	r18, 0xCD	; 205
    1a24:	3a e8       	ldi	r19, 0x8A	; 138
    1a26:	46 e7       	ldi	r20, 0x76	; 118
    1a28:	50 ec       	ldi	r21, 0xC0	; 192
    1a2a:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1a2e:	27 ef       	ldi	r18, 0xF7	; 247
    1a30:	35 e0       	ldi	r19, 0x05	; 5
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
    1a3a:	e6 2f       	mov	r30, r22
}
    1a3c:	2e 2f       	mov	r18, r30
    1a3e:	37 2f       	mov	r19, r23
    1a40:	48 2f       	mov	r20, r24
    1a42:	59 2f       	mov	r21, r25
    1a44:	b9 01       	movw	r22, r18
    1a46:	ca 01       	movw	r24, r20
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	08 95       	ret

00001a52 <getFrontRightIR>:
	return linearizeIRSensorValues_Front( getIRSensorValue(&PORTB, PB4, 5) );
}

float getFrontRightIR()
{
	return linearizeIRSensorValues_Front( getIRSensorValue(&PORTD, PD4, 7) );
    1a52:	8b e2       	ldi	r24, 0x2B	; 43
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	64 e0       	ldi	r22, 0x04	; 4
    1a58:	47 e0       	ldi	r20, 0x07	; 7
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	0e 94 c7 0c 	call	0x198e	; 0x198e <getIRSensorValue>
    1a60:	aa 27       	eor	r26, r26
    1a62:	97 fd       	sbrc	r25, 7
    1a64:	a0 95       	com	r26
    1a66:	ba 2f       	mov	r27, r26
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1a70:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <linearizeIRSensorValues_Front>
}
    1a74:	08 95       	ret

00001a76 <getFrontLeftIR>:
	return linearizeIRSensorValues( getIRSensorValue(&PORTC, PC6, 4) );
}

float getFrontLeftIR()
{
	return linearizeIRSensorValues_Front( getIRSensorValue(&PORTB, PB4, 5) );
    1a76:	85 e2       	ldi	r24, 0x25	; 37
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	45 e0       	ldi	r20, 0x05	; 5
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	0e 94 c7 0c 	call	0x198e	; 0x198e <getIRSensorValue>
    1a84:	aa 27       	eor	r26, r26
    1a86:	97 fd       	sbrc	r25, 7
    1a88:	a0 95       	com	r26
    1a8a:	ba 2f       	mov	r27, r26
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1a94:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <linearizeIRSensorValues_Front>
}
    1a98:	08 95       	ret

00001a9a <linearizeIRSensorValues>:
   return(ADC);
}

float linearizeIRSensorValues(float input)
{
	return -6.0220498115*log( input ) + 43.5411429577;
    1a9a:	0e 94 06 14 	call	0x280c	; 0x280c <log>
    1a9e:	22 ea       	ldi	r18, 0xA2	; 162
    1aa0:	34 eb       	ldi	r19, 0xB4	; 180
    1aa2:	40 ec       	ldi	r20, 0xC0	; 192
    1aa4:	50 ec       	ldi	r21, 0xC0	; 192
    1aa6:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1aaa:	21 e2       	ldi	r18, 0x21	; 33
    1aac:	3a e2       	ldi	r19, 0x2A	; 42
    1aae:	4e e2       	ldi	r20, 0x2E	; 46
    1ab0:	52 e4       	ldi	r21, 0x42	; 66
    1ab2:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
}
    1ab6:	08 95       	ret

00001ab8 <getRightIR>:
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD7, 6) );
}

float getRightIR()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTC, PC6, 4) );
    1ab8:	88 e2       	ldi	r24, 0x28	; 40
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	66 e0       	ldi	r22, 0x06	; 6
    1abe:	44 e0       	ldi	r20, 0x04	; 4
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	0e 94 c7 0c 	call	0x198e	; 0x198e <getIRSensorValue>
    1ac6:	aa 27       	eor	r26, r26
    1ac8:	97 fd       	sbrc	r25, 7
    1aca:	a0 95       	com	r26
    1acc:	ba 2f       	mov	r27, r26
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1ad6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <linearizeIRSensorValues>
}
    1ada:	08 95       	ret

00001adc <getLeftIR>:

#include "RobotModel_Sensors.h"

float getLeftIR()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD7, 6) );
    1adc:	8b e2       	ldi	r24, 0x2B	; 43
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	67 e0       	ldi	r22, 0x07	; 7
    1ae2:	46 e0       	ldi	r20, 0x06	; 6
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	0e 94 c7 0c 	call	0x198e	; 0x198e <getIRSensorValue>
    1aea:	aa 27       	eor	r26, r26
    1aec:	97 fd       	sbrc	r25, 7
    1aee:	a0 95       	com	r26
    1af0:	ba 2f       	mov	r27, r26
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatsisf>
    1afa:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <linearizeIRSensorValues>
}
    1afe:	08 95       	ret

00001b00 <getFrontAngle>:
{
	return linearizeIRSensorValues_Front( getIRSensorValue(&PORTD, PD4, 7) );
}

float getFrontAngle()
{
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
	float value = getFrontLeftIR();
    1b08:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <getFrontLeftIR>
    1b0c:	7b 01       	movw	r14, r22
    1b0e:	8c 01       	movw	r16, r24
	float value2 = getFrontRightIR();
    1b10:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <getFrontRightIR>
		
	return 90.0 - atan2(5,value2-value) * 57.2957795; 
    1b14:	a8 01       	movw	r20, r16
    1b16:	97 01       	movw	r18, r14
    1b18:	0e 94 bb 11 	call	0x2376	; 0x2376 <__subsf3>
    1b1c:	9b 01       	movw	r18, r22
    1b1e:	ac 01       	movw	r20, r24
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	80 ea       	ldi	r24, 0xA0	; 160
    1b26:	90 e4       	ldi	r25, 0x40	; 64
    1b28:	0e 94 2f 12 	call	0x245e	; 0x245e <atan2>
    1b2c:	21 ee       	ldi	r18, 0xE1	; 225
    1b2e:	3e e2       	ldi	r19, 0x2E	; 46
    1b30:	45 e6       	ldi	r20, 0x65	; 101
    1b32:	52 ec       	ldi	r21, 0xC2	; 194
    1b34:	0e 94 46 14 	call	0x288c	; 0x288c <__mulsf3>
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	44 eb       	ldi	r20, 0xB4	; 180
    1b3e:	52 e4       	ldi	r21, 0x42	; 66
    1b40:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3>
}
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	08 95       	ret

00001b4e <USART_init>:
void USART_putstring(char* StringPtr);
 
 
void USART_init(void){
 
 UBRR1H = (uint8_t)(BAUD_PRESCALLER>>8);
    1b4e:	10 92 cd 00 	sts	0x00CD, r1
 UBRR1L = (uint8_t)(BAUD_PRESCALLER);
    1b52:	87 e6       	ldi	r24, 0x67	; 103
    1b54:	80 93 cc 00 	sts	0x00CC, r24
 UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    1b58:	88 e1       	ldi	r24, 0x18	; 24
    1b5a:	80 93 c9 00 	sts	0x00C9, r24
 UCSR1C = (3<<UCSZ10);
    1b5e:	86 e0       	ldi	r24, 0x06	; 6
    1b60:	80 93 ca 00 	sts	0x00CA, r24
}
    1b64:	08 95       	ret

00001b66 <USART_receive>:
 
unsigned char USART_receive(void){
 
 while(!(UCSR1A & (1<<RXC1)));
    1b66:	80 91 c8 00 	lds	r24, 0x00C8
    1b6a:	87 ff       	sbrs	r24, 7
    1b6c:	fc cf       	rjmp	.-8      	; 0x1b66 <USART_receive>
 return UDR1;
    1b6e:	80 91 ce 00 	lds	r24, 0x00CE
 
}
    1b72:	08 95       	ret

00001b74 <USART_send>:
 
void USART_send( unsigned char data){
    1b74:	98 2f       	mov	r25, r24
 
 while(!(UCSR1A & (1<<UDRE1)));
    1b76:	80 91 c8 00 	lds	r24, 0x00C8
    1b7a:	85 ff       	sbrs	r24, 5
    1b7c:	fc cf       	rjmp	.-8      	; 0x1b76 <USART_send+0x2>
 UDR1 = data;
    1b7e:	90 93 ce 00 	sts	0x00CE, r25
 
}
    1b82:	08 95       	ret

00001b84 <USART_putstring>:
 
void USART_putstring(char* StringPtr){
    1b84:	fc 01       	movw	r30, r24
    1b86:	07 c0       	rjmp	.+14     	; 0x1b96 <USART_putstring+0x12>
 
}
 
void USART_send( unsigned char data){
 
 while(!(UCSR1A & (1<<UDRE1)));
    1b88:	80 91 c8 00 	lds	r24, 0x00C8
    1b8c:	85 ff       	sbrs	r24, 5
    1b8e:	fc cf       	rjmp	.-8      	; 0x1b88 <USART_putstring+0x4>
 UDR1 = data;
    1b90:	90 93 ce 00 	sts	0x00CE, r25
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
 USART_send(*StringPtr);
 StringPtr++;}
    1b94:	31 96       	adiw	r30, 0x01	; 1
 
}
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
    1b96:	90 81       	ld	r25, Z
    1b98:	99 23       	and	r25, r25
    1b9a:	b1 f7       	brne	.-20     	; 0x1b88 <USART_putstring+0x4>
 USART_send(*StringPtr);
 StringPtr++;}
 
}
    1b9c:	08 95       	ret

00001b9e <print>:
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial
}

void print(char* string)
{
	USART_putstring(string);
    1b9e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <USART_putstring>
    1ba2:	08 95       	ret

00001ba4 <printNum>:
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial  
	USART_putstring("\n\r");
}

void printNum(float value)
{
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
	sprintf(str,"%f",value);
    1ba8:	2d b7       	in	r18, 0x3d	; 61
    1baa:	3e b7       	in	r19, 0x3e	; 62
    1bac:	28 50       	subi	r18, 0x08	; 8
    1bae:	30 40       	sbci	r19, 0x00	; 0
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	3e bf       	out	0x3e, r19	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	2d bf       	out	0x3d, r18	; 61
    1bba:	ed b7       	in	r30, 0x3d	; 61
    1bbc:	fe b7       	in	r31, 0x3e	; 62
    1bbe:	31 96       	adiw	r30, 0x01	; 1
    1bc0:	02 e6       	ldi	r16, 0x62	; 98
    1bc2:	11 e0       	ldi	r17, 0x01	; 1
    1bc4:	ad b7       	in	r26, 0x3d	; 61
    1bc6:	be b7       	in	r27, 0x3e	; 62
    1bc8:	12 96       	adiw	r26, 0x02	; 2
    1bca:	1c 93       	st	X, r17
    1bcc:	0e 93       	st	-X, r16
    1bce:	11 97       	sbiw	r26, 0x01	; 1
    1bd0:	22 e0       	ldi	r18, 0x02	; 2
    1bd2:	31 e0       	ldi	r19, 0x01	; 1
    1bd4:	33 83       	std	Z+3, r19	; 0x03
    1bd6:	22 83       	std	Z+2, r18	; 0x02
    1bd8:	64 83       	std	Z+4, r22	; 0x04
    1bda:	75 83       	std	Z+5, r23	; 0x05
    1bdc:	86 83       	std	Z+6, r24	; 0x06
    1bde:	97 83       	std	Z+7, r25	; 0x07
    1be0:	0e 94 48 16 	call	0x2c90	; 0x2c90 <sprintf>
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial
    1be4:	2d b7       	in	r18, 0x3d	; 61
    1be6:	3e b7       	in	r19, 0x3e	; 62
    1be8:	28 5f       	subi	r18, 0xF8	; 248
    1bea:	3f 4f       	sbci	r19, 0xFF	; 255
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	3e bf       	out	0x3e, r19	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	2d bf       	out	0x3d, r18	; 61
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <USART_putstring>
}
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	08 95       	ret

00001c02 <printlnNum>:
 
}

char str[16];
void printlnNum(double value)
{
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
	sprintf(str,"%f",value);
    1c06:	2d b7       	in	r18, 0x3d	; 61
    1c08:	3e b7       	in	r19, 0x3e	; 62
    1c0a:	28 50       	subi	r18, 0x08	; 8
    1c0c:	30 40       	sbci	r19, 0x00	; 0
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	3e bf       	out	0x3e, r19	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	2d bf       	out	0x3d, r18	; 61
    1c18:	ed b7       	in	r30, 0x3d	; 61
    1c1a:	fe b7       	in	r31, 0x3e	; 62
    1c1c:	31 96       	adiw	r30, 0x01	; 1
    1c1e:	02 e6       	ldi	r16, 0x62	; 98
    1c20:	11 e0       	ldi	r17, 0x01	; 1
    1c22:	ad b7       	in	r26, 0x3d	; 61
    1c24:	be b7       	in	r27, 0x3e	; 62
    1c26:	12 96       	adiw	r26, 0x02	; 2
    1c28:	1c 93       	st	X, r17
    1c2a:	0e 93       	st	-X, r16
    1c2c:	11 97       	sbiw	r26, 0x01	; 1
    1c2e:	22 e0       	ldi	r18, 0x02	; 2
    1c30:	31 e0       	ldi	r19, 0x01	; 1
    1c32:	33 83       	std	Z+3, r19	; 0x03
    1c34:	22 83       	std	Z+2, r18	; 0x02
    1c36:	64 83       	std	Z+4, r22	; 0x04
    1c38:	75 83       	std	Z+5, r23	; 0x05
    1c3a:	86 83       	std	Z+6, r24	; 0x06
    1c3c:	97 83       	std	Z+7, r25	; 0x07
    1c3e:	0e 94 48 16 	call	0x2c90	; 0x2c90 <sprintf>
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial  
    1c42:	2d b7       	in	r18, 0x3d	; 61
    1c44:	3e b7       	in	r19, 0x3e	; 62
    1c46:	28 5f       	subi	r18, 0xF8	; 248
    1c48:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	3e bf       	out	0x3e, r19	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	2d bf       	out	0x3d, r18	; 61
    1c54:	c8 01       	movw	r24, r16
    1c56:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <USART_putstring>
	USART_putstring("\n\r");
    1c5a:	85 e0       	ldi	r24, 0x05	; 5
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <USART_putstring>
}
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	08 95       	ret

00001c68 <vfprintf>:
    1c68:	a1 e1       	ldi	r26, 0x11	; 17
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	ea e3       	ldi	r30, 0x3A	; 58
    1c6e:	fe e0       	ldi	r31, 0x0E	; 14
    1c70:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__prologue_saves__>
    1c74:	3c 01       	movw	r6, r24
    1c76:	7f 87       	std	Y+15, r23	; 0x0f
    1c78:	6e 87       	std	Y+14, r22	; 0x0e
    1c7a:	6a 01       	movw	r12, r20
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	17 82       	std	Z+7, r1	; 0x07
    1c80:	16 82       	std	Z+6, r1	; 0x06
    1c82:	83 81       	ldd	r24, Z+3	; 0x03
    1c84:	81 fd       	sbrc	r24, 1
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <vfprintf+0x26>
    1c88:	6f ef       	ldi	r22, 0xFF	; 255
    1c8a:	7f ef       	ldi	r23, 0xFF	; 255
    1c8c:	6f c3       	rjmp	.+1758   	; 0x236c <vfprintf+0x704>
    1c8e:	9e 01       	movw	r18, r28
    1c90:	2f 5f       	subi	r18, 0xFF	; 255
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	39 8b       	std	Y+17, r19	; 0x11
    1c96:	28 8b       	std	Y+16, r18	; 0x10
    1c98:	f3 01       	movw	r30, r6
    1c9a:	23 81       	ldd	r18, Z+3	; 0x03
    1c9c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c9e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ca0:	23 fd       	sbrc	r18, 3
    1ca2:	85 91       	lpm	r24, Z+
    1ca4:	23 ff       	sbrs	r18, 3
    1ca6:	81 91       	ld	r24, Z+
    1ca8:	ff 87       	std	Y+15, r31	; 0x0f
    1caa:	ee 87       	std	Y+14, r30	; 0x0e
    1cac:	88 23       	and	r24, r24
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <vfprintf+0x4a>
    1cb0:	5a c3       	rjmp	.+1716   	; 0x2366 <vfprintf+0x6fe>
    1cb2:	85 32       	cpi	r24, 0x25	; 37
    1cb4:	51 f4       	brne	.+20     	; 0x1cca <vfprintf+0x62>
    1cb6:	ee 85       	ldd	r30, Y+14	; 0x0e
    1cb8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1cba:	23 fd       	sbrc	r18, 3
    1cbc:	85 91       	lpm	r24, Z+
    1cbe:	23 ff       	sbrs	r18, 3
    1cc0:	81 91       	ld	r24, Z+
    1cc2:	ff 87       	std	Y+15, r31	; 0x0f
    1cc4:	ee 87       	std	Y+14, r30	; 0x0e
    1cc6:	85 32       	cpi	r24, 0x25	; 37
    1cc8:	29 f4       	brne	.+10     	; 0x1cd4 <vfprintf+0x6c>
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	b3 01       	movw	r22, r6
    1cce:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    1cd2:	e2 cf       	rjmp	.-60     	; 0x1c98 <vfprintf+0x30>
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	88 24       	eor	r8, r8
    1cda:	99 24       	eor	r9, r9
    1cdc:	10 32       	cpi	r17, 0x20	; 32
    1cde:	b0 f4       	brcc	.+44     	; 0x1d0c <vfprintf+0xa4>
    1ce0:	9b 32       	cpi	r25, 0x2B	; 43
    1ce2:	69 f0       	breq	.+26     	; 0x1cfe <vfprintf+0x96>
    1ce4:	9c 32       	cpi	r25, 0x2C	; 44
    1ce6:	28 f4       	brcc	.+10     	; 0x1cf2 <vfprintf+0x8a>
    1ce8:	90 32       	cpi	r25, 0x20	; 32
    1cea:	51 f0       	breq	.+20     	; 0x1d00 <vfprintf+0x98>
    1cec:	93 32       	cpi	r25, 0x23	; 35
    1cee:	71 f4       	brne	.+28     	; 0x1d0c <vfprintf+0xa4>
    1cf0:	0b c0       	rjmp	.+22     	; 0x1d08 <vfprintf+0xa0>
    1cf2:	9d 32       	cpi	r25, 0x2D	; 45
    1cf4:	39 f0       	breq	.+14     	; 0x1d04 <vfprintf+0x9c>
    1cf6:	90 33       	cpi	r25, 0x30	; 48
    1cf8:	49 f4       	brne	.+18     	; 0x1d0c <vfprintf+0xa4>
    1cfa:	11 60       	ori	r17, 0x01	; 1
    1cfc:	28 c0       	rjmp	.+80     	; 0x1d4e <vfprintf+0xe6>
    1cfe:	12 60       	ori	r17, 0x02	; 2
    1d00:	14 60       	ori	r17, 0x04	; 4
    1d02:	25 c0       	rjmp	.+74     	; 0x1d4e <vfprintf+0xe6>
    1d04:	18 60       	ori	r17, 0x08	; 8
    1d06:	23 c0       	rjmp	.+70     	; 0x1d4e <vfprintf+0xe6>
    1d08:	10 61       	ori	r17, 0x10	; 16
    1d0a:	21 c0       	rjmp	.+66     	; 0x1d4e <vfprintf+0xe6>
    1d0c:	17 fd       	sbrc	r17, 7
    1d0e:	2a c0       	rjmp	.+84     	; 0x1d64 <vfprintf+0xfc>
    1d10:	89 2f       	mov	r24, r25
    1d12:	80 53       	subi	r24, 0x30	; 48
    1d14:	8a 30       	cpi	r24, 0x0A	; 10
    1d16:	78 f4       	brcc	.+30     	; 0x1d36 <vfprintf+0xce>
    1d18:	16 ff       	sbrs	r17, 6
    1d1a:	06 c0       	rjmp	.+12     	; 0x1d28 <vfprintf+0xc0>
    1d1c:	fa e0       	ldi	r31, 0x0A	; 10
    1d1e:	9f 9e       	mul	r9, r31
    1d20:	90 2c       	mov	r9, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	98 0e       	add	r9, r24
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <vfprintf+0xe6>
    1d28:	3a e0       	ldi	r19, 0x0A	; 10
    1d2a:	83 9e       	mul	r8, r19
    1d2c:	80 2c       	mov	r8, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	88 0e       	add	r8, r24
    1d32:	10 62       	ori	r17, 0x20	; 32
    1d34:	0c c0       	rjmp	.+24     	; 0x1d4e <vfprintf+0xe6>
    1d36:	9e 32       	cpi	r25, 0x2E	; 46
    1d38:	21 f4       	brne	.+8      	; 0x1d42 <vfprintf+0xda>
    1d3a:	16 fd       	sbrc	r17, 6
    1d3c:	14 c3       	rjmp	.+1576   	; 0x2366 <vfprintf+0x6fe>
    1d3e:	10 64       	ori	r17, 0x40	; 64
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <vfprintf+0xe6>
    1d42:	9c 36       	cpi	r25, 0x6C	; 108
    1d44:	11 f4       	brne	.+4      	; 0x1d4a <vfprintf+0xe2>
    1d46:	10 68       	ori	r17, 0x80	; 128
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <vfprintf+0xe6>
    1d4a:	98 36       	cpi	r25, 0x68	; 104
    1d4c:	59 f4       	brne	.+22     	; 0x1d64 <vfprintf+0xfc>
    1d4e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d50:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d52:	23 fd       	sbrc	r18, 3
    1d54:	95 91       	lpm	r25, Z+
    1d56:	23 ff       	sbrs	r18, 3
    1d58:	91 91       	ld	r25, Z+
    1d5a:	ff 87       	std	Y+15, r31	; 0x0f
    1d5c:	ee 87       	std	Y+14, r30	; 0x0e
    1d5e:	99 23       	and	r25, r25
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <vfprintf+0xfc>
    1d62:	bc cf       	rjmp	.-136    	; 0x1cdc <vfprintf+0x74>
    1d64:	89 2f       	mov	r24, r25
    1d66:	85 54       	subi	r24, 0x45	; 69
    1d68:	83 30       	cpi	r24, 0x03	; 3
    1d6a:	20 f4       	brcc	.+8      	; 0x1d74 <vfprintf+0x10c>
    1d6c:	81 2f       	mov	r24, r17
    1d6e:	80 61       	ori	r24, 0x10	; 16
    1d70:	90 5e       	subi	r25, 0xE0	; 224
    1d72:	07 c0       	rjmp	.+14     	; 0x1d82 <vfprintf+0x11a>
    1d74:	89 2f       	mov	r24, r25
    1d76:	85 56       	subi	r24, 0x65	; 101
    1d78:	83 30       	cpi	r24, 0x03	; 3
    1d7a:	08 f0       	brcs	.+2      	; 0x1d7e <vfprintf+0x116>
    1d7c:	9f c1       	rjmp	.+830    	; 0x20bc <vfprintf+0x454>
    1d7e:	81 2f       	mov	r24, r17
    1d80:	8f 7e       	andi	r24, 0xEF	; 239
    1d82:	86 fd       	sbrc	r24, 6
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <vfprintf+0x122>
    1d86:	76 e0       	ldi	r23, 0x06	; 6
    1d88:	97 2e       	mov	r9, r23
    1d8a:	6f e3       	ldi	r22, 0x3F	; 63
    1d8c:	f6 2e       	mov	r15, r22
    1d8e:	f8 22       	and	r15, r24
    1d90:	95 36       	cpi	r25, 0x65	; 101
    1d92:	19 f4       	brne	.+6      	; 0x1d9a <vfprintf+0x132>
    1d94:	f0 e4       	ldi	r31, 0x40	; 64
    1d96:	ff 2a       	or	r15, r31
    1d98:	07 c0       	rjmp	.+14     	; 0x1da8 <vfprintf+0x140>
    1d9a:	96 36       	cpi	r25, 0x66	; 102
    1d9c:	19 f4       	brne	.+6      	; 0x1da4 <vfprintf+0x13c>
    1d9e:	20 e8       	ldi	r18, 0x80	; 128
    1da0:	f2 2a       	or	r15, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <vfprintf+0x140>
    1da4:	91 10       	cpse	r9, r1
    1da6:	9a 94       	dec	r9
    1da8:	f7 fe       	sbrs	r15, 7
    1daa:	0a c0       	rjmp	.+20     	; 0x1dc0 <vfprintf+0x158>
    1dac:	3b e3       	ldi	r19, 0x3B	; 59
    1dae:	39 15       	cp	r19, r9
    1db0:	18 f4       	brcc	.+6      	; 0x1db8 <vfprintf+0x150>
    1db2:	5c e3       	ldi	r21, 0x3C	; 60
    1db4:	b5 2e       	mov	r11, r21
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <vfprintf+0x154>
    1db8:	b9 2c       	mov	r11, r9
    1dba:	b3 94       	inc	r11
    1dbc:	27 e0       	ldi	r18, 0x07	; 7
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <vfprintf+0x16a>
    1dc0:	47 e0       	ldi	r20, 0x07	; 7
    1dc2:	49 15       	cp	r20, r9
    1dc4:	20 f4       	brcc	.+8      	; 0x1dce <vfprintf+0x166>
    1dc6:	bb 24       	eor	r11, r11
    1dc8:	47 e0       	ldi	r20, 0x07	; 7
    1dca:	94 2e       	mov	r9, r20
    1dcc:	f7 cf       	rjmp	.-18     	; 0x1dbc <vfprintf+0x154>
    1dce:	29 2d       	mov	r18, r9
    1dd0:	bb 24       	eor	r11, r11
    1dd2:	c6 01       	movw	r24, r12
    1dd4:	04 96       	adiw	r24, 0x04	; 4
    1dd6:	9d 87       	std	Y+13, r25	; 0x0d
    1dd8:	8c 87       	std	Y+12, r24	; 0x0c
    1dda:	f6 01       	movw	r30, r12
    1ddc:	60 81       	ld	r22, Z
    1dde:	71 81       	ldd	r23, Z+1	; 0x01
    1de0:	82 81       	ldd	r24, Z+2	; 0x02
    1de2:	93 81       	ldd	r25, Z+3	; 0x03
    1de4:	ae 01       	movw	r20, r28
    1de6:	4f 5f       	subi	r20, 0xFF	; 255
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dea:	0b 2d       	mov	r16, r11
    1dec:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__ftoa_engine>
    1df0:	6c 01       	movw	r12, r24
    1df2:	09 81       	ldd	r16, Y+1	; 0x01
    1df4:	20 2e       	mov	r2, r16
    1df6:	33 24       	eor	r3, r3
    1df8:	00 ff       	sbrs	r16, 0
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <vfprintf+0x19c>
    1dfc:	03 fd       	sbrc	r16, 3
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <vfprintf+0x19c>
    1e00:	1d e2       	ldi	r17, 0x2D	; 45
    1e02:	09 c0       	rjmp	.+18     	; 0x1e16 <vfprintf+0x1ae>
    1e04:	f1 fe       	sbrs	r15, 1
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <vfprintf+0x1a4>
    1e08:	1b e2       	ldi	r17, 0x2B	; 43
    1e0a:	05 c0       	rjmp	.+10     	; 0x1e16 <vfprintf+0x1ae>
    1e0c:	f2 fc       	sbrc	r15, 2
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <vfprintf+0x1ac>
    1e10:	10 e0       	ldi	r17, 0x00	; 0
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <vfprintf+0x1ae>
    1e14:	10 e2       	ldi	r17, 0x20	; 32
    1e16:	c1 01       	movw	r24, r2
    1e18:	8c 70       	andi	r24, 0x0C	; 12
    1e1a:	90 70       	andi	r25, 0x00	; 0
    1e1c:	89 2b       	or	r24, r25
    1e1e:	b9 f1       	breq	.+110    	; 0x1e8e <vfprintf+0x226>
    1e20:	11 23       	and	r17, r17
    1e22:	11 f4       	brne	.+4      	; 0x1e28 <vfprintf+0x1c0>
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <vfprintf+0x1c2>
    1e28:	84 e0       	ldi	r24, 0x04	; 4
    1e2a:	88 15       	cp	r24, r8
    1e2c:	10 f0       	brcs	.+4      	; 0x1e32 <vfprintf+0x1ca>
    1e2e:	88 24       	eor	r8, r8
    1e30:	0a c0       	rjmp	.+20     	; 0x1e46 <vfprintf+0x1de>
    1e32:	88 1a       	sub	r8, r24
    1e34:	f3 fc       	sbrc	r15, 3
    1e36:	07 c0       	rjmp	.+14     	; 0x1e46 <vfprintf+0x1de>
    1e38:	80 e2       	ldi	r24, 0x20	; 32
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	b3 01       	movw	r22, r6
    1e3e:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    1e42:	8a 94       	dec	r8
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <vfprintf+0x1d0>
    1e46:	11 23       	and	r17, r17
    1e48:	29 f0       	breq	.+10     	; 0x1e54 <vfprintf+0x1ec>
    1e4a:	81 2f       	mov	r24, r17
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	b3 01       	movw	r22, r6
    1e50:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    1e54:	23 fe       	sbrs	r2, 3
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <vfprintf+0x1f6>
    1e58:	03 e3       	ldi	r16, 0x33	; 51
    1e5a:	11 e0       	ldi	r17, 0x01	; 1
    1e5c:	0e c0       	rjmp	.+28     	; 0x1e7a <vfprintf+0x212>
    1e5e:	07 e3       	ldi	r16, 0x37	; 55
    1e60:	11 e0       	ldi	r17, 0x01	; 1
    1e62:	0b c0       	rjmp	.+22     	; 0x1e7a <vfprintf+0x212>
    1e64:	e1 14       	cp	r14, r1
    1e66:	f1 04       	cpc	r15, r1
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <vfprintf+0x204>
    1e6a:	80 52       	subi	r24, 0x20	; 32
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	b3 01       	movw	r22, r6
    1e70:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    1e74:	0f 5f       	subi	r16, 0xFF	; 255
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <vfprintf+0x21c>
    1e7a:	ef 2c       	mov	r14, r15
    1e7c:	ff 24       	eor	r15, r15
    1e7e:	f0 e1       	ldi	r31, 0x10	; 16
    1e80:	ef 22       	and	r14, r31
    1e82:	ff 24       	eor	r15, r15
    1e84:	f8 01       	movw	r30, r16
    1e86:	84 91       	lpm	r24, Z+
    1e88:	88 23       	and	r24, r24
    1e8a:	61 f7       	brne	.-40     	; 0x1e64 <vfprintf+0x1fc>
    1e8c:	14 c1       	rjmp	.+552    	; 0x20b6 <vfprintf+0x44e>
    1e8e:	f7 fe       	sbrs	r15, 7
    1e90:	12 c0       	rjmp	.+36     	; 0x1eb6 <vfprintf+0x24e>
    1e92:	bc 0c       	add	r11, r12
    1e94:	24 fe       	sbrs	r2, 4
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <vfprintf+0x238>
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	81 33       	cpi	r24, 0x31	; 49
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <vfprintf+0x238>
    1e9e:	ba 94       	dec	r11
    1ea0:	1b 14       	cp	r1, r11
    1ea2:	1c f0       	brlt	.+6      	; 0x1eaa <vfprintf+0x242>
    1ea4:	bb 24       	eor	r11, r11
    1ea6:	b3 94       	inc	r11
    1ea8:	2d c0       	rjmp	.+90     	; 0x1f04 <vfprintf+0x29c>
    1eaa:	f8 e0       	ldi	r31, 0x08	; 8
    1eac:	fb 15       	cp	r31, r11
    1eae:	50 f5       	brcc	.+84     	; 0x1f04 <vfprintf+0x29c>
    1eb0:	38 e0       	ldi	r19, 0x08	; 8
    1eb2:	b3 2e       	mov	r11, r19
    1eb4:	27 c0       	rjmp	.+78     	; 0x1f04 <vfprintf+0x29c>
    1eb6:	f6 fc       	sbrc	r15, 6
    1eb8:	25 c0       	rjmp	.+74     	; 0x1f04 <vfprintf+0x29c>
    1eba:	89 2d       	mov	r24, r9
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	8c 15       	cp	r24, r12
    1ec0:	9d 05       	cpc	r25, r13
    1ec2:	4c f0       	brlt	.+18     	; 0x1ed6 <vfprintf+0x26e>
    1ec4:	2c ef       	ldi	r18, 0xFC	; 252
    1ec6:	c2 16       	cp	r12, r18
    1ec8:	2f ef       	ldi	r18, 0xFF	; 255
    1eca:	d2 06       	cpc	r13, r18
    1ecc:	24 f0       	brlt	.+8      	; 0x1ed6 <vfprintf+0x26e>
    1ece:	30 e8       	ldi	r19, 0x80	; 128
    1ed0:	f3 2a       	or	r15, r19
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <vfprintf+0x26e>
    1ed4:	9a 94       	dec	r9
    1ed6:	99 20       	and	r9, r9
    1ed8:	49 f0       	breq	.+18     	; 0x1eec <vfprintf+0x284>
    1eda:	e2 e0       	ldi	r30, 0x02	; 2
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	ec 0f       	add	r30, r28
    1ee0:	fd 1f       	adc	r31, r29
    1ee2:	e9 0d       	add	r30, r9
    1ee4:	f1 1d       	adc	r31, r1
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 33       	cpi	r24, 0x30	; 48
    1eea:	a1 f3       	breq	.-24     	; 0x1ed4 <vfprintf+0x26c>
    1eec:	f7 fe       	sbrs	r15, 7
    1eee:	0a c0       	rjmp	.+20     	; 0x1f04 <vfprintf+0x29c>
    1ef0:	b9 2c       	mov	r11, r9
    1ef2:	b3 94       	inc	r11
    1ef4:	89 2d       	mov	r24, r9
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	c8 16       	cp	r12, r24
    1efa:	d9 06       	cpc	r13, r25
    1efc:	14 f0       	brlt	.+4      	; 0x1f02 <vfprintf+0x29a>
    1efe:	99 24       	eor	r9, r9
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <vfprintf+0x29c>
    1f02:	9c 18       	sub	r9, r12
    1f04:	f7 fc       	sbrc	r15, 7
    1f06:	03 c0       	rjmp	.+6      	; 0x1f0e <vfprintf+0x2a6>
    1f08:	25 e0       	ldi	r18, 0x05	; 5
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <vfprintf+0x2b8>
    1f0e:	1c 14       	cp	r1, r12
    1f10:	1d 04       	cpc	r1, r13
    1f12:	1c f0       	brlt	.+6      	; 0x1f1a <vfprintf+0x2b2>
    1f14:	21 e0       	ldi	r18, 0x01	; 1
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	03 c0       	rjmp	.+6      	; 0x1f20 <vfprintf+0x2b8>
    1f1a:	96 01       	movw	r18, r12
    1f1c:	2f 5f       	subi	r18, 0xFF	; 255
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	11 23       	and	r17, r17
    1f22:	11 f0       	breq	.+4      	; 0x1f28 <vfprintf+0x2c0>
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	99 20       	and	r9, r9
    1f2a:	29 f0       	breq	.+10     	; 0x1f36 <vfprintf+0x2ce>
    1f2c:	89 2d       	mov	r24, r9
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	01 96       	adiw	r24, 0x01	; 1
    1f32:	28 0f       	add	r18, r24
    1f34:	39 1f       	adc	r19, r25
    1f36:	88 2d       	mov	r24, r8
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	28 17       	cp	r18, r24
    1f3c:	39 07       	cpc	r19, r25
    1f3e:	14 f0       	brlt	.+4      	; 0x1f44 <vfprintf+0x2dc>
    1f40:	88 24       	eor	r8, r8
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <vfprintf+0x2de>
    1f44:	82 1a       	sub	r8, r18
    1f46:	4f 2c       	mov	r4, r15
    1f48:	55 24       	eor	r5, r5
    1f4a:	c2 01       	movw	r24, r4
    1f4c:	89 70       	andi	r24, 0x09	; 9
    1f4e:	90 70       	andi	r25, 0x00	; 0
    1f50:	89 2b       	or	r24, r25
    1f52:	39 f0       	breq	.+14     	; 0x1f62 <vfprintf+0x2fa>
    1f54:	08 c0       	rjmp	.+16     	; 0x1f66 <vfprintf+0x2fe>
    1f56:	80 e2       	ldi	r24, 0x20	; 32
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	b3 01       	movw	r22, r6
    1f5c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    1f60:	8a 94       	dec	r8
    1f62:	88 20       	and	r8, r8
    1f64:	c1 f7       	brne	.-16     	; 0x1f56 <vfprintf+0x2ee>
    1f66:	11 23       	and	r17, r17
    1f68:	29 f0       	breq	.+10     	; 0x1f74 <vfprintf+0x30c>
    1f6a:	81 2f       	mov	r24, r17
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	b3 01       	movw	r22, r6
    1f70:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    1f74:	43 fe       	sbrs	r4, 3
    1f76:	07 c0       	rjmp	.+14     	; 0x1f86 <vfprintf+0x31e>
    1f78:	08 c0       	rjmp	.+16     	; 0x1f8a <vfprintf+0x322>
    1f7a:	80 e3       	ldi	r24, 0x30	; 48
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	b3 01       	movw	r22, r6
    1f80:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    1f84:	8a 94       	dec	r8
    1f86:	88 20       	and	r8, r8
    1f88:	c1 f7       	brne	.-16     	; 0x1f7a <vfprintf+0x312>
    1f8a:	f7 fe       	sbrs	r15, 7
    1f8c:	46 c0       	rjmp	.+140    	; 0x201a <vfprintf+0x3b2>
    1f8e:	86 01       	movw	r16, r12
    1f90:	d7 fe       	sbrs	r13, 7
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <vfprintf+0x330>
    1f94:	00 e0       	ldi	r16, 0x00	; 0
    1f96:	10 e0       	ldi	r17, 0x00	; 0
    1f98:	76 01       	movw	r14, r12
    1f9a:	08 94       	sec
    1f9c:	e1 1c       	adc	r14, r1
    1f9e:	f1 1c       	adc	r15, r1
    1fa0:	e0 1a       	sub	r14, r16
    1fa2:	f1 0a       	sbc	r15, r17
    1fa4:	41 e0       	ldi	r20, 0x01	; 1
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	4c 0f       	add	r20, r28
    1faa:	5d 1f       	adc	r21, r29
    1fac:	e4 0e       	add	r14, r20
    1fae:	f5 1e       	adc	r15, r21
    1fb0:	26 01       	movw	r4, r12
    1fb2:	4b 18       	sub	r4, r11
    1fb4:	51 08       	sbc	r5, r1
    1fb6:	89 2d       	mov	r24, r9
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	aa 24       	eor	r10, r10
    1fbc:	bb 24       	eor	r11, r11
    1fbe:	a8 1a       	sub	r10, r24
    1fc0:	b9 0a       	sbc	r11, r25
    1fc2:	5f ef       	ldi	r21, 0xFF	; 255
    1fc4:	0f 3f       	cpi	r16, 0xFF	; 255
    1fc6:	15 07       	cpc	r17, r21
    1fc8:	29 f4       	brne	.+10     	; 0x1fd4 <vfprintf+0x36c>
    1fca:	8e e2       	ldi	r24, 0x2E	; 46
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	b3 01       	movw	r22, r6
    1fd0:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    1fd4:	c0 16       	cp	r12, r16
    1fd6:	d1 06       	cpc	r13, r17
    1fd8:	34 f0       	brlt	.+12     	; 0x1fe6 <vfprintf+0x37e>
    1fda:	40 16       	cp	r4, r16
    1fdc:	51 06       	cpc	r5, r17
    1fde:	1c f4       	brge	.+6      	; 0x1fe6 <vfprintf+0x37e>
    1fe0:	f7 01       	movw	r30, r14
    1fe2:	80 81       	ld	r24, Z
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <vfprintf+0x380>
    1fe6:	80 e3       	ldi	r24, 0x30	; 48
    1fe8:	01 50       	subi	r16, 0x01	; 1
    1fea:	10 40       	sbci	r17, 0x00	; 0
    1fec:	08 94       	sec
    1fee:	e1 1c       	adc	r14, r1
    1ff0:	f1 1c       	adc	r15, r1
    1ff2:	0a 15       	cp	r16, r10
    1ff4:	1b 05       	cpc	r17, r11
    1ff6:	2c f0       	brlt	.+10     	; 0x2002 <vfprintf+0x39a>
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	b3 01       	movw	r22, r6
    1ffc:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2000:	e0 cf       	rjmp	.-64     	; 0x1fc2 <vfprintf+0x35a>
    2002:	0c 15       	cp	r16, r12
    2004:	1d 05       	cpc	r17, r13
    2006:	39 f4       	brne	.+14     	; 0x2016 <vfprintf+0x3ae>
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	96 33       	cpi	r25, 0x36	; 54
    200c:	18 f4       	brcc	.+6      	; 0x2014 <vfprintf+0x3ac>
    200e:	95 33       	cpi	r25, 0x35	; 53
    2010:	11 f4       	brne	.+4      	; 0x2016 <vfprintf+0x3ae>
    2012:	24 fe       	sbrs	r2, 4
    2014:	81 e3       	ldi	r24, 0x31	; 49
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	4b c0       	rjmp	.+150    	; 0x20b0 <vfprintf+0x448>
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	81 33       	cpi	r24, 0x31	; 49
    201e:	09 f0       	breq	.+2      	; 0x2022 <vfprintf+0x3ba>
    2020:	0f 7e       	andi	r16, 0xEF	; 239
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	b3 01       	movw	r22, r6
    2026:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    202a:	99 20       	and	r9, r9
    202c:	a1 f0       	breq	.+40     	; 0x2056 <vfprintf+0x3ee>
    202e:	8e e2       	ldi	r24, 0x2E	; 46
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	b3 01       	movw	r22, r6
    2034:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2038:	12 e0       	ldi	r17, 0x02	; 2
    203a:	e1 e0       	ldi	r30, 0x01	; 1
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	ec 0f       	add	r30, r28
    2040:	fd 1f       	adc	r31, r29
    2042:	e1 0f       	add	r30, r17
    2044:	f1 1d       	adc	r31, r1
    2046:	1f 5f       	subi	r17, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	b3 01       	movw	r22, r6
    204e:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2052:	9a 94       	dec	r9
    2054:	91 f7       	brne	.-28     	; 0x203a <vfprintf+0x3d2>
    2056:	44 fc       	sbrc	r4, 4
    2058:	03 c0       	rjmp	.+6      	; 0x2060 <vfprintf+0x3f8>
    205a:	85 e6       	ldi	r24, 0x65	; 101
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <vfprintf+0x3fc>
    2060:	85 e4       	ldi	r24, 0x45	; 69
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	b3 01       	movw	r22, r6
    2066:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    206a:	d7 fc       	sbrc	r13, 7
    206c:	05 c0       	rjmp	.+10     	; 0x2078 <vfprintf+0x410>
    206e:	c1 14       	cp	r12, r1
    2070:	d1 04       	cpc	r13, r1
    2072:	41 f4       	brne	.+16     	; 0x2084 <vfprintf+0x41c>
    2074:	04 ff       	sbrs	r16, 4
    2076:	06 c0       	rjmp	.+12     	; 0x2084 <vfprintf+0x41c>
    2078:	d0 94       	com	r13
    207a:	c1 94       	neg	r12
    207c:	d1 08       	sbc	r13, r1
    207e:	d3 94       	inc	r13
    2080:	8d e2       	ldi	r24, 0x2D	; 45
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <vfprintf+0x41e>
    2084:	8b e2       	ldi	r24, 0x2B	; 43
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	b3 01       	movw	r22, r6
    208a:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    208e:	80 e3       	ldi	r24, 0x30	; 48
    2090:	05 c0       	rjmp	.+10     	; 0x209c <vfprintf+0x434>
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	26 ef       	ldi	r18, 0xF6	; 246
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	c2 0e       	add	r12, r18
    209a:	d3 1e       	adc	r13, r19
    209c:	3a e0       	ldi	r19, 0x0A	; 10
    209e:	c3 16       	cp	r12, r19
    20a0:	d1 04       	cpc	r13, r1
    20a2:	bc f7       	brge	.-18     	; 0x2092 <vfprintf+0x42a>
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	b3 01       	movw	r22, r6
    20a8:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    20ac:	c6 01       	movw	r24, r12
    20ae:	c0 96       	adiw	r24, 0x30	; 48
    20b0:	b3 01       	movw	r22, r6
    20b2:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    20b6:	cc 84       	ldd	r12, Y+12	; 0x0c
    20b8:	dd 84       	ldd	r13, Y+13	; 0x0d
    20ba:	52 c1       	rjmp	.+676    	; 0x2360 <vfprintf+0x6f8>
    20bc:	93 36       	cpi	r25, 0x63	; 99
    20be:	31 f0       	breq	.+12     	; 0x20cc <vfprintf+0x464>
    20c0:	93 37       	cpi	r25, 0x73	; 115
    20c2:	99 f0       	breq	.+38     	; 0x20ea <vfprintf+0x482>
    20c4:	93 35       	cpi	r25, 0x53	; 83
    20c6:	09 f0       	breq	.+2      	; 0x20ca <vfprintf+0x462>
    20c8:	59 c0       	rjmp	.+178    	; 0x217c <vfprintf+0x514>
    20ca:	23 c0       	rjmp	.+70     	; 0x2112 <vfprintf+0x4aa>
    20cc:	f6 01       	movw	r30, r12
    20ce:	80 81       	ld	r24, Z
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	5e 01       	movw	r10, r28
    20d4:	08 94       	sec
    20d6:	a1 1c       	adc	r10, r1
    20d8:	b1 1c       	adc	r11, r1
    20da:	22 e0       	ldi	r18, 0x02	; 2
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	c2 0e       	add	r12, r18
    20e0:	d3 1e       	adc	r13, r19
    20e2:	21 e0       	ldi	r18, 0x01	; 1
    20e4:	e2 2e       	mov	r14, r18
    20e6:	f1 2c       	mov	r15, r1
    20e8:	12 c0       	rjmp	.+36     	; 0x210e <vfprintf+0x4a6>
    20ea:	f6 01       	movw	r30, r12
    20ec:	a0 80       	ld	r10, Z
    20ee:	b1 80       	ldd	r11, Z+1	; 0x01
    20f0:	16 fd       	sbrc	r17, 6
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x492>
    20f4:	6f ef       	ldi	r22, 0xFF	; 255
    20f6:	7f ef       	ldi	r23, 0xFF	; 255
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vfprintf+0x496>
    20fa:	69 2d       	mov	r22, r9
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	22 e0       	ldi	r18, 0x02	; 2
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	c2 0e       	add	r12, r18
    2104:	d3 1e       	adc	r13, r19
    2106:	c5 01       	movw	r24, r10
    2108:	0e 94 11 16 	call	0x2c22	; 0x2c22 <strnlen>
    210c:	7c 01       	movw	r14, r24
    210e:	1f 77       	andi	r17, 0x7F	; 127
    2110:	13 c0       	rjmp	.+38     	; 0x2138 <vfprintf+0x4d0>
    2112:	f6 01       	movw	r30, r12
    2114:	a0 80       	ld	r10, Z
    2116:	b1 80       	ldd	r11, Z+1	; 0x01
    2118:	16 fd       	sbrc	r17, 6
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <vfprintf+0x4ba>
    211c:	6f ef       	ldi	r22, 0xFF	; 255
    211e:	7f ef       	ldi	r23, 0xFF	; 255
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <vfprintf+0x4be>
    2122:	69 2d       	mov	r22, r9
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	22 e0       	ldi	r18, 0x02	; 2
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	c2 0e       	add	r12, r18
    212c:	d3 1e       	adc	r13, r19
    212e:	c5 01       	movw	r24, r10
    2130:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <strnlen_P>
    2134:	7c 01       	movw	r14, r24
    2136:	10 68       	ori	r17, 0x80	; 128
    2138:	13 ff       	sbrs	r17, 3
    213a:	07 c0       	rjmp	.+14     	; 0x214a <vfprintf+0x4e2>
    213c:	1b c0       	rjmp	.+54     	; 0x2174 <vfprintf+0x50c>
    213e:	80 e2       	ldi	r24, 0x20	; 32
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	b3 01       	movw	r22, r6
    2144:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2148:	8a 94       	dec	r8
    214a:	88 2d       	mov	r24, r8
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	e8 16       	cp	r14, r24
    2150:	f9 06       	cpc	r15, r25
    2152:	a8 f3       	brcs	.-22     	; 0x213e <vfprintf+0x4d6>
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <vfprintf+0x50c>
    2156:	f5 01       	movw	r30, r10
    2158:	17 fd       	sbrc	r17, 7
    215a:	85 91       	lpm	r24, Z+
    215c:	17 ff       	sbrs	r17, 7
    215e:	81 91       	ld	r24, Z+
    2160:	5f 01       	movw	r10, r30
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	b3 01       	movw	r22, r6
    2166:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    216a:	81 10       	cpse	r8, r1
    216c:	8a 94       	dec	r8
    216e:	08 94       	sec
    2170:	e1 08       	sbc	r14, r1
    2172:	f1 08       	sbc	r15, r1
    2174:	e1 14       	cp	r14, r1
    2176:	f1 04       	cpc	r15, r1
    2178:	71 f7       	brne	.-36     	; 0x2156 <vfprintf+0x4ee>
    217a:	f2 c0       	rjmp	.+484    	; 0x2360 <vfprintf+0x6f8>
    217c:	94 36       	cpi	r25, 0x64	; 100
    217e:	11 f0       	breq	.+4      	; 0x2184 <vfprintf+0x51c>
    2180:	99 36       	cpi	r25, 0x69	; 105
    2182:	89 f5       	brne	.+98     	; 0x21e6 <vfprintf+0x57e>
    2184:	17 ff       	sbrs	r17, 7
    2186:	08 c0       	rjmp	.+16     	; 0x2198 <vfprintf+0x530>
    2188:	f6 01       	movw	r30, r12
    218a:	20 81       	ld	r18, Z
    218c:	31 81       	ldd	r19, Z+1	; 0x01
    218e:	42 81       	ldd	r20, Z+2	; 0x02
    2190:	53 81       	ldd	r21, Z+3	; 0x03
    2192:	84 e0       	ldi	r24, 0x04	; 4
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0a c0       	rjmp	.+20     	; 0x21ac <vfprintf+0x544>
    2198:	f6 01       	movw	r30, r12
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	9c 01       	movw	r18, r24
    21a0:	44 27       	eor	r20, r20
    21a2:	37 fd       	sbrc	r19, 7
    21a4:	40 95       	com	r20
    21a6:	54 2f       	mov	r21, r20
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	c8 0e       	add	r12, r24
    21ae:	d9 1e       	adc	r13, r25
    21b0:	9f e6       	ldi	r25, 0x6F	; 111
    21b2:	f9 2e       	mov	r15, r25
    21b4:	f1 22       	and	r15, r17
    21b6:	57 ff       	sbrs	r21, 7
    21b8:	09 c0       	rjmp	.+18     	; 0x21cc <vfprintf+0x564>
    21ba:	50 95       	com	r21
    21bc:	40 95       	com	r20
    21be:	30 95       	com	r19
    21c0:	21 95       	neg	r18
    21c2:	3f 4f       	sbci	r19, 0xFF	; 255
    21c4:	4f 4f       	sbci	r20, 0xFF	; 255
    21c6:	5f 4f       	sbci	r21, 0xFF	; 255
    21c8:	90 e8       	ldi	r25, 0x80	; 128
    21ca:	f9 2a       	or	r15, r25
    21cc:	ca 01       	movw	r24, r20
    21ce:	b9 01       	movw	r22, r18
    21d0:	ae 01       	movw	r20, r28
    21d2:	4f 5f       	subi	r20, 0xFF	; 255
    21d4:	5f 4f       	sbci	r21, 0xFF	; 255
    21d6:	2a e0       	ldi	r18, 0x0A	; 10
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__ultoa_invert>
    21de:	e8 2e       	mov	r14, r24
    21e0:	e8 89       	ldd	r30, Y+16	; 0x10
    21e2:	ee 1a       	sub	r14, r30
    21e4:	41 c0       	rjmp	.+130    	; 0x2268 <vfprintf+0x600>
    21e6:	95 37       	cpi	r25, 0x75	; 117
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <vfprintf+0x58a>
    21ea:	1f 7e       	andi	r17, 0xEF	; 239
    21ec:	2a e0       	ldi	r18, 0x0A	; 10
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	1c c0       	rjmp	.+56     	; 0x222a <vfprintf+0x5c2>
    21f2:	19 7f       	andi	r17, 0xF9	; 249
    21f4:	9f 36       	cpi	r25, 0x6F	; 111
    21f6:	61 f0       	breq	.+24     	; 0x2210 <vfprintf+0x5a8>
    21f8:	90 37       	cpi	r25, 0x70	; 112
    21fa:	20 f4       	brcc	.+8      	; 0x2204 <vfprintf+0x59c>
    21fc:	98 35       	cpi	r25, 0x58	; 88
    21fe:	09 f0       	breq	.+2      	; 0x2202 <vfprintf+0x59a>
    2200:	b2 c0       	rjmp	.+356    	; 0x2366 <vfprintf+0x6fe>
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <vfprintf+0x5ba>
    2204:	90 37       	cpi	r25, 0x70	; 112
    2206:	39 f0       	breq	.+14     	; 0x2216 <vfprintf+0x5ae>
    2208:	98 37       	cpi	r25, 0x78	; 120
    220a:	09 f0       	breq	.+2      	; 0x220e <vfprintf+0x5a6>
    220c:	ac c0       	rjmp	.+344    	; 0x2366 <vfprintf+0x6fe>
    220e:	04 c0       	rjmp	.+8      	; 0x2218 <vfprintf+0x5b0>
    2210:	28 e0       	ldi	r18, 0x08	; 8
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	0a c0       	rjmp	.+20     	; 0x222a <vfprintf+0x5c2>
    2216:	10 61       	ori	r17, 0x10	; 16
    2218:	14 fd       	sbrc	r17, 4
    221a:	14 60       	ori	r17, 0x04	; 4
    221c:	20 e1       	ldi	r18, 0x10	; 16
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	04 c0       	rjmp	.+8      	; 0x222a <vfprintf+0x5c2>
    2222:	14 fd       	sbrc	r17, 4
    2224:	16 60       	ori	r17, 0x06	; 6
    2226:	20 e1       	ldi	r18, 0x10	; 16
    2228:	32 e0       	ldi	r19, 0x02	; 2
    222a:	17 ff       	sbrs	r17, 7
    222c:	08 c0       	rjmp	.+16     	; 0x223e <vfprintf+0x5d6>
    222e:	f6 01       	movw	r30, r12
    2230:	60 81       	ld	r22, Z
    2232:	71 81       	ldd	r23, Z+1	; 0x01
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	44 e0       	ldi	r20, 0x04	; 4
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	08 c0       	rjmp	.+16     	; 0x224e <vfprintf+0x5e6>
    223e:	f6 01       	movw	r30, r12
    2240:	80 81       	ld	r24, Z
    2242:	91 81       	ldd	r25, Z+1	; 0x01
    2244:	bc 01       	movw	r22, r24
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	42 e0       	ldi	r20, 0x02	; 2
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	c4 0e       	add	r12, r20
    2250:	d5 1e       	adc	r13, r21
    2252:	ae 01       	movw	r20, r28
    2254:	4f 5f       	subi	r20, 0xFF	; 255
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__ultoa_invert>
    225c:	e8 2e       	mov	r14, r24
    225e:	58 89       	ldd	r21, Y+16	; 0x10
    2260:	e5 1a       	sub	r14, r21
    2262:	8f e7       	ldi	r24, 0x7F	; 127
    2264:	f8 2e       	mov	r15, r24
    2266:	f1 22       	and	r15, r17
    2268:	f6 fe       	sbrs	r15, 6
    226a:	0b c0       	rjmp	.+22     	; 0x2282 <vfprintf+0x61a>
    226c:	8e ef       	ldi	r24, 0xFE	; 254
    226e:	f8 22       	and	r15, r24
    2270:	e9 14       	cp	r14, r9
    2272:	38 f4       	brcc	.+14     	; 0x2282 <vfprintf+0x61a>
    2274:	f4 fe       	sbrs	r15, 4
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <vfprintf+0x61e>
    2278:	f2 fc       	sbrc	r15, 2
    227a:	05 c0       	rjmp	.+10     	; 0x2286 <vfprintf+0x61e>
    227c:	9f ee       	ldi	r25, 0xEF	; 239
    227e:	f9 22       	and	r15, r25
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <vfprintf+0x61e>
    2282:	1e 2d       	mov	r17, r14
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <vfprintf+0x620>
    2286:	19 2d       	mov	r17, r9
    2288:	f4 fe       	sbrs	r15, 4
    228a:	0d c0       	rjmp	.+26     	; 0x22a6 <vfprintf+0x63e>
    228c:	fe 01       	movw	r30, r28
    228e:	ee 0d       	add	r30, r14
    2290:	f1 1d       	adc	r31, r1
    2292:	80 81       	ld	r24, Z
    2294:	80 33       	cpi	r24, 0x30	; 48
    2296:	19 f4       	brne	.+6      	; 0x229e <vfprintf+0x636>
    2298:	e9 ee       	ldi	r30, 0xE9	; 233
    229a:	fe 22       	and	r15, r30
    229c:	08 c0       	rjmp	.+16     	; 0x22ae <vfprintf+0x646>
    229e:	1f 5f       	subi	r17, 0xFF	; 255
    22a0:	f2 fe       	sbrs	r15, 2
    22a2:	05 c0       	rjmp	.+10     	; 0x22ae <vfprintf+0x646>
    22a4:	03 c0       	rjmp	.+6      	; 0x22ac <vfprintf+0x644>
    22a6:	8f 2d       	mov	r24, r15
    22a8:	86 78       	andi	r24, 0x86	; 134
    22aa:	09 f0       	breq	.+2      	; 0x22ae <vfprintf+0x646>
    22ac:	1f 5f       	subi	r17, 0xFF	; 255
    22ae:	0f 2d       	mov	r16, r15
    22b0:	f3 fc       	sbrc	r15, 3
    22b2:	14 c0       	rjmp	.+40     	; 0x22dc <vfprintf+0x674>
    22b4:	f0 fe       	sbrs	r15, 0
    22b6:	0f c0       	rjmp	.+30     	; 0x22d6 <vfprintf+0x66e>
    22b8:	18 15       	cp	r17, r8
    22ba:	10 f0       	brcs	.+4      	; 0x22c0 <vfprintf+0x658>
    22bc:	9e 2c       	mov	r9, r14
    22be:	0b c0       	rjmp	.+22     	; 0x22d6 <vfprintf+0x66e>
    22c0:	9e 2c       	mov	r9, r14
    22c2:	98 0c       	add	r9, r8
    22c4:	91 1a       	sub	r9, r17
    22c6:	18 2d       	mov	r17, r8
    22c8:	06 c0       	rjmp	.+12     	; 0x22d6 <vfprintf+0x66e>
    22ca:	80 e2       	ldi	r24, 0x20	; 32
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	b3 01       	movw	r22, r6
    22d0:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    22d4:	1f 5f       	subi	r17, 0xFF	; 255
    22d6:	18 15       	cp	r17, r8
    22d8:	c0 f3       	brcs	.-16     	; 0x22ca <vfprintf+0x662>
    22da:	04 c0       	rjmp	.+8      	; 0x22e4 <vfprintf+0x67c>
    22dc:	18 15       	cp	r17, r8
    22de:	10 f4       	brcc	.+4      	; 0x22e4 <vfprintf+0x67c>
    22e0:	81 1a       	sub	r8, r17
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <vfprintf+0x67e>
    22e4:	88 24       	eor	r8, r8
    22e6:	04 ff       	sbrs	r16, 4
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <vfprintf+0x6a0>
    22ea:	80 e3       	ldi	r24, 0x30	; 48
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	b3 01       	movw	r22, r6
    22f0:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    22f4:	02 ff       	sbrs	r16, 2
    22f6:	1d c0       	rjmp	.+58     	; 0x2332 <vfprintf+0x6ca>
    22f8:	01 fd       	sbrc	r16, 1
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <vfprintf+0x69a>
    22fc:	88 e7       	ldi	r24, 0x78	; 120
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e c0       	rjmp	.+28     	; 0x231e <vfprintf+0x6b6>
    2302:	88 e5       	ldi	r24, 0x58	; 88
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0b c0       	rjmp	.+22     	; 0x231e <vfprintf+0x6b6>
    2308:	80 2f       	mov	r24, r16
    230a:	86 78       	andi	r24, 0x86	; 134
    230c:	91 f0       	breq	.+36     	; 0x2332 <vfprintf+0x6ca>
    230e:	01 ff       	sbrs	r16, 1
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <vfprintf+0x6ae>
    2312:	8b e2       	ldi	r24, 0x2B	; 43
    2314:	01 c0       	rjmp	.+2      	; 0x2318 <vfprintf+0x6b0>
    2316:	80 e2       	ldi	r24, 0x20	; 32
    2318:	f7 fc       	sbrc	r15, 7
    231a:	8d e2       	ldi	r24, 0x2D	; 45
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	b3 01       	movw	r22, r6
    2320:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2324:	06 c0       	rjmp	.+12     	; 0x2332 <vfprintf+0x6ca>
    2326:	80 e3       	ldi	r24, 0x30	; 48
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	b3 01       	movw	r22, r6
    232c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    2330:	9a 94       	dec	r9
    2332:	e9 14       	cp	r14, r9
    2334:	c0 f3       	brcs	.-16     	; 0x2326 <vfprintf+0x6be>
    2336:	ea 94       	dec	r14
    2338:	e1 e0       	ldi	r30, 0x01	; 1
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	ec 0f       	add	r30, r28
    233e:	fd 1f       	adc	r31, r29
    2340:	ee 0d       	add	r30, r14
    2342:	f1 1d       	adc	r31, r1
    2344:	80 81       	ld	r24, Z
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	b3 01       	movw	r22, r6
    234a:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    234e:	ee 20       	and	r14, r14
    2350:	91 f7       	brne	.-28     	; 0x2336 <vfprintf+0x6ce>
    2352:	06 c0       	rjmp	.+12     	; 0x2360 <vfprintf+0x6f8>
    2354:	80 e2       	ldi	r24, 0x20	; 32
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	b3 01       	movw	r22, r6
    235a:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <fputc>
    235e:	8a 94       	dec	r8
    2360:	88 20       	and	r8, r8
    2362:	c1 f7       	brne	.-16     	; 0x2354 <vfprintf+0x6ec>
    2364:	99 cc       	rjmp	.-1742   	; 0x1c98 <vfprintf+0x30>
    2366:	f3 01       	movw	r30, r6
    2368:	66 81       	ldd	r22, Z+6	; 0x06
    236a:	77 81       	ldd	r23, Z+7	; 0x07
    236c:	cb 01       	movw	r24, r22
    236e:	61 96       	adiw	r28, 0x11	; 17
    2370:	e2 e1       	ldi	r30, 0x12	; 18
    2372:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__epilogue_restores__>

00002376 <__subsf3>:
    2376:	50 58       	subi	r21, 0x80	; 128

00002378 <__addsf3>:
    2378:	bb 27       	eor	r27, r27
    237a:	aa 27       	eor	r26, r26
    237c:	0e d0       	rcall	.+28     	; 0x239a <__addsf3x>
    237e:	fc c1       	rjmp	.+1016   	; 0x2778 <__fp_round>
    2380:	ed d1       	rcall	.+986    	; 0x275c <__fp_pscA>
    2382:	30 f0       	brcs	.+12     	; 0x2390 <__addsf3+0x18>
    2384:	f2 d1       	rcall	.+996    	; 0x276a <__fp_pscB>
    2386:	20 f0       	brcs	.+8      	; 0x2390 <__addsf3+0x18>
    2388:	31 f4       	brne	.+12     	; 0x2396 <__addsf3+0x1e>
    238a:	9f 3f       	cpi	r25, 0xFF	; 255
    238c:	11 f4       	brne	.+4      	; 0x2392 <__addsf3+0x1a>
    238e:	1e f4       	brtc	.+6      	; 0x2396 <__addsf3+0x1e>
    2390:	bd c1       	rjmp	.+890    	; 0x270c <__fp_nan>
    2392:	0e f4       	brtc	.+2      	; 0x2396 <__addsf3+0x1e>
    2394:	e0 95       	com	r30
    2396:	e7 fb       	bst	r30, 7
    2398:	b3 c1       	rjmp	.+870    	; 0x2700 <__fp_inf>

0000239a <__addsf3x>:
    239a:	e9 2f       	mov	r30, r25
    239c:	fe d1       	rcall	.+1020   	; 0x279a <__fp_split3>
    239e:	80 f3       	brcs	.-32     	; 0x2380 <__addsf3+0x8>
    23a0:	ba 17       	cp	r27, r26
    23a2:	62 07       	cpc	r22, r18
    23a4:	73 07       	cpc	r23, r19
    23a6:	84 07       	cpc	r24, r20
    23a8:	95 07       	cpc	r25, r21
    23aa:	18 f0       	brcs	.+6      	; 0x23b2 <__addsf3x+0x18>
    23ac:	71 f4       	brne	.+28     	; 0x23ca <__addsf3x+0x30>
    23ae:	9e f5       	brtc	.+102    	; 0x2416 <__addsf3x+0x7c>
    23b0:	16 c2       	rjmp	.+1068   	; 0x27de <__fp_zero>
    23b2:	0e f4       	brtc	.+2      	; 0x23b6 <__addsf3x+0x1c>
    23b4:	e0 95       	com	r30
    23b6:	0b 2e       	mov	r0, r27
    23b8:	ba 2f       	mov	r27, r26
    23ba:	a0 2d       	mov	r26, r0
    23bc:	0b 01       	movw	r0, r22
    23be:	b9 01       	movw	r22, r18
    23c0:	90 01       	movw	r18, r0
    23c2:	0c 01       	movw	r0, r24
    23c4:	ca 01       	movw	r24, r20
    23c6:	a0 01       	movw	r20, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	ff 27       	eor	r31, r31
    23cc:	59 1b       	sub	r21, r25
    23ce:	99 f0       	breq	.+38     	; 0x23f6 <__addsf3x+0x5c>
    23d0:	59 3f       	cpi	r21, 0xF9	; 249
    23d2:	50 f4       	brcc	.+20     	; 0x23e8 <__addsf3x+0x4e>
    23d4:	50 3e       	cpi	r21, 0xE0	; 224
    23d6:	68 f1       	brcs	.+90     	; 0x2432 <__addsf3x+0x98>
    23d8:	1a 16       	cp	r1, r26
    23da:	f0 40       	sbci	r31, 0x00	; 0
    23dc:	a2 2f       	mov	r26, r18
    23de:	23 2f       	mov	r18, r19
    23e0:	34 2f       	mov	r19, r20
    23e2:	44 27       	eor	r20, r20
    23e4:	58 5f       	subi	r21, 0xF8	; 248
    23e6:	f3 cf       	rjmp	.-26     	; 0x23ce <__addsf3x+0x34>
    23e8:	46 95       	lsr	r20
    23ea:	37 95       	ror	r19
    23ec:	27 95       	ror	r18
    23ee:	a7 95       	ror	r26
    23f0:	f0 40       	sbci	r31, 0x00	; 0
    23f2:	53 95       	inc	r21
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__addsf3x+0x4e>
    23f6:	7e f4       	brtc	.+30     	; 0x2416 <__addsf3x+0x7c>
    23f8:	1f 16       	cp	r1, r31
    23fa:	ba 0b       	sbc	r27, r26
    23fc:	62 0b       	sbc	r22, r18
    23fe:	73 0b       	sbc	r23, r19
    2400:	84 0b       	sbc	r24, r20
    2402:	ba f0       	brmi	.+46     	; 0x2432 <__addsf3x+0x98>
    2404:	91 50       	subi	r25, 0x01	; 1
    2406:	a1 f0       	breq	.+40     	; 0x2430 <__addsf3x+0x96>
    2408:	ff 0f       	add	r31, r31
    240a:	bb 1f       	adc	r27, r27
    240c:	66 1f       	adc	r22, r22
    240e:	77 1f       	adc	r23, r23
    2410:	88 1f       	adc	r24, r24
    2412:	c2 f7       	brpl	.-16     	; 0x2404 <__addsf3x+0x6a>
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <__addsf3x+0x98>
    2416:	ba 0f       	add	r27, r26
    2418:	62 1f       	adc	r22, r18
    241a:	73 1f       	adc	r23, r19
    241c:	84 1f       	adc	r24, r20
    241e:	48 f4       	brcc	.+18     	; 0x2432 <__addsf3x+0x98>
    2420:	87 95       	ror	r24
    2422:	77 95       	ror	r23
    2424:	67 95       	ror	r22
    2426:	b7 95       	ror	r27
    2428:	f7 95       	ror	r31
    242a:	9e 3f       	cpi	r25, 0xFE	; 254
    242c:	08 f0       	brcs	.+2      	; 0x2430 <__addsf3x+0x96>
    242e:	b3 cf       	rjmp	.-154    	; 0x2396 <__addsf3+0x1e>
    2430:	93 95       	inc	r25
    2432:	88 0f       	add	r24, r24
    2434:	08 f0       	brcs	.+2      	; 0x2438 <__addsf3x+0x9e>
    2436:	99 27       	eor	r25, r25
    2438:	ee 0f       	add	r30, r30
    243a:	97 95       	ror	r25
    243c:	87 95       	ror	r24
    243e:	08 95       	ret
    2440:	8d d1       	rcall	.+794    	; 0x275c <__fp_pscA>
    2442:	58 f0       	brcs	.+22     	; 0x245a <__addsf3x+0xc0>
    2444:	80 e8       	ldi	r24, 0x80	; 128
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	09 f4       	brne	.+2      	; 0x244c <__addsf3x+0xb2>
    244a:	9e ef       	ldi	r25, 0xFE	; 254
    244c:	8e d1       	rcall	.+796    	; 0x276a <__fp_pscB>
    244e:	28 f0       	brcs	.+10     	; 0x245a <__addsf3x+0xc0>
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	51 e0       	ldi	r21, 0x01	; 1
    2454:	59 f4       	brne	.+22     	; 0x246c <atan2+0xe>
    2456:	5e ef       	ldi	r21, 0xFE	; 254
    2458:	09 c0       	rjmp	.+18     	; 0x246c <atan2+0xe>
    245a:	58 c1       	rjmp	.+688    	; 0x270c <__fp_nan>
    245c:	c0 c1       	rjmp	.+896    	; 0x27de <__fp_zero>

0000245e <atan2>:
    245e:	e9 2f       	mov	r30, r25
    2460:	e0 78       	andi	r30, 0x80	; 128
    2462:	9b d1       	rcall	.+822    	; 0x279a <__fp_split3>
    2464:	68 f3       	brcs	.-38     	; 0x2440 <__addsf3x+0xa6>
    2466:	09 2e       	mov	r0, r25
    2468:	05 2a       	or	r0, r21
    246a:	c1 f3       	breq	.-16     	; 0x245c <__addsf3x+0xc2>
    246c:	26 17       	cp	r18, r22
    246e:	37 07       	cpc	r19, r23
    2470:	48 07       	cpc	r20, r24
    2472:	59 07       	cpc	r21, r25
    2474:	38 f0       	brcs	.+14     	; 0x2484 <atan2+0x26>
    2476:	0e 2e       	mov	r0, r30
    2478:	07 f8       	bld	r0, 7
    247a:	e0 25       	eor	r30, r0
    247c:	69 f0       	breq	.+26     	; 0x2498 <atan2+0x3a>
    247e:	e0 25       	eor	r30, r0
    2480:	e0 64       	ori	r30, 0x40	; 64
    2482:	0a c0       	rjmp	.+20     	; 0x2498 <atan2+0x3a>
    2484:	ef 63       	ori	r30, 0x3F	; 63
    2486:	07 f8       	bld	r0, 7
    2488:	00 94       	com	r0
    248a:	07 fa       	bst	r0, 7
    248c:	db 01       	movw	r26, r22
    248e:	b9 01       	movw	r22, r18
    2490:	9d 01       	movw	r18, r26
    2492:	dc 01       	movw	r26, r24
    2494:	ca 01       	movw	r24, r20
    2496:	ad 01       	movw	r20, r26
    2498:	ef 93       	push	r30
    249a:	47 d0       	rcall	.+142    	; 0x252a <__divsf3_pse>
    249c:	6d d1       	rcall	.+730    	; 0x2778 <__fp_round>
    249e:	0a d0       	rcall	.+20     	; 0x24b4 <atan>
    24a0:	5f 91       	pop	r21
    24a2:	55 23       	and	r21, r21
    24a4:	31 f0       	breq	.+12     	; 0x24b2 <atan2+0x54>
    24a6:	2b ed       	ldi	r18, 0xDB	; 219
    24a8:	3f e0       	ldi	r19, 0x0F	; 15
    24aa:	49 e4       	ldi	r20, 0x49	; 73
    24ac:	50 fd       	sbrc	r21, 0
    24ae:	49 ec       	ldi	r20, 0xC9	; 201
    24b0:	63 cf       	rjmp	.-314    	; 0x2378 <__addsf3>
    24b2:	08 95       	ret

000024b4 <atan>:
    24b4:	df 93       	push	r29
    24b6:	dd 27       	eor	r29, r29
    24b8:	b9 2f       	mov	r27, r25
    24ba:	bf 77       	andi	r27, 0x7F	; 127
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	16 16       	cp	r1, r22
    24c2:	17 06       	cpc	r1, r23
    24c4:	48 07       	cpc	r20, r24
    24c6:	5b 07       	cpc	r21, r27
    24c8:	10 f4       	brcc	.+4      	; 0x24ce <atan+0x1a>
    24ca:	d9 2f       	mov	r29, r25
    24cc:	93 d1       	rcall	.+806    	; 0x27f4 <inverse>
    24ce:	9f 93       	push	r25
    24d0:	8f 93       	push	r24
    24d2:	7f 93       	push	r23
    24d4:	6f 93       	push	r22
    24d6:	3d d2       	rcall	.+1146   	; 0x2952 <square>
    24d8:	ec ea       	ldi	r30, 0xAC	; 172
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	1a d1       	rcall	.+564    	; 0x2712 <__fp_powser>
    24de:	4c d1       	rcall	.+664    	; 0x2778 <__fp_round>
    24e0:	2f 91       	pop	r18
    24e2:	3f 91       	pop	r19
    24e4:	4f 91       	pop	r20
    24e6:	5f 91       	pop	r21
    24e8:	dd d1       	rcall	.+954    	; 0x28a4 <__mulsf3x>
    24ea:	dd 23       	and	r29, r29
    24ec:	49 f0       	breq	.+18     	; 0x2500 <atan+0x4c>
    24ee:	90 58       	subi	r25, 0x80	; 128
    24f0:	a2 ea       	ldi	r26, 0xA2	; 162
    24f2:	2a ed       	ldi	r18, 0xDA	; 218
    24f4:	3f e0       	ldi	r19, 0x0F	; 15
    24f6:	49 ec       	ldi	r20, 0xC9	; 201
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	d0 78       	andi	r29, 0x80	; 128
    24fc:	5d 27       	eor	r21, r29
    24fe:	4d df       	rcall	.-358    	; 0x239a <__addsf3x>
    2500:	df 91       	pop	r29
    2502:	3a c1       	rjmp	.+628    	; 0x2778 <__fp_round>

00002504 <__cmpsf2>:
    2504:	d9 d0       	rcall	.+434    	; 0x26b8 <__fp_cmp>
    2506:	08 f4       	brcc	.+2      	; 0x250a <__cmpsf2+0x6>
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	08 95       	ret

0000250c <__divsf3>:
    250c:	0c d0       	rcall	.+24     	; 0x2526 <__divsf3x>
    250e:	34 c1       	rjmp	.+616    	; 0x2778 <__fp_round>
    2510:	2c d1       	rcall	.+600    	; 0x276a <__fp_pscB>
    2512:	40 f0       	brcs	.+16     	; 0x2524 <__divsf3+0x18>
    2514:	23 d1       	rcall	.+582    	; 0x275c <__fp_pscA>
    2516:	30 f0       	brcs	.+12     	; 0x2524 <__divsf3+0x18>
    2518:	21 f4       	brne	.+8      	; 0x2522 <__divsf3+0x16>
    251a:	5f 3f       	cpi	r21, 0xFF	; 255
    251c:	19 f0       	breq	.+6      	; 0x2524 <__divsf3+0x18>
    251e:	f0 c0       	rjmp	.+480    	; 0x2700 <__fp_inf>
    2520:	51 11       	cpse	r21, r1
    2522:	5e c1       	rjmp	.+700    	; 0x27e0 <__fp_szero>
    2524:	f3 c0       	rjmp	.+486    	; 0x270c <__fp_nan>

00002526 <__divsf3x>:
    2526:	39 d1       	rcall	.+626    	; 0x279a <__fp_split3>
    2528:	98 f3       	brcs	.-26     	; 0x2510 <__divsf3+0x4>

0000252a <__divsf3_pse>:
    252a:	99 23       	and	r25, r25
    252c:	c9 f3       	breq	.-14     	; 0x2520 <__divsf3+0x14>
    252e:	55 23       	and	r21, r21
    2530:	b1 f3       	breq	.-20     	; 0x251e <__divsf3+0x12>
    2532:	95 1b       	sub	r25, r21
    2534:	55 0b       	sbc	r21, r21
    2536:	bb 27       	eor	r27, r27
    2538:	aa 27       	eor	r26, r26
    253a:	62 17       	cp	r22, r18
    253c:	73 07       	cpc	r23, r19
    253e:	84 07       	cpc	r24, r20
    2540:	38 f0       	brcs	.+14     	; 0x2550 <__divsf3_pse+0x26>
    2542:	9f 5f       	subi	r25, 0xFF	; 255
    2544:	5f 4f       	sbci	r21, 0xFF	; 255
    2546:	22 0f       	add	r18, r18
    2548:	33 1f       	adc	r19, r19
    254a:	44 1f       	adc	r20, r20
    254c:	aa 1f       	adc	r26, r26
    254e:	a9 f3       	breq	.-22     	; 0x253a <__divsf3_pse+0x10>
    2550:	33 d0       	rcall	.+102    	; 0x25b8 <__divsf3_pse+0x8e>
    2552:	0e 2e       	mov	r0, r30
    2554:	3a f0       	brmi	.+14     	; 0x2564 <__divsf3_pse+0x3a>
    2556:	e0 e8       	ldi	r30, 0x80	; 128
    2558:	30 d0       	rcall	.+96     	; 0x25ba <__divsf3_pse+0x90>
    255a:	91 50       	subi	r25, 0x01	; 1
    255c:	50 40       	sbci	r21, 0x00	; 0
    255e:	e6 95       	lsr	r30
    2560:	00 1c       	adc	r0, r0
    2562:	ca f7       	brpl	.-14     	; 0x2556 <__divsf3_pse+0x2c>
    2564:	29 d0       	rcall	.+82     	; 0x25b8 <__divsf3_pse+0x8e>
    2566:	fe 2f       	mov	r31, r30
    2568:	27 d0       	rcall	.+78     	; 0x25b8 <__divsf3_pse+0x8e>
    256a:	66 0f       	add	r22, r22
    256c:	77 1f       	adc	r23, r23
    256e:	88 1f       	adc	r24, r24
    2570:	bb 1f       	adc	r27, r27
    2572:	26 17       	cp	r18, r22
    2574:	37 07       	cpc	r19, r23
    2576:	48 07       	cpc	r20, r24
    2578:	ab 07       	cpc	r26, r27
    257a:	b0 e8       	ldi	r27, 0x80	; 128
    257c:	09 f0       	breq	.+2      	; 0x2580 <__divsf3_pse+0x56>
    257e:	bb 0b       	sbc	r27, r27
    2580:	80 2d       	mov	r24, r0
    2582:	bf 01       	movw	r22, r30
    2584:	ff 27       	eor	r31, r31
    2586:	93 58       	subi	r25, 0x83	; 131
    2588:	5f 4f       	sbci	r21, 0xFF	; 255
    258a:	2a f0       	brmi	.+10     	; 0x2596 <__divsf3_pse+0x6c>
    258c:	9e 3f       	cpi	r25, 0xFE	; 254
    258e:	51 05       	cpc	r21, r1
    2590:	68 f0       	brcs	.+26     	; 0x25ac <__divsf3_pse+0x82>
    2592:	b6 c0       	rjmp	.+364    	; 0x2700 <__fp_inf>
    2594:	25 c1       	rjmp	.+586    	; 0x27e0 <__fp_szero>
    2596:	5f 3f       	cpi	r21, 0xFF	; 255
    2598:	ec f3       	brlt	.-6      	; 0x2594 <__divsf3_pse+0x6a>
    259a:	98 3e       	cpi	r25, 0xE8	; 232
    259c:	dc f3       	brlt	.-10     	; 0x2594 <__divsf3_pse+0x6a>
    259e:	86 95       	lsr	r24
    25a0:	77 95       	ror	r23
    25a2:	67 95       	ror	r22
    25a4:	b7 95       	ror	r27
    25a6:	f7 95       	ror	r31
    25a8:	9f 5f       	subi	r25, 0xFF	; 255
    25aa:	c9 f7       	brne	.-14     	; 0x259e <__divsf3_pse+0x74>
    25ac:	88 0f       	add	r24, r24
    25ae:	91 1d       	adc	r25, r1
    25b0:	96 95       	lsr	r25
    25b2:	87 95       	ror	r24
    25b4:	97 f9       	bld	r25, 7
    25b6:	08 95       	ret
    25b8:	e1 e0       	ldi	r30, 0x01	; 1
    25ba:	66 0f       	add	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	88 1f       	adc	r24, r24
    25c0:	bb 1f       	adc	r27, r27
    25c2:	62 17       	cp	r22, r18
    25c4:	73 07       	cpc	r23, r19
    25c6:	84 07       	cpc	r24, r20
    25c8:	ba 07       	cpc	r27, r26
    25ca:	20 f0       	brcs	.+8      	; 0x25d4 <__divsf3_pse+0xaa>
    25cc:	62 1b       	sub	r22, r18
    25ce:	73 0b       	sbc	r23, r19
    25d0:	84 0b       	sbc	r24, r20
    25d2:	ba 0b       	sbc	r27, r26
    25d4:	ee 1f       	adc	r30, r30
    25d6:	88 f7       	brcc	.-30     	; 0x25ba <__divsf3_pse+0x90>
    25d8:	e0 95       	com	r30
    25da:	08 95       	ret

000025dc <__fixsfsi>:
    25dc:	04 d0       	rcall	.+8      	; 0x25e6 <__fixunssfsi>
    25de:	68 94       	set
    25e0:	b1 11       	cpse	r27, r1
    25e2:	fe c0       	rjmp	.+508    	; 0x27e0 <__fp_szero>
    25e4:	08 95       	ret

000025e6 <__fixunssfsi>:
    25e6:	e1 d0       	rcall	.+450    	; 0x27aa <__fp_splitA>
    25e8:	88 f0       	brcs	.+34     	; 0x260c <__fixunssfsi+0x26>
    25ea:	9f 57       	subi	r25, 0x7F	; 127
    25ec:	90 f0       	brcs	.+36     	; 0x2612 <__fixunssfsi+0x2c>
    25ee:	b9 2f       	mov	r27, r25
    25f0:	99 27       	eor	r25, r25
    25f2:	b7 51       	subi	r27, 0x17	; 23
    25f4:	a0 f0       	brcs	.+40     	; 0x261e <__fixunssfsi+0x38>
    25f6:	d1 f0       	breq	.+52     	; 0x262c <__fixunssfsi+0x46>
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	1a f0       	brmi	.+6      	; 0x2608 <__fixunssfsi+0x22>
    2602:	ba 95       	dec	r27
    2604:	c9 f7       	brne	.-14     	; 0x25f8 <__fixunssfsi+0x12>
    2606:	12 c0       	rjmp	.+36     	; 0x262c <__fixunssfsi+0x46>
    2608:	b1 30       	cpi	r27, 0x01	; 1
    260a:	81 f0       	breq	.+32     	; 0x262c <__fixunssfsi+0x46>
    260c:	e8 d0       	rcall	.+464    	; 0x27de <__fp_zero>
    260e:	b1 e0       	ldi	r27, 0x01	; 1
    2610:	08 95       	ret
    2612:	e5 c0       	rjmp	.+458    	; 0x27de <__fp_zero>
    2614:	67 2f       	mov	r22, r23
    2616:	78 2f       	mov	r23, r24
    2618:	88 27       	eor	r24, r24
    261a:	b8 5f       	subi	r27, 0xF8	; 248
    261c:	39 f0       	breq	.+14     	; 0x262c <__fixunssfsi+0x46>
    261e:	b9 3f       	cpi	r27, 0xF9	; 249
    2620:	cc f3       	brlt	.-14     	; 0x2614 <__fixunssfsi+0x2e>
    2622:	86 95       	lsr	r24
    2624:	77 95       	ror	r23
    2626:	67 95       	ror	r22
    2628:	b3 95       	inc	r27
    262a:	d9 f7       	brne	.-10     	; 0x2622 <__fixunssfsi+0x3c>
    262c:	3e f4       	brtc	.+14     	; 0x263c <__fixunssfsi+0x56>
    262e:	90 95       	com	r25
    2630:	80 95       	com	r24
    2632:	70 95       	com	r23
    2634:	61 95       	neg	r22
    2636:	7f 4f       	sbci	r23, 0xFF	; 255
    2638:	8f 4f       	sbci	r24, 0xFF	; 255
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	08 95       	ret

0000263e <__floatunsisf>:
    263e:	e8 94       	clt
    2640:	09 c0       	rjmp	.+18     	; 0x2654 <__floatsisf+0x12>

00002642 <__floatsisf>:
    2642:	97 fb       	bst	r25, 7
    2644:	3e f4       	brtc	.+14     	; 0x2654 <__floatsisf+0x12>
    2646:	90 95       	com	r25
    2648:	80 95       	com	r24
    264a:	70 95       	com	r23
    264c:	61 95       	neg	r22
    264e:	7f 4f       	sbci	r23, 0xFF	; 255
    2650:	8f 4f       	sbci	r24, 0xFF	; 255
    2652:	9f 4f       	sbci	r25, 0xFF	; 255
    2654:	99 23       	and	r25, r25
    2656:	a9 f0       	breq	.+42     	; 0x2682 <__floatsisf+0x40>
    2658:	f9 2f       	mov	r31, r25
    265a:	96 e9       	ldi	r25, 0x96	; 150
    265c:	bb 27       	eor	r27, r27
    265e:	93 95       	inc	r25
    2660:	f6 95       	lsr	r31
    2662:	87 95       	ror	r24
    2664:	77 95       	ror	r23
    2666:	67 95       	ror	r22
    2668:	b7 95       	ror	r27
    266a:	f1 11       	cpse	r31, r1
    266c:	f8 cf       	rjmp	.-16     	; 0x265e <__floatsisf+0x1c>
    266e:	fa f4       	brpl	.+62     	; 0x26ae <__floatsisf+0x6c>
    2670:	bb 0f       	add	r27, r27
    2672:	11 f4       	brne	.+4      	; 0x2678 <__floatsisf+0x36>
    2674:	60 ff       	sbrs	r22, 0
    2676:	1b c0       	rjmp	.+54     	; 0x26ae <__floatsisf+0x6c>
    2678:	6f 5f       	subi	r22, 0xFF	; 255
    267a:	7f 4f       	sbci	r23, 0xFF	; 255
    267c:	8f 4f       	sbci	r24, 0xFF	; 255
    267e:	9f 4f       	sbci	r25, 0xFF	; 255
    2680:	16 c0       	rjmp	.+44     	; 0x26ae <__floatsisf+0x6c>
    2682:	88 23       	and	r24, r24
    2684:	11 f0       	breq	.+4      	; 0x268a <__floatsisf+0x48>
    2686:	96 e9       	ldi	r25, 0x96	; 150
    2688:	11 c0       	rjmp	.+34     	; 0x26ac <__floatsisf+0x6a>
    268a:	77 23       	and	r23, r23
    268c:	21 f0       	breq	.+8      	; 0x2696 <__floatsisf+0x54>
    268e:	9e e8       	ldi	r25, 0x8E	; 142
    2690:	87 2f       	mov	r24, r23
    2692:	76 2f       	mov	r23, r22
    2694:	05 c0       	rjmp	.+10     	; 0x26a0 <__floatsisf+0x5e>
    2696:	66 23       	and	r22, r22
    2698:	71 f0       	breq	.+28     	; 0x26b6 <__floatsisf+0x74>
    269a:	96 e8       	ldi	r25, 0x86	; 134
    269c:	86 2f       	mov	r24, r22
    269e:	70 e0       	ldi	r23, 0x00	; 0
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	2a f0       	brmi	.+10     	; 0x26ae <__floatsisf+0x6c>
    26a4:	9a 95       	dec	r25
    26a6:	66 0f       	add	r22, r22
    26a8:	77 1f       	adc	r23, r23
    26aa:	88 1f       	adc	r24, r24
    26ac:	da f7       	brpl	.-10     	; 0x26a4 <__floatsisf+0x62>
    26ae:	88 0f       	add	r24, r24
    26b0:	96 95       	lsr	r25
    26b2:	87 95       	ror	r24
    26b4:	97 f9       	bld	r25, 7
    26b6:	08 95       	ret

000026b8 <__fp_cmp>:
    26b8:	99 0f       	add	r25, r25
    26ba:	00 08       	sbc	r0, r0
    26bc:	55 0f       	add	r21, r21
    26be:	aa 0b       	sbc	r26, r26
    26c0:	e0 e8       	ldi	r30, 0x80	; 128
    26c2:	fe ef       	ldi	r31, 0xFE	; 254
    26c4:	16 16       	cp	r1, r22
    26c6:	17 06       	cpc	r1, r23
    26c8:	e8 07       	cpc	r30, r24
    26ca:	f9 07       	cpc	r31, r25
    26cc:	c0 f0       	brcs	.+48     	; 0x26fe <__fp_cmp+0x46>
    26ce:	12 16       	cp	r1, r18
    26d0:	13 06       	cpc	r1, r19
    26d2:	e4 07       	cpc	r30, r20
    26d4:	f5 07       	cpc	r31, r21
    26d6:	98 f0       	brcs	.+38     	; 0x26fe <__fp_cmp+0x46>
    26d8:	62 1b       	sub	r22, r18
    26da:	73 0b       	sbc	r23, r19
    26dc:	84 0b       	sbc	r24, r20
    26de:	95 0b       	sbc	r25, r21
    26e0:	39 f4       	brne	.+14     	; 0x26f0 <__fp_cmp+0x38>
    26e2:	0a 26       	eor	r0, r26
    26e4:	61 f0       	breq	.+24     	; 0x26fe <__fp_cmp+0x46>
    26e6:	23 2b       	or	r18, r19
    26e8:	24 2b       	or	r18, r20
    26ea:	25 2b       	or	r18, r21
    26ec:	21 f4       	brne	.+8      	; 0x26f6 <__fp_cmp+0x3e>
    26ee:	08 95       	ret
    26f0:	0a 26       	eor	r0, r26
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <__fp_cmp+0x3e>
    26f4:	a1 40       	sbci	r26, 0x01	; 1
    26f6:	a6 95       	lsr	r26
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	81 1d       	adc	r24, r1
    26fc:	81 1d       	adc	r24, r1
    26fe:	08 95       	ret

00002700 <__fp_inf>:
    2700:	97 f9       	bld	r25, 7
    2702:	9f 67       	ori	r25, 0x7F	; 127
    2704:	80 e8       	ldi	r24, 0x80	; 128
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	08 95       	ret

0000270c <__fp_nan>:
    270c:	9f ef       	ldi	r25, 0xFF	; 255
    270e:	80 ec       	ldi	r24, 0xC0	; 192
    2710:	08 95       	ret

00002712 <__fp_powser>:
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	1f 93       	push	r17
    2718:	0f 93       	push	r16
    271a:	ff 92       	push	r15
    271c:	ef 92       	push	r14
    271e:	df 92       	push	r13
    2720:	7b 01       	movw	r14, r22
    2722:	8c 01       	movw	r16, r24
    2724:	68 94       	set
    2726:	05 c0       	rjmp	.+10     	; 0x2732 <__fp_powser+0x20>
    2728:	da 2e       	mov	r13, r26
    272a:	ef 01       	movw	r28, r30
    272c:	bb d0       	rcall	.+374    	; 0x28a4 <__mulsf3x>
    272e:	fe 01       	movw	r30, r28
    2730:	e8 94       	clt
    2732:	a5 91       	lpm	r26, Z+
    2734:	25 91       	lpm	r18, Z+
    2736:	35 91       	lpm	r19, Z+
    2738:	45 91       	lpm	r20, Z+
    273a:	55 91       	lpm	r21, Z+
    273c:	ae f3       	brts	.-22     	; 0x2728 <__fp_powser+0x16>
    273e:	ef 01       	movw	r28, r30
    2740:	2c de       	rcall	.-936    	; 0x239a <__addsf3x>
    2742:	fe 01       	movw	r30, r28
    2744:	97 01       	movw	r18, r14
    2746:	a8 01       	movw	r20, r16
    2748:	da 94       	dec	r13
    274a:	79 f7       	brne	.-34     	; 0x272a <__fp_powser+0x18>
    274c:	df 90       	pop	r13
    274e:	ef 90       	pop	r14
    2750:	ff 90       	pop	r15
    2752:	0f 91       	pop	r16
    2754:	1f 91       	pop	r17
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <__fp_pscA>:
    275c:	00 24       	eor	r0, r0
    275e:	0a 94       	dec	r0
    2760:	16 16       	cp	r1, r22
    2762:	17 06       	cpc	r1, r23
    2764:	18 06       	cpc	r1, r24
    2766:	09 06       	cpc	r0, r25
    2768:	08 95       	ret

0000276a <__fp_pscB>:
    276a:	00 24       	eor	r0, r0
    276c:	0a 94       	dec	r0
    276e:	12 16       	cp	r1, r18
    2770:	13 06       	cpc	r1, r19
    2772:	14 06       	cpc	r1, r20
    2774:	05 06       	cpc	r0, r21
    2776:	08 95       	ret

00002778 <__fp_round>:
    2778:	09 2e       	mov	r0, r25
    277a:	03 94       	inc	r0
    277c:	00 0c       	add	r0, r0
    277e:	11 f4       	brne	.+4      	; 0x2784 <__fp_round+0xc>
    2780:	88 23       	and	r24, r24
    2782:	52 f0       	brmi	.+20     	; 0x2798 <__fp_round+0x20>
    2784:	bb 0f       	add	r27, r27
    2786:	40 f4       	brcc	.+16     	; 0x2798 <__fp_round+0x20>
    2788:	bf 2b       	or	r27, r31
    278a:	11 f4       	brne	.+4      	; 0x2790 <__fp_round+0x18>
    278c:	60 ff       	sbrs	r22, 0
    278e:	04 c0       	rjmp	.+8      	; 0x2798 <__fp_round+0x20>
    2790:	6f 5f       	subi	r22, 0xFF	; 255
    2792:	7f 4f       	sbci	r23, 0xFF	; 255
    2794:	8f 4f       	sbci	r24, 0xFF	; 255
    2796:	9f 4f       	sbci	r25, 0xFF	; 255
    2798:	08 95       	ret

0000279a <__fp_split3>:
    279a:	57 fd       	sbrc	r21, 7
    279c:	90 58       	subi	r25, 0x80	; 128
    279e:	44 0f       	add	r20, r20
    27a0:	55 1f       	adc	r21, r21
    27a2:	59 f0       	breq	.+22     	; 0x27ba <__fp_splitA+0x10>
    27a4:	5f 3f       	cpi	r21, 0xFF	; 255
    27a6:	71 f0       	breq	.+28     	; 0x27c4 <__fp_splitA+0x1a>
    27a8:	47 95       	ror	r20

000027aa <__fp_splitA>:
    27aa:	88 0f       	add	r24, r24
    27ac:	97 fb       	bst	r25, 7
    27ae:	99 1f       	adc	r25, r25
    27b0:	61 f0       	breq	.+24     	; 0x27ca <__fp_splitA+0x20>
    27b2:	9f 3f       	cpi	r25, 0xFF	; 255
    27b4:	79 f0       	breq	.+30     	; 0x27d4 <__fp_splitA+0x2a>
    27b6:	87 95       	ror	r24
    27b8:	08 95       	ret
    27ba:	12 16       	cp	r1, r18
    27bc:	13 06       	cpc	r1, r19
    27be:	14 06       	cpc	r1, r20
    27c0:	55 1f       	adc	r21, r21
    27c2:	f2 cf       	rjmp	.-28     	; 0x27a8 <__fp_split3+0xe>
    27c4:	46 95       	lsr	r20
    27c6:	f1 df       	rcall	.-30     	; 0x27aa <__fp_splitA>
    27c8:	08 c0       	rjmp	.+16     	; 0x27da <__fp_splitA+0x30>
    27ca:	16 16       	cp	r1, r22
    27cc:	17 06       	cpc	r1, r23
    27ce:	18 06       	cpc	r1, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	f1 cf       	rjmp	.-30     	; 0x27b6 <__fp_splitA+0xc>
    27d4:	86 95       	lsr	r24
    27d6:	71 05       	cpc	r23, r1
    27d8:	61 05       	cpc	r22, r1
    27da:	08 94       	sec
    27dc:	08 95       	ret

000027de <__fp_zero>:
    27de:	e8 94       	clt

000027e0 <__fp_szero>:
    27e0:	bb 27       	eor	r27, r27
    27e2:	66 27       	eor	r22, r22
    27e4:	77 27       	eor	r23, r23
    27e6:	cb 01       	movw	r24, r22
    27e8:	97 f9       	bld	r25, 7
    27ea:	08 95       	ret

000027ec <__gesf2>:
    27ec:	65 df       	rcall	.-310    	; 0x26b8 <__fp_cmp>
    27ee:	08 f4       	brcc	.+2      	; 0x27f2 <__gesf2+0x6>
    27f0:	8f ef       	ldi	r24, 0xFF	; 255
    27f2:	08 95       	ret

000027f4 <inverse>:
    27f4:	9b 01       	movw	r18, r22
    27f6:	ac 01       	movw	r20, r24
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	80 e8       	ldi	r24, 0x80	; 128
    27fe:	9f e3       	ldi	r25, 0x3F	; 63
    2800:	85 ce       	rjmp	.-758    	; 0x250c <__divsf3>
    2802:	0e f0       	brts	.+2      	; 0x2806 <inverse+0x12>
    2804:	a9 c0       	rjmp	.+338    	; 0x2958 <__fp_mpack>
    2806:	82 cf       	rjmp	.-252    	; 0x270c <__fp_nan>
    2808:	68 94       	set
    280a:	7a cf       	rjmp	.-268    	; 0x2700 <__fp_inf>

0000280c <log>:
    280c:	ce df       	rcall	.-100    	; 0x27aa <__fp_splitA>
    280e:	c8 f3       	brcs	.-14     	; 0x2802 <inverse+0xe>
    2810:	99 23       	and	r25, r25
    2812:	d1 f3       	breq	.-12     	; 0x2808 <inverse+0x14>
    2814:	c6 f3       	brts	.-16     	; 0x2806 <inverse+0x12>
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	1f 93       	push	r17
    281c:	0f 93       	push	r16
    281e:	ff 92       	push	r15
    2820:	c9 2f       	mov	r28, r25
    2822:	dd 27       	eor	r29, r29
    2824:	88 23       	and	r24, r24
    2826:	2a f0       	brmi	.+10     	; 0x2832 <log+0x26>
    2828:	21 97       	sbiw	r28, 0x01	; 1
    282a:	66 0f       	add	r22, r22
    282c:	77 1f       	adc	r23, r23
    282e:	88 1f       	adc	r24, r24
    2830:	da f7       	brpl	.-10     	; 0x2828 <log+0x1c>
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e8       	ldi	r20, 0x80	; 128
    2838:	5f eb       	ldi	r21, 0xBF	; 191
    283a:	9f e3       	ldi	r25, 0x3F	; 63
    283c:	88 39       	cpi	r24, 0x98	; 152
    283e:	20 f0       	brcs	.+8      	; 0x2848 <log+0x3c>
    2840:	80 3e       	cpi	r24, 0xE0	; 224
    2842:	30 f0       	brcs	.+12     	; 0x2850 <log+0x44>
    2844:	21 96       	adiw	r28, 0x01	; 1
    2846:	8f 77       	andi	r24, 0x7F	; 127
    2848:	97 dd       	rcall	.-1234   	; 0x2378 <__addsf3>
    284a:	e9 ed       	ldi	r30, 0xD9	; 217
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	03 c0       	rjmp	.+6      	; 0x2856 <log+0x4a>
    2850:	93 dd       	rcall	.-1242   	; 0x2378 <__addsf3>
    2852:	e6 e0       	ldi	r30, 0x06	; 6
    2854:	f1 e0       	ldi	r31, 0x01	; 1
    2856:	5d df       	rcall	.-326    	; 0x2712 <__fp_powser>
    2858:	8b 01       	movw	r16, r22
    285a:	be 01       	movw	r22, r28
    285c:	ec 01       	movw	r28, r24
    285e:	fb 2e       	mov	r15, r27
    2860:	6f 57       	subi	r22, 0x7F	; 127
    2862:	71 09       	sbc	r23, r1
    2864:	75 95       	asr	r23
    2866:	77 1f       	adc	r23, r23
    2868:	88 0b       	sbc	r24, r24
    286a:	99 0b       	sbc	r25, r25
    286c:	ea de       	rcall	.-556    	; 0x2642 <__floatsisf>
    286e:	28 e1       	ldi	r18, 0x18	; 24
    2870:	32 e7       	ldi	r19, 0x72	; 114
    2872:	41 e3       	ldi	r20, 0x31	; 49
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	16 d0       	rcall	.+44     	; 0x28a4 <__mulsf3x>
    2878:	af 2d       	mov	r26, r15
    287a:	98 01       	movw	r18, r16
    287c:	ae 01       	movw	r20, r28
    287e:	ff 90       	pop	r15
    2880:	0f 91       	pop	r16
    2882:	1f 91       	pop	r17
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	88 dd       	rcall	.-1264   	; 0x239a <__addsf3x>
    288a:	76 cf       	rjmp	.-276    	; 0x2778 <__fp_round>

0000288c <__mulsf3>:
    288c:	0b d0       	rcall	.+22     	; 0x28a4 <__mulsf3x>
    288e:	74 cf       	rjmp	.-280    	; 0x2778 <__fp_round>
    2890:	65 df       	rcall	.-310    	; 0x275c <__fp_pscA>
    2892:	28 f0       	brcs	.+10     	; 0x289e <__mulsf3+0x12>
    2894:	6a df       	rcall	.-300    	; 0x276a <__fp_pscB>
    2896:	18 f0       	brcs	.+6      	; 0x289e <__mulsf3+0x12>
    2898:	95 23       	and	r25, r21
    289a:	09 f0       	breq	.+2      	; 0x289e <__mulsf3+0x12>
    289c:	31 cf       	rjmp	.-414    	; 0x2700 <__fp_inf>
    289e:	36 cf       	rjmp	.-404    	; 0x270c <__fp_nan>
    28a0:	11 24       	eor	r1, r1
    28a2:	9e cf       	rjmp	.-196    	; 0x27e0 <__fp_szero>

000028a4 <__mulsf3x>:
    28a4:	7a df       	rcall	.-268    	; 0x279a <__fp_split3>
    28a6:	a0 f3       	brcs	.-24     	; 0x2890 <__mulsf3+0x4>

000028a8 <__mulsf3_pse>:
    28a8:	95 9f       	mul	r25, r21
    28aa:	d1 f3       	breq	.-12     	; 0x28a0 <__mulsf3+0x14>
    28ac:	95 0f       	add	r25, r21
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	55 1f       	adc	r21, r21
    28b2:	62 9f       	mul	r22, r18
    28b4:	f0 01       	movw	r30, r0
    28b6:	72 9f       	mul	r23, r18
    28b8:	bb 27       	eor	r27, r27
    28ba:	f0 0d       	add	r31, r0
    28bc:	b1 1d       	adc	r27, r1
    28be:	63 9f       	mul	r22, r19
    28c0:	aa 27       	eor	r26, r26
    28c2:	f0 0d       	add	r31, r0
    28c4:	b1 1d       	adc	r27, r1
    28c6:	aa 1f       	adc	r26, r26
    28c8:	64 9f       	mul	r22, r20
    28ca:	66 27       	eor	r22, r22
    28cc:	b0 0d       	add	r27, r0
    28ce:	a1 1d       	adc	r26, r1
    28d0:	66 1f       	adc	r22, r22
    28d2:	82 9f       	mul	r24, r18
    28d4:	22 27       	eor	r18, r18
    28d6:	b0 0d       	add	r27, r0
    28d8:	a1 1d       	adc	r26, r1
    28da:	62 1f       	adc	r22, r18
    28dc:	73 9f       	mul	r23, r19
    28de:	b0 0d       	add	r27, r0
    28e0:	a1 1d       	adc	r26, r1
    28e2:	62 1f       	adc	r22, r18
    28e4:	83 9f       	mul	r24, r19
    28e6:	a0 0d       	add	r26, r0
    28e8:	61 1d       	adc	r22, r1
    28ea:	22 1f       	adc	r18, r18
    28ec:	74 9f       	mul	r23, r20
    28ee:	33 27       	eor	r19, r19
    28f0:	a0 0d       	add	r26, r0
    28f2:	61 1d       	adc	r22, r1
    28f4:	23 1f       	adc	r18, r19
    28f6:	84 9f       	mul	r24, r20
    28f8:	60 0d       	add	r22, r0
    28fa:	21 1d       	adc	r18, r1
    28fc:	82 2f       	mov	r24, r18
    28fe:	76 2f       	mov	r23, r22
    2900:	6a 2f       	mov	r22, r26
    2902:	11 24       	eor	r1, r1
    2904:	9f 57       	subi	r25, 0x7F	; 127
    2906:	50 40       	sbci	r21, 0x00	; 0
    2908:	8a f0       	brmi	.+34     	; 0x292c <__mulsf3_pse+0x84>
    290a:	e1 f0       	breq	.+56     	; 0x2944 <__mulsf3_pse+0x9c>
    290c:	88 23       	and	r24, r24
    290e:	4a f0       	brmi	.+18     	; 0x2922 <__mulsf3_pse+0x7a>
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	bb 1f       	adc	r27, r27
    2916:	66 1f       	adc	r22, r22
    2918:	77 1f       	adc	r23, r23
    291a:	88 1f       	adc	r24, r24
    291c:	91 50       	subi	r25, 0x01	; 1
    291e:	50 40       	sbci	r21, 0x00	; 0
    2920:	a9 f7       	brne	.-22     	; 0x290c <__mulsf3_pse+0x64>
    2922:	9e 3f       	cpi	r25, 0xFE	; 254
    2924:	51 05       	cpc	r21, r1
    2926:	70 f0       	brcs	.+28     	; 0x2944 <__mulsf3_pse+0x9c>
    2928:	eb ce       	rjmp	.-554    	; 0x2700 <__fp_inf>
    292a:	5a cf       	rjmp	.-332    	; 0x27e0 <__fp_szero>
    292c:	5f 3f       	cpi	r21, 0xFF	; 255
    292e:	ec f3       	brlt	.-6      	; 0x292a <__mulsf3_pse+0x82>
    2930:	98 3e       	cpi	r25, 0xE8	; 232
    2932:	dc f3       	brlt	.-10     	; 0x292a <__mulsf3_pse+0x82>
    2934:	86 95       	lsr	r24
    2936:	77 95       	ror	r23
    2938:	67 95       	ror	r22
    293a:	b7 95       	ror	r27
    293c:	f7 95       	ror	r31
    293e:	e7 95       	ror	r30
    2940:	9f 5f       	subi	r25, 0xFF	; 255
    2942:	c1 f7       	brne	.-16     	; 0x2934 <__mulsf3_pse+0x8c>
    2944:	fe 2b       	or	r31, r30
    2946:	88 0f       	add	r24, r24
    2948:	91 1d       	adc	r25, r1
    294a:	96 95       	lsr	r25
    294c:	87 95       	ror	r24
    294e:	97 f9       	bld	r25, 7
    2950:	08 95       	ret

00002952 <square>:
    2952:	9b 01       	movw	r18, r22
    2954:	ac 01       	movw	r20, r24
    2956:	9a cf       	rjmp	.-204    	; 0x288c <__mulsf3>

00002958 <__fp_mpack>:
    2958:	9f 3f       	cpi	r25, 0xFF	; 255
    295a:	31 f0       	breq	.+12     	; 0x2968 <__fp_mpack_finite+0xc>

0000295c <__fp_mpack_finite>:
    295c:	91 50       	subi	r25, 0x01	; 1
    295e:	20 f4       	brcc	.+8      	; 0x2968 <__fp_mpack_finite+0xc>
    2960:	87 95       	ror	r24
    2962:	77 95       	ror	r23
    2964:	67 95       	ror	r22
    2966:	b7 95       	ror	r27
    2968:	88 0f       	add	r24, r24
    296a:	91 1d       	adc	r25, r1
    296c:	96 95       	lsr	r25
    296e:	87 95       	ror	r24
    2970:	97 f9       	bld	r25, 7
    2972:	08 95       	ret

00002974 <__divmodsi4>:
    2974:	97 fb       	bst	r25, 7
    2976:	09 2e       	mov	r0, r25
    2978:	05 26       	eor	r0, r21
    297a:	0e d0       	rcall	.+28     	; 0x2998 <__divmodsi4_neg1>
    297c:	57 fd       	sbrc	r21, 7
    297e:	04 d0       	rcall	.+8      	; 0x2988 <__divmodsi4_neg2>
    2980:	4b d0       	rcall	.+150    	; 0x2a18 <__udivmodsi4>
    2982:	0a d0       	rcall	.+20     	; 0x2998 <__divmodsi4_neg1>
    2984:	00 1c       	adc	r0, r0
    2986:	38 f4       	brcc	.+14     	; 0x2996 <__divmodsi4_exit>

00002988 <__divmodsi4_neg2>:
    2988:	50 95       	com	r21
    298a:	40 95       	com	r20
    298c:	30 95       	com	r19
    298e:	21 95       	neg	r18
    2990:	3f 4f       	sbci	r19, 0xFF	; 255
    2992:	4f 4f       	sbci	r20, 0xFF	; 255
    2994:	5f 4f       	sbci	r21, 0xFF	; 255

00002996 <__divmodsi4_exit>:
    2996:	08 95       	ret

00002998 <__divmodsi4_neg1>:
    2998:	f6 f7       	brtc	.-4      	; 0x2996 <__divmodsi4_exit>
    299a:	90 95       	com	r25
    299c:	80 95       	com	r24
    299e:	70 95       	com	r23
    29a0:	61 95       	neg	r22
    29a2:	7f 4f       	sbci	r23, 0xFF	; 255
    29a4:	8f 4f       	sbci	r24, 0xFF	; 255
    29a6:	9f 4f       	sbci	r25, 0xFF	; 255
    29a8:	08 95       	ret

000029aa <__prologue_saves__>:
    29aa:	2f 92       	push	r2
    29ac:	3f 92       	push	r3
    29ae:	4f 92       	push	r4
    29b0:	5f 92       	push	r5
    29b2:	6f 92       	push	r6
    29b4:	7f 92       	push	r7
    29b6:	8f 92       	push	r8
    29b8:	9f 92       	push	r9
    29ba:	af 92       	push	r10
    29bc:	bf 92       	push	r11
    29be:	cf 92       	push	r12
    29c0:	df 92       	push	r13
    29c2:	ef 92       	push	r14
    29c4:	ff 92       	push	r15
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	ca 1b       	sub	r28, r26
    29d4:	db 0b       	sbc	r29, r27
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	de bf       	out	0x3e, r29	; 62
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	09 94       	ijmp

000029e2 <__epilogue_restores__>:
    29e2:	2a 88       	ldd	r2, Y+18	; 0x12
    29e4:	39 88       	ldd	r3, Y+17	; 0x11
    29e6:	48 88       	ldd	r4, Y+16	; 0x10
    29e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    29ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    29f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29f4:	b9 84       	ldd	r11, Y+9	; 0x09
    29f6:	c8 84       	ldd	r12, Y+8	; 0x08
    29f8:	df 80       	ldd	r13, Y+7	; 0x07
    29fa:	ee 80       	ldd	r14, Y+6	; 0x06
    29fc:	fd 80       	ldd	r15, Y+5	; 0x05
    29fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2a00:	1b 81       	ldd	r17, Y+3	; 0x03
    2a02:	aa 81       	ldd	r26, Y+2	; 0x02
    2a04:	b9 81       	ldd	r27, Y+1	; 0x01
    2a06:	ce 0f       	add	r28, r30
    2a08:	d1 1d       	adc	r29, r1
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	ed 01       	movw	r28, r26
    2a16:	08 95       	ret

00002a18 <__udivmodsi4>:
    2a18:	a1 e2       	ldi	r26, 0x21	; 33
    2a1a:	1a 2e       	mov	r1, r26
    2a1c:	aa 1b       	sub	r26, r26
    2a1e:	bb 1b       	sub	r27, r27
    2a20:	fd 01       	movw	r30, r26
    2a22:	0d c0       	rjmp	.+26     	; 0x2a3e <__udivmodsi4_ep>

00002a24 <__udivmodsi4_loop>:
    2a24:	aa 1f       	adc	r26, r26
    2a26:	bb 1f       	adc	r27, r27
    2a28:	ee 1f       	adc	r30, r30
    2a2a:	ff 1f       	adc	r31, r31
    2a2c:	a2 17       	cp	r26, r18
    2a2e:	b3 07       	cpc	r27, r19
    2a30:	e4 07       	cpc	r30, r20
    2a32:	f5 07       	cpc	r31, r21
    2a34:	20 f0       	brcs	.+8      	; 0x2a3e <__udivmodsi4_ep>
    2a36:	a2 1b       	sub	r26, r18
    2a38:	b3 0b       	sbc	r27, r19
    2a3a:	e4 0b       	sbc	r30, r20
    2a3c:	f5 0b       	sbc	r31, r21

00002a3e <__udivmodsi4_ep>:
    2a3e:	66 1f       	adc	r22, r22
    2a40:	77 1f       	adc	r23, r23
    2a42:	88 1f       	adc	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	1a 94       	dec	r1
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <__udivmodsi4_loop>
    2a4a:	60 95       	com	r22
    2a4c:	70 95       	com	r23
    2a4e:	80 95       	com	r24
    2a50:	90 95       	com	r25
    2a52:	9b 01       	movw	r18, r22
    2a54:	ac 01       	movw	r20, r24
    2a56:	bd 01       	movw	r22, r26
    2a58:	cf 01       	movw	r24, r30
    2a5a:	08 95       	ret

00002a5c <__ftoa_engine>:
    2a5c:	28 30       	cpi	r18, 0x08	; 8
    2a5e:	08 f0       	brcs	.+2      	; 0x2a62 <__ftoa_engine+0x6>
    2a60:	27 e0       	ldi	r18, 0x07	; 7
    2a62:	33 27       	eor	r19, r19
    2a64:	da 01       	movw	r26, r20
    2a66:	99 0f       	add	r25, r25
    2a68:	31 1d       	adc	r19, r1
    2a6a:	87 fd       	sbrc	r24, 7
    2a6c:	91 60       	ori	r25, 0x01	; 1
    2a6e:	00 96       	adiw	r24, 0x00	; 0
    2a70:	61 05       	cpc	r22, r1
    2a72:	71 05       	cpc	r23, r1
    2a74:	39 f4       	brne	.+14     	; 0x2a84 <__ftoa_engine+0x28>
    2a76:	32 60       	ori	r19, 0x02	; 2
    2a78:	2e 5f       	subi	r18, 0xFE	; 254
    2a7a:	3d 93       	st	X+, r19
    2a7c:	30 e3       	ldi	r19, 0x30	; 48
    2a7e:	2a 95       	dec	r18
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <__ftoa_engine+0x1e>
    2a82:	08 95       	ret
    2a84:	9f 3f       	cpi	r25, 0xFF	; 255
    2a86:	30 f0       	brcs	.+12     	; 0x2a94 <__ftoa_engine+0x38>
    2a88:	80 38       	cpi	r24, 0x80	; 128
    2a8a:	71 05       	cpc	r23, r1
    2a8c:	61 05       	cpc	r22, r1
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <__ftoa_engine+0x36>
    2a90:	3c 5f       	subi	r19, 0xFC	; 252
    2a92:	3c 5f       	subi	r19, 0xFC	; 252
    2a94:	3d 93       	st	X+, r19
    2a96:	91 30       	cpi	r25, 0x01	; 1
    2a98:	08 f0       	brcs	.+2      	; 0x2a9c <__ftoa_engine+0x40>
    2a9a:	80 68       	ori	r24, 0x80	; 128
    2a9c:	91 1d       	adc	r25, r1
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	1f 93       	push	r17
    2aa4:	0f 93       	push	r16
    2aa6:	ff 92       	push	r15
    2aa8:	ef 92       	push	r14
    2aaa:	19 2f       	mov	r17, r25
    2aac:	98 7f       	andi	r25, 0xF8	; 248
    2aae:	96 95       	lsr	r25
    2ab0:	e9 2f       	mov	r30, r25
    2ab2:	96 95       	lsr	r25
    2ab4:	96 95       	lsr	r25
    2ab6:	e9 0f       	add	r30, r25
    2ab8:	ff 27       	eor	r31, r31
    2aba:	eb 56       	subi	r30, 0x6B	; 107
    2abc:	fe 4f       	sbci	r31, 0xFE	; 254
    2abe:	99 27       	eor	r25, r25
    2ac0:	33 27       	eor	r19, r19
    2ac2:	ee 24       	eor	r14, r14
    2ac4:	ff 24       	eor	r15, r15
    2ac6:	a7 01       	movw	r20, r14
    2ac8:	e7 01       	movw	r28, r14
    2aca:	05 90       	lpm	r0, Z+
    2acc:	08 94       	sec
    2ace:	07 94       	ror	r0
    2ad0:	28 f4       	brcc	.+10     	; 0x2adc <__ftoa_engine+0x80>
    2ad2:	36 0f       	add	r19, r22
    2ad4:	e7 1e       	adc	r14, r23
    2ad6:	f8 1e       	adc	r15, r24
    2ad8:	49 1f       	adc	r20, r25
    2ada:	51 1d       	adc	r21, r1
    2adc:	66 0f       	add	r22, r22
    2ade:	77 1f       	adc	r23, r23
    2ae0:	88 1f       	adc	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	06 94       	lsr	r0
    2ae6:	a1 f7       	brne	.-24     	; 0x2ad0 <__ftoa_engine+0x74>
    2ae8:	05 90       	lpm	r0, Z+
    2aea:	07 94       	ror	r0
    2aec:	28 f4       	brcc	.+10     	; 0x2af8 <__ftoa_engine+0x9c>
    2aee:	e7 0e       	add	r14, r23
    2af0:	f8 1e       	adc	r15, r24
    2af2:	49 1f       	adc	r20, r25
    2af4:	56 1f       	adc	r21, r22
    2af6:	c1 1d       	adc	r28, r1
    2af8:	77 0f       	add	r23, r23
    2afa:	88 1f       	adc	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	66 1f       	adc	r22, r22
    2b00:	06 94       	lsr	r0
    2b02:	a1 f7       	brne	.-24     	; 0x2aec <__ftoa_engine+0x90>
    2b04:	05 90       	lpm	r0, Z+
    2b06:	07 94       	ror	r0
    2b08:	28 f4       	brcc	.+10     	; 0x2b14 <__ftoa_engine+0xb8>
    2b0a:	f8 0e       	add	r15, r24
    2b0c:	49 1f       	adc	r20, r25
    2b0e:	56 1f       	adc	r21, r22
    2b10:	c7 1f       	adc	r28, r23
    2b12:	d1 1d       	adc	r29, r1
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	66 1f       	adc	r22, r22
    2b1a:	77 1f       	adc	r23, r23
    2b1c:	06 94       	lsr	r0
    2b1e:	a1 f7       	brne	.-24     	; 0x2b08 <__ftoa_engine+0xac>
    2b20:	05 90       	lpm	r0, Z+
    2b22:	07 94       	ror	r0
    2b24:	20 f4       	brcc	.+8      	; 0x2b2e <__ftoa_engine+0xd2>
    2b26:	49 0f       	add	r20, r25
    2b28:	56 1f       	adc	r21, r22
    2b2a:	c7 1f       	adc	r28, r23
    2b2c:	d8 1f       	adc	r29, r24
    2b2e:	99 0f       	add	r25, r25
    2b30:	66 1f       	adc	r22, r22
    2b32:	77 1f       	adc	r23, r23
    2b34:	88 1f       	adc	r24, r24
    2b36:	06 94       	lsr	r0
    2b38:	a9 f7       	brne	.-22     	; 0x2b24 <__ftoa_engine+0xc8>
    2b3a:	84 91       	lpm	r24, Z+
    2b3c:	10 95       	com	r17
    2b3e:	17 70       	andi	r17, 0x07	; 7
    2b40:	41 f0       	breq	.+16     	; 0x2b52 <__ftoa_engine+0xf6>
    2b42:	d6 95       	lsr	r29
    2b44:	c7 95       	ror	r28
    2b46:	57 95       	ror	r21
    2b48:	47 95       	ror	r20
    2b4a:	f7 94       	ror	r15
    2b4c:	e7 94       	ror	r14
    2b4e:	1a 95       	dec	r17
    2b50:	c1 f7       	brne	.-16     	; 0x2b42 <__ftoa_engine+0xe6>
    2b52:	eb e3       	ldi	r30, 0x3B	; 59
    2b54:	f1 e0       	ldi	r31, 0x01	; 1
    2b56:	68 94       	set
    2b58:	15 90       	lpm	r1, Z+
    2b5a:	15 91       	lpm	r17, Z+
    2b5c:	35 91       	lpm	r19, Z+
    2b5e:	65 91       	lpm	r22, Z+
    2b60:	95 91       	lpm	r25, Z+
    2b62:	05 90       	lpm	r0, Z+
    2b64:	7f e2       	ldi	r23, 0x2F	; 47
    2b66:	73 95       	inc	r23
    2b68:	e1 18       	sub	r14, r1
    2b6a:	f1 0a       	sbc	r15, r17
    2b6c:	43 0b       	sbc	r20, r19
    2b6e:	56 0b       	sbc	r21, r22
    2b70:	c9 0b       	sbc	r28, r25
    2b72:	d0 09       	sbc	r29, r0
    2b74:	c0 f7       	brcc	.-16     	; 0x2b66 <__ftoa_engine+0x10a>
    2b76:	e1 0c       	add	r14, r1
    2b78:	f1 1e       	adc	r15, r17
    2b7a:	43 1f       	adc	r20, r19
    2b7c:	56 1f       	adc	r21, r22
    2b7e:	c9 1f       	adc	r28, r25
    2b80:	d0 1d       	adc	r29, r0
    2b82:	7e f4       	brtc	.+30     	; 0x2ba2 <__ftoa_engine+0x146>
    2b84:	70 33       	cpi	r23, 0x30	; 48
    2b86:	11 f4       	brne	.+4      	; 0x2b8c <__ftoa_engine+0x130>
    2b88:	8a 95       	dec	r24
    2b8a:	e6 cf       	rjmp	.-52     	; 0x2b58 <__ftoa_engine+0xfc>
    2b8c:	e8 94       	clt
    2b8e:	01 50       	subi	r16, 0x01	; 1
    2b90:	30 f0       	brcs	.+12     	; 0x2b9e <__ftoa_engine+0x142>
    2b92:	08 0f       	add	r16, r24
    2b94:	0a f4       	brpl	.+2      	; 0x2b98 <__ftoa_engine+0x13c>
    2b96:	00 27       	eor	r16, r16
    2b98:	02 17       	cp	r16, r18
    2b9a:	08 f4       	brcc	.+2      	; 0x2b9e <__ftoa_engine+0x142>
    2b9c:	20 2f       	mov	r18, r16
    2b9e:	23 95       	inc	r18
    2ba0:	02 2f       	mov	r16, r18
    2ba2:	7a 33       	cpi	r23, 0x3A	; 58
    2ba4:	28 f0       	brcs	.+10     	; 0x2bb0 <__ftoa_engine+0x154>
    2ba6:	79 e3       	ldi	r23, 0x39	; 57
    2ba8:	7d 93       	st	X+, r23
    2baa:	2a 95       	dec	r18
    2bac:	e9 f7       	brne	.-6      	; 0x2ba8 <__ftoa_engine+0x14c>
    2bae:	10 c0       	rjmp	.+32     	; 0x2bd0 <__ftoa_engine+0x174>
    2bb0:	7d 93       	st	X+, r23
    2bb2:	2a 95       	dec	r18
    2bb4:	89 f6       	brne	.-94     	; 0x2b58 <__ftoa_engine+0xfc>
    2bb6:	06 94       	lsr	r0
    2bb8:	97 95       	ror	r25
    2bba:	67 95       	ror	r22
    2bbc:	37 95       	ror	r19
    2bbe:	17 95       	ror	r17
    2bc0:	17 94       	ror	r1
    2bc2:	e1 18       	sub	r14, r1
    2bc4:	f1 0a       	sbc	r15, r17
    2bc6:	43 0b       	sbc	r20, r19
    2bc8:	56 0b       	sbc	r21, r22
    2bca:	c9 0b       	sbc	r28, r25
    2bcc:	d0 09       	sbc	r29, r0
    2bce:	98 f0       	brcs	.+38     	; 0x2bf6 <__ftoa_engine+0x19a>
    2bd0:	23 95       	inc	r18
    2bd2:	7e 91       	ld	r23, -X
    2bd4:	73 95       	inc	r23
    2bd6:	7a 33       	cpi	r23, 0x3A	; 58
    2bd8:	08 f0       	brcs	.+2      	; 0x2bdc <__ftoa_engine+0x180>
    2bda:	70 e3       	ldi	r23, 0x30	; 48
    2bdc:	7c 93       	st	X, r23
    2bde:	20 13       	cpse	r18, r16
    2be0:	b8 f7       	brcc	.-18     	; 0x2bd0 <__ftoa_engine+0x174>
    2be2:	7e 91       	ld	r23, -X
    2be4:	70 61       	ori	r23, 0x10	; 16
    2be6:	7d 93       	st	X+, r23
    2be8:	30 f0       	brcs	.+12     	; 0x2bf6 <__ftoa_engine+0x19a>
    2bea:	83 95       	inc	r24
    2bec:	71 e3       	ldi	r23, 0x31	; 49
    2bee:	7d 93       	st	X+, r23
    2bf0:	70 e3       	ldi	r23, 0x30	; 48
    2bf2:	2a 95       	dec	r18
    2bf4:	e1 f7       	brne	.-8      	; 0x2bee <__ftoa_engine+0x192>
    2bf6:	11 24       	eor	r1, r1
    2bf8:	ef 90       	pop	r14
    2bfa:	ff 90       	pop	r15
    2bfc:	0f 91       	pop	r16
    2bfe:	1f 91       	pop	r17
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	99 27       	eor	r25, r25
    2c06:	87 fd       	sbrc	r24, 7
    2c08:	90 95       	com	r25
    2c0a:	08 95       	ret

00002c0c <strnlen_P>:
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	05 90       	lpm	r0, Z+
    2c10:	61 50       	subi	r22, 0x01	; 1
    2c12:	70 40       	sbci	r23, 0x00	; 0
    2c14:	01 10       	cpse	r0, r1
    2c16:	d8 f7       	brcc	.-10     	; 0x2c0e <strnlen_P+0x2>
    2c18:	80 95       	com	r24
    2c1a:	90 95       	com	r25
    2c1c:	8e 0f       	add	r24, r30
    2c1e:	9f 1f       	adc	r25, r31
    2c20:	08 95       	ret

00002c22 <strnlen>:
    2c22:	fc 01       	movw	r30, r24
    2c24:	61 50       	subi	r22, 0x01	; 1
    2c26:	70 40       	sbci	r23, 0x00	; 0
    2c28:	01 90       	ld	r0, Z+
    2c2a:	01 10       	cpse	r0, r1
    2c2c:	d8 f7       	brcc	.-10     	; 0x2c24 <strnlen+0x2>
    2c2e:	80 95       	com	r24
    2c30:	90 95       	com	r25
    2c32:	8e 0f       	add	r24, r30
    2c34:	9f 1f       	adc	r25, r31
    2c36:	08 95       	ret

00002c38 <fputc>:
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	8c 01       	movw	r16, r24
    2c42:	eb 01       	movw	r28, r22
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	81 ff       	sbrs	r24, 1
    2c48:	1b c0       	rjmp	.+54     	; 0x2c80 <fputc+0x48>
    2c4a:	82 ff       	sbrs	r24, 2
    2c4c:	0d c0       	rjmp	.+26     	; 0x2c68 <fputc+0x30>
    2c4e:	2e 81       	ldd	r18, Y+6	; 0x06
    2c50:	3f 81       	ldd	r19, Y+7	; 0x07
    2c52:	8c 81       	ldd	r24, Y+4	; 0x04
    2c54:	9d 81       	ldd	r25, Y+5	; 0x05
    2c56:	28 17       	cp	r18, r24
    2c58:	39 07       	cpc	r19, r25
    2c5a:	64 f4       	brge	.+24     	; 0x2c74 <fputc+0x3c>
    2c5c:	e8 81       	ld	r30, Y
    2c5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c60:	01 93       	st	Z+, r16
    2c62:	f9 83       	std	Y+1, r31	; 0x01
    2c64:	e8 83       	st	Y, r30
    2c66:	06 c0       	rjmp	.+12     	; 0x2c74 <fputc+0x3c>
    2c68:	e8 85       	ldd	r30, Y+8	; 0x08
    2c6a:	f9 85       	ldd	r31, Y+9	; 0x09
    2c6c:	80 2f       	mov	r24, r16
    2c6e:	09 95       	icall
    2c70:	89 2b       	or	r24, r25
    2c72:	31 f4       	brne	.+12     	; 0x2c80 <fputc+0x48>
    2c74:	8e 81       	ldd	r24, Y+6	; 0x06
    2c76:	9f 81       	ldd	r25, Y+7	; 0x07
    2c78:	01 96       	adiw	r24, 0x01	; 1
    2c7a:	9f 83       	std	Y+7, r25	; 0x07
    2c7c:	8e 83       	std	Y+6, r24	; 0x06
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <fputc+0x4c>
    2c80:	0f ef       	ldi	r16, 0xFF	; 255
    2c82:	1f ef       	ldi	r17, 0xFF	; 255
    2c84:	c8 01       	movw	r24, r16
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	08 95       	ret

00002c90 <sprintf>:
    2c90:	ae e0       	ldi	r26, 0x0E	; 14
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	ee e4       	ldi	r30, 0x4E	; 78
    2c96:	f6 e1       	ldi	r31, 0x16	; 22
    2c98:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__prologue_saves__+0x1c>
    2c9c:	0d 89       	ldd	r16, Y+21	; 0x15
    2c9e:	1e 89       	ldd	r17, Y+22	; 0x16
    2ca0:	86 e0       	ldi	r24, 0x06	; 6
    2ca2:	8c 83       	std	Y+4, r24	; 0x04
    2ca4:	1a 83       	std	Y+2, r17	; 0x02
    2ca6:	09 83       	std	Y+1, r16	; 0x01
    2ca8:	8f ef       	ldi	r24, 0xFF	; 255
    2caa:	9f e7       	ldi	r25, 0x7F	; 127
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	8d 83       	std	Y+5, r24	; 0x05
    2cb0:	9e 01       	movw	r18, r28
    2cb2:	27 5e       	subi	r18, 0xE7	; 231
    2cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	01 96       	adiw	r24, 0x01	; 1
    2cba:	6f 89       	ldd	r22, Y+23	; 0x17
    2cbc:	78 8d       	ldd	r23, Y+24	; 0x18
    2cbe:	a9 01       	movw	r20, r18
    2cc0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <vfprintf>
    2cc4:	2f 81       	ldd	r18, Y+7	; 0x07
    2cc6:	38 85       	ldd	r19, Y+8	; 0x08
    2cc8:	02 0f       	add	r16, r18
    2cca:	13 1f       	adc	r17, r19
    2ccc:	f8 01       	movw	r30, r16
    2cce:	10 82       	st	Z, r1
    2cd0:	2e 96       	adiw	r28, 0x0e	; 14
    2cd2:	e4 e0       	ldi	r30, 0x04	; 4
    2cd4:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__epilogue_restores__+0x1c>

00002cd8 <__ultoa_invert>:
    2cd8:	fa 01       	movw	r30, r20
    2cda:	aa 27       	eor	r26, r26
    2cdc:	28 30       	cpi	r18, 0x08	; 8
    2cde:	51 f1       	breq	.+84     	; 0x2d34 <__ultoa_invert+0x5c>
    2ce0:	20 31       	cpi	r18, 0x10	; 16
    2ce2:	81 f1       	breq	.+96     	; 0x2d44 <__ultoa_invert+0x6c>
    2ce4:	e8 94       	clt
    2ce6:	6f 93       	push	r22
    2ce8:	6e 7f       	andi	r22, 0xFE	; 254
    2cea:	6e 5f       	subi	r22, 0xFE	; 254
    2cec:	7f 4f       	sbci	r23, 0xFF	; 255
    2cee:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf2:	af 4f       	sbci	r26, 0xFF	; 255
    2cf4:	b1 e0       	ldi	r27, 0x01	; 1
    2cf6:	3e d0       	rcall	.+124    	; 0x2d74 <__ultoa_invert+0x9c>
    2cf8:	b4 e0       	ldi	r27, 0x04	; 4
    2cfa:	3c d0       	rcall	.+120    	; 0x2d74 <__ultoa_invert+0x9c>
    2cfc:	67 0f       	add	r22, r23
    2cfe:	78 1f       	adc	r23, r24
    2d00:	89 1f       	adc	r24, r25
    2d02:	9a 1f       	adc	r25, r26
    2d04:	a1 1d       	adc	r26, r1
    2d06:	68 0f       	add	r22, r24
    2d08:	79 1f       	adc	r23, r25
    2d0a:	8a 1f       	adc	r24, r26
    2d0c:	91 1d       	adc	r25, r1
    2d0e:	a1 1d       	adc	r26, r1
    2d10:	6a 0f       	add	r22, r26
    2d12:	71 1d       	adc	r23, r1
    2d14:	81 1d       	adc	r24, r1
    2d16:	91 1d       	adc	r25, r1
    2d18:	a1 1d       	adc	r26, r1
    2d1a:	20 d0       	rcall	.+64     	; 0x2d5c <__ultoa_invert+0x84>
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <__ultoa_invert+0x48>
    2d1e:	68 94       	set
    2d20:	3f 91       	pop	r19
    2d22:	2a e0       	ldi	r18, 0x0A	; 10
    2d24:	26 9f       	mul	r18, r22
    2d26:	11 24       	eor	r1, r1
    2d28:	30 19       	sub	r19, r0
    2d2a:	30 5d       	subi	r19, 0xD0	; 208
    2d2c:	31 93       	st	Z+, r19
    2d2e:	de f6       	brtc	.-74     	; 0x2ce6 <__ultoa_invert+0xe>
    2d30:	cf 01       	movw	r24, r30
    2d32:	08 95       	ret
    2d34:	46 2f       	mov	r20, r22
    2d36:	47 70       	andi	r20, 0x07	; 7
    2d38:	40 5d       	subi	r20, 0xD0	; 208
    2d3a:	41 93       	st	Z+, r20
    2d3c:	b3 e0       	ldi	r27, 0x03	; 3
    2d3e:	0f d0       	rcall	.+30     	; 0x2d5e <__ultoa_invert+0x86>
    2d40:	c9 f7       	brne	.-14     	; 0x2d34 <__ultoa_invert+0x5c>
    2d42:	f6 cf       	rjmp	.-20     	; 0x2d30 <__ultoa_invert+0x58>
    2d44:	46 2f       	mov	r20, r22
    2d46:	4f 70       	andi	r20, 0x0F	; 15
    2d48:	40 5d       	subi	r20, 0xD0	; 208
    2d4a:	4a 33       	cpi	r20, 0x3A	; 58
    2d4c:	18 f0       	brcs	.+6      	; 0x2d54 <__ultoa_invert+0x7c>
    2d4e:	49 5d       	subi	r20, 0xD9	; 217
    2d50:	31 fd       	sbrc	r19, 1
    2d52:	40 52       	subi	r20, 0x20	; 32
    2d54:	41 93       	st	Z+, r20
    2d56:	02 d0       	rcall	.+4      	; 0x2d5c <__ultoa_invert+0x84>
    2d58:	a9 f7       	brne	.-22     	; 0x2d44 <__ultoa_invert+0x6c>
    2d5a:	ea cf       	rjmp	.-44     	; 0x2d30 <__ultoa_invert+0x58>
    2d5c:	b4 e0       	ldi	r27, 0x04	; 4
    2d5e:	a6 95       	lsr	r26
    2d60:	97 95       	ror	r25
    2d62:	87 95       	ror	r24
    2d64:	77 95       	ror	r23
    2d66:	67 95       	ror	r22
    2d68:	ba 95       	dec	r27
    2d6a:	c9 f7       	brne	.-14     	; 0x2d5e <__ultoa_invert+0x86>
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	61 05       	cpc	r22, r1
    2d70:	71 05       	cpc	r23, r1
    2d72:	08 95       	ret
    2d74:	9b 01       	movw	r18, r22
    2d76:	ac 01       	movw	r20, r24
    2d78:	0a 2e       	mov	r0, r26
    2d7a:	06 94       	lsr	r0
    2d7c:	57 95       	ror	r21
    2d7e:	47 95       	ror	r20
    2d80:	37 95       	ror	r19
    2d82:	27 95       	ror	r18
    2d84:	ba 95       	dec	r27
    2d86:	c9 f7       	brne	.-14     	; 0x2d7a <__ultoa_invert+0xa2>
    2d88:	62 0f       	add	r22, r18
    2d8a:	73 1f       	adc	r23, r19
    2d8c:	84 1f       	adc	r24, r20
    2d8e:	95 1f       	adc	r25, r21
    2d90:	a0 1d       	adc	r26, r0
    2d92:	08 95       	ret

00002d94 <_exit>:
    2d94:	f8 94       	cli

00002d96 <__stop_program>:
    2d96:	ff cf       	rjmp	.-2      	; 0x2d96 <__stop_program>
