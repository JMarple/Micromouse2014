
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000265c  000026f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000265c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800106  00800106  000026f6  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  000026f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000035c  00000000  00000000  000027b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011dc  00000000  00000000  00002b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  00003cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ca0  00000000  00000000  000043bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  0000505c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000509  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000496  00000000  00000000  00005845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
       4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
       8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
       c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      10:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      14:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      18:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      1c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      20:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      24:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      28:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      2c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      30:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      34:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      38:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      3c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      40:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      44:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_17>
      48:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      4c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      50:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      54:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_21>
      58:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      5c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      60:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      64:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      68:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      6c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      70:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      74:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      78:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      7c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      80:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_32>
      84:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      88:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      8c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      90:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      94:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      98:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      9c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      a0:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      a4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      a8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      ac:	08 00       	.word	0x0008	; ????
      ae:	00 00       	nop
      b0:	be 92       	st	-X, r11
      b2:	24 49       	sbci	r18, 0x94	; 148
      b4:	12 3e       	cpi	r17, 0xE2	; 226
      b6:	ab aa       	std	Y+51, r10	; 0x33
      b8:	aa 2a       	or	r10, r26
      ba:	be cd       	rjmp	.-1156   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
      bc:	cc cc       	rjmp	.-1640   	; 0xfffffa56 <__eeprom_end+0xff7efa56>
      be:	4c 3e       	cpi	r20, 0xEC	; 236
      c0:	00 00       	nop
      c2:	00 80       	ld	r0, Z
      c4:	be ab       	std	Y+54, r27	; 0x36
      c6:	aa aa       	std	Y+50, r10	; 0x32
      c8:	aa 3e       	cpi	r26, 0xEA	; 234
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	bf 00       	.word	0x00bf	; ????
      d0:	00 00       	nop
      d2:	80 3f       	cpi	r24, 0xF0	; 240
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	00 08       	sbc	r0, r0
      da:	41 78       	andi	r20, 0x81	; 129
      dc:	d3 bb       	out	0x13, r29	; 19
      de:	43 87       	std	Z+11, r20	; 0x0b
      e0:	d1 13       	cpse	r29, r17
      e2:	3d 19       	sub	r19, r13
      e4:	0e 3c       	cpi	r16, 0xCE	; 206
      e6:	c3 bd       	out	0x23, r28	; 35
      e8:	42 82       	std	Z+2, r4	; 0x02
      ea:	ad 2b       	or	r26, r29
      ec:	3e 68       	ori	r19, 0x8E	; 142
      ee:	ec 82       	std	Y+4, r14	; 0x04
      f0:	76 be       	out	0x36, r7	; 54
      f2:	d9 8f       	std	Y+25, r29	; 0x19
      f4:	e1 a9       	ldd	r30, Z+49	; 0x31
      f6:	3e 4c       	sbci	r19, 0xCE	; 206
      f8:	80 ef       	ldi	r24, 0xF0	; 240
      fa:	ff be       	out	0x3f, r15	; 63
      fc:	01 c4       	rjmp	.+2050   	; 0x900 <moveForward+0xd4>
      fe:	ff 7f       	andi	r31, 0xFF	; 255
     100:	3f 00       	.word	0x003f	; ????
     102:	00 00       	nop
     104:	00 00       	nop

00000106 <__c.1790>:
     106:	6e 61 6e 00                                         nan.

0000010a <__c.1788>:
     10a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     11a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     12a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     13a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     14a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     15a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     16a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     17a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     18a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     19a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1aa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1ba:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ca:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1da:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ea:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1fa:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	da e0       	ldi	r29, 0x0A	; 10
     210:	de bf       	out	0x3e, r29	; 62
     212:	cd bf       	out	0x3d, r28	; 61

00000214 <__do_copy_data>:
     214:	11 e0       	ldi	r17, 0x01	; 1
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	ec e5       	ldi	r30, 0x5C	; 92
     21c:	f6 e2       	ldi	r31, 0x26	; 38
     21e:	02 c0       	rjmp	.+4      	; 0x224 <.do_copy_data_start>

00000220 <.do_copy_data_loop>:
     220:	05 90       	lpm	r0, Z+
     222:	0d 92       	st	X+, r0

00000224 <.do_copy_data_start>:
     224:	a6 30       	cpi	r26, 0x06	; 6
     226:	b1 07       	cpc	r27, r17
     228:	d9 f7       	brne	.-10     	; 0x220 <.do_copy_data_loop>

0000022a <__do_clear_bss>:
     22a:	11 e0       	ldi	r17, 0x01	; 1
     22c:	a6 e0       	ldi	r26, 0x06	; 6
     22e:	b1 e0       	ldi	r27, 0x01	; 1
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	ac 36       	cpi	r26, 0x6C	; 108
     236:	b1 07       	cpc	r27, r17
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>
     23a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
     23e:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <_exit>

00000242 <__bad_interrupt>:
     242:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000246 <startTimer>:
}

void startTimer()
{
	//Refresh Loop Timer1  
	TCCR0A = (1 << WGM01);//Set CTC
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00) | (1 << CS01);//prescalar to
     24a:	93 e0       	ldi	r25, 0x03	; 3
     24c:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;//Compare Ticks 
     24e:	9a ef       	ldi	r25, 0xFA	; 250
     250:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);//Enable Timer Interrupts
     252:	80 93 6e 00 	sts	0x006E, r24
	
	milliseconds = 0;
     256:	10 92 06 01 	sts	0x0106, r1
     25a:	10 92 07 01 	sts	0x0107, r1
     25e:	10 92 08 01 	sts	0x0108, r1
     262:	10 92 09 01 	sts	0x0109, r1
}
     266:	08 95       	ret

00000268 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
     272:	8f 93       	push	r24
     274:	9f 93       	push	r25
     276:	af 93       	push	r26
     278:	bf 93       	push	r27
	milliseconds++;	
     27a:	80 91 06 01 	lds	r24, 0x0106
     27e:	90 91 07 01 	lds	r25, 0x0107
     282:	a0 91 08 01 	lds	r26, 0x0108
     286:	b0 91 09 01 	lds	r27, 0x0109
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	a1 1d       	adc	r26, r1
     28e:	b1 1d       	adc	r27, r1
     290:	80 93 06 01 	sts	0x0106, r24
     294:	90 93 07 01 	sts	0x0107, r25
     298:	a0 93 08 01 	sts	0x0108, r26
     29c:	b0 93 09 01 	sts	0x0109, r27
}
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	0f 90       	pop	r0
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	0f 90       	pop	r0
     2ae:	1f 90       	pop	r1
     2b0:	18 95       	reti

000002b2 <main>:
extern volatile Mouse mouse;
void startTimer(void);

int main(void)
{
	setupADC();	
     2b2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <setupADC>
	setupStepperMotor();
     2b6:	0e 94 8e 08 	call	0x111c	; 0x111c <setupStepperMotor>
}

void startTimer()
{
	//Refresh Loop Timer1  
	TCCR0A = (1 << WGM01);//Set CTC
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00) | (1 << CS01);//prescalar to
     2be:	83 e0       	ldi	r24, 0x03	; 3
     2c0:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;//Compare Ticks 
     2c2:	8a ef       	ldi	r24, 0xFA	; 250
     2c4:	87 bd       	out	0x27, r24	; 39
    TIMSK0 = (1 << OCIE0A);//Enable Timer Interrupts
     2c6:	90 93 6e 00 	sts	0x006E, r25
	
	milliseconds = 0;
     2ca:	10 92 06 01 	sts	0x0106, r1
     2ce:	10 92 07 01 	sts	0x0107, r1
     2d2:	10 92 08 01 	sts	0x0108, r1
     2d6:	10 92 09 01 	sts	0x0109, r1
{
	setupADC();	
	setupStepperMotor();
	startTimer();

	USART_init();
     2da:	0e 94 75 0a 	call	0x14ea	; 0x14ea <USART_init>
	
	mouse.velocity = 0;
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	80 93 4c 01 	sts	0x014C, r24
     2ea:	90 93 4d 01 	sts	0x014D, r25
     2ee:	a0 93 4e 01 	sts	0x014E, r26
     2f2:	b0 93 4f 01 	sts	0x014F, r27
	mouse.maxVelocity = 5000;
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e4       	ldi	r25, 0x40	; 64
     2fa:	ac e9       	ldi	r26, 0x9C	; 156
     2fc:	b5 e4       	ldi	r27, 0x45	; 69
     2fe:	80 93 48 01 	sts	0x0148, r24
     302:	90 93 49 01 	sts	0x0149, r25
     306:	a0 93 4a 01 	sts	0x014A, r26
     30a:	b0 93 4b 01 	sts	0x014B, r27
	mouse.acceleration = 2000;
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	aa ef       	ldi	r26, 0xFA	; 250
     314:	b4 e4       	ldi	r27, 0x44	; 68
     316:	80 93 40 01 	sts	0x0140, r24
     31a:	90 93 41 01 	sts	0x0141, r25
     31e:	a0 93 42 01 	sts	0x0142, r26
     322:	b0 93 43 01 	sts	0x0143, r27
	mouse.deceleration = 10000;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e4       	ldi	r25, 0x40	; 64
     32a:	ac e1       	ldi	r26, 0x1C	; 28
     32c:	b6 e4       	ldi	r27, 0x46	; 70
     32e:	80 93 44 01 	sts	0x0144, r24
     332:	90 93 45 01 	sts	0x0145, r25
     336:	a0 93 46 01 	sts	0x0146, r26
     33a:	b0 93 47 01 	sts	0x0147, r27

	enableDrive(1);
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 b1 08 	call	0x1162	; 0x1162 <enableDrive>
	turnOnTimers(1,1);
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	0e 94 97 09 	call	0x132e	; 0x132e <turnOnTimers>
		mouse.IR_CORRECT = 0;
		
		
	}*/

	turnOnTimers(0, 0);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	0e 94 97 09 	call	0x132e	; 0x132e <turnOnTimers>
	enableDrive(0);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 b1 08 	call	0x1162	; 0x1162 <enableDrive>
		//if(but)
		//	turnOnLeds(num);
		//else
		//	turnOnLeds(0);
		
		printlnNum(getPotSensorValue(7));
     366:	87 e0       	ldi	r24, 0x07	; 7
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 02 0a 	call	0x1404	; 0x1404 <getPotSensorValue>
     36e:	aa 27       	eor	r26, r26
     370:	97 fd       	sbrc	r25, 7
     372:	a0 95       	com	r26
     374:	ba 2f       	mov	r27, r26
     376:	bc 01       	movw	r22, r24
     378:	cd 01       	movw	r24, r26
     37a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     37e:	0e 94 cf 0a 	call	0x159e	; 0x159e <printlnNum>
     382:	f1 cf       	rjmp	.-30     	; 0x366 <main+0xb4>

00000384 <rotateRight>:
	//Move Mouse
	straight(307, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void rotateRight()
{
     384:	2f 92       	push	r2
     386:	3f 92       	push	r3
     388:	4f 92       	push	r4
     38a:	5f 92       	push	r5
     38c:	6f 92       	push	r6
     38e:	7f 92       	push	r7
     390:	8f 92       	push	r8
     392:	9f 92       	push	r9
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
	//Rotate Right
	setDirection(1, 0);
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setDirection>
	
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     3b0:	60 91 48 01 	lds	r22, 0x0148
     3b4:	70 91 49 01 	lds	r23, 0x0149
     3b8:	80 91 4a 01 	lds	r24, 0x014A
     3bc:	90 91 4b 01 	lds	r25, 0x014B
     3c0:	e0 e4       	ldi	r30, 0x40	; 64
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	e1 90       	ld	r14, Z+
     3c6:	f1 90       	ld	r15, Z+
     3c8:	01 91       	ld	r16, Z+
     3ca:	11 91       	ld	r17, Z+
     3cc:	a0 80       	ld	r10, Z
     3ce:	b1 80       	ldd	r11, Z+1	; 0x01
     3d0:	c2 80       	ldd	r12, Z+2	; 0x02
     3d2:	d3 80       	ldd	r13, Z+3	; 0x03
     3d4:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     3d8:	1b 01       	movw	r2, r22
     3da:	2c 01       	movw	r4, r24
     3dc:	c8 01       	movw	r24, r16
     3de:	b7 01       	movw	r22, r14
     3e0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     3e4:	3b 01       	movw	r6, r22
     3e6:	4c 01       	movw	r8, r24
     3e8:	c6 01       	movw	r24, r12
     3ea:	b5 01       	movw	r22, r10
     3ec:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     3f0:	5b 01       	movw	r10, r22
     3f2:	6c 01       	movw	r12, r24
     3f4:	60 e4       	ldi	r22, 0x40	; 64
     3f6:	71 e0       	ldi	r23, 0x01	; 1
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	91 01       	movw	r18, r2
     402:	00 e0       	ldi	r16, 0x00	; 0
     404:	10 e0       	ldi	r17, 0x00	; 0
     406:	73 01       	movw	r14, r6
     408:	65 01       	movw	r12, r10
     40a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <straight>
}
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	3f 90       	pop	r3
     42c:	2f 90       	pop	r2
     42e:	08 95       	ret

00000430 <rotateLeft>:
	setDirection(0, 0);
	straight(130, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void rotateLeft()
{
     430:	2f 92       	push	r2
     432:	3f 92       	push	r3
     434:	4f 92       	push	r4
     436:	5f 92       	push	r5
     438:	6f 92       	push	r6
     43a:	7f 92       	push	r7
     43c:	8f 92       	push	r8
     43e:	9f 92       	push	r9
     440:	af 92       	push	r10
     442:	bf 92       	push	r11
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
	//Rotate Left
	setDirection(0, 1);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setDirection>
	
	//Move Mouse
	straight(307, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     45c:	60 91 48 01 	lds	r22, 0x0148
     460:	70 91 49 01 	lds	r23, 0x0149
     464:	80 91 4a 01 	lds	r24, 0x014A
     468:	90 91 4b 01 	lds	r25, 0x014B
     46c:	e0 e4       	ldi	r30, 0x40	; 64
     46e:	f1 e0       	ldi	r31, 0x01	; 1
     470:	e1 90       	ld	r14, Z+
     472:	f1 90       	ld	r15, Z+
     474:	01 91       	ld	r16, Z+
     476:	11 91       	ld	r17, Z+
     478:	a0 80       	ld	r10, Z
     47a:	b1 80       	ldd	r11, Z+1	; 0x01
     47c:	c2 80       	ldd	r12, Z+2	; 0x02
     47e:	d3 80       	ldd	r13, Z+3	; 0x03
     480:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     484:	1b 01       	movw	r2, r22
     486:	2c 01       	movw	r4, r24
     488:	c8 01       	movw	r24, r16
     48a:	b7 01       	movw	r22, r14
     48c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     490:	3b 01       	movw	r6, r22
     492:	4c 01       	movw	r8, r24
     494:	c6 01       	movw	r24, r12
     496:	b5 01       	movw	r22, r10
     498:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     49c:	5b 01       	movw	r10, r22
     49e:	6c 01       	movw	r12, r24
     4a0:	63 e3       	ldi	r22, 0x33	; 51
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	91 01       	movw	r18, r2
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	10 e0       	ldi	r17, 0x00	; 0
     4b2:	73 01       	movw	r14, r6
     4b4:	65 01       	movw	r12, r10
     4b6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <straight>
}
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	9f 90       	pop	r9
     4cc:	8f 90       	pop	r8
     4ce:	7f 90       	pop	r7
     4d0:	6f 90       	pop	r6
     4d2:	5f 90       	pop	r5
     4d4:	4f 90       	pop	r4
     4d6:	3f 90       	pop	r3
     4d8:	2f 90       	pop	r2
     4da:	08 95       	ret

000004dc <moveBackwardsAndCorrect>:
	//Move Mouse
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void moveBackwardsAndCorrect()
{
     4dc:	2f 92       	push	r2
     4de:	3f 92       	push	r3
     4e0:	4f 92       	push	r4
     4e2:	5f 92       	push	r5
     4e4:	6f 92       	push	r6
     4e6:	7f 92       	push	r7
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	28 97       	sbiw	r28, 0x08	; 8
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
	//Rotate Left 180
	setDirection(0, 1);
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setDirection>
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     51c:	38 e4       	ldi	r19, 0x48	; 72
     51e:	43 2e       	mov	r4, r19
     520:	31 e0       	ldi	r19, 0x01	; 1
     522:	53 2e       	mov	r5, r19
     524:	60 91 48 01 	lds	r22, 0x0148
     528:	70 91 49 01 	lds	r23, 0x0149
     52c:	80 91 4a 01 	lds	r24, 0x014A
     530:	90 91 4b 01 	lds	r25, 0x014B
     534:	28 ef       	ldi	r18, 0xF8	; 248
     536:	22 2e       	mov	r2, r18
     538:	2f ef       	ldi	r18, 0xFF	; 255
     53a:	32 2e       	mov	r3, r18
     53c:	24 0c       	add	r2, r4
     53e:	35 1c       	adc	r3, r5
     540:	f1 01       	movw	r30, r2
     542:	e0 80       	ld	r14, Z
     544:	f1 80       	ldd	r15, Z+1	; 0x01
     546:	02 81       	ldd	r16, Z+2	; 0x02
     548:	13 81       	ldd	r17, Z+3	; 0x03
     54a:	f2 01       	movw	r30, r4
     54c:	d2 90       	ld	r13, -Z
     54e:	c2 90       	ld	r12, -Z
     550:	b2 90       	ld	r11, -Z
     552:	a2 90       	ld	r10, -Z
     554:	2f 01       	movw	r4, r30
     556:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     55a:	69 83       	std	Y+1, r22	; 0x01
     55c:	7a 83       	std	Y+2, r23	; 0x02
     55e:	8b 83       	std	Y+3, r24	; 0x03
     560:	9c 83       	std	Y+4, r25	; 0x04
     562:	c8 01       	movw	r24, r16
     564:	b7 01       	movw	r22, r14
     566:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     56a:	3b 01       	movw	r6, r22
     56c:	4c 01       	movw	r8, r24
     56e:	c6 01       	movw	r24, r12
     570:	b5 01       	movw	r22, r10
     572:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     576:	5b 01       	movw	r10, r22
     578:	6c 01       	movw	r12, r24
     57a:	60 e8       	ldi	r22, 0x80	; 128
     57c:	72 e0       	ldi	r23, 0x02	; 2
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	29 81       	ldd	r18, Y+1	; 0x01
     588:	3a 81       	ldd	r19, Y+2	; 0x02
     58a:	00 e0       	ldi	r16, 0x00	; 0
     58c:	10 e0       	ldi	r17, 0x00	; 0
     58e:	73 01       	movw	r14, r6
     590:	65 01       	movw	r12, r10
     592:	0e 94 b6 05 	call	0xb6c	; 0xb6c <straight>
	
	
	//Go Backwards
	setDirection(1, 1);	
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setDirection>
	straight(250, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     5a2:	60 91 48 01 	lds	r22, 0x0148
     5a6:	70 91 49 01 	lds	r23, 0x0149
     5aa:	80 91 4a 01 	lds	r24, 0x014A
     5ae:	90 91 4b 01 	lds	r25, 0x014B
     5b2:	f1 01       	movw	r30, r2
     5b4:	e0 80       	ld	r14, Z
     5b6:	f1 80       	ldd	r15, Z+1	; 0x01
     5b8:	02 81       	ldd	r16, Z+2	; 0x02
     5ba:	13 81       	ldd	r17, Z+3	; 0x03
     5bc:	f2 01       	movw	r30, r4
     5be:	a0 80       	ld	r10, Z
     5c0:	b1 80       	ldd	r11, Z+1	; 0x01
     5c2:	c2 80       	ldd	r12, Z+2	; 0x02
     5c4:	d3 80       	ldd	r13, Z+3	; 0x03
     5c6:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     5ca:	6d 83       	std	Y+5, r22	; 0x05
     5cc:	7e 83       	std	Y+6, r23	; 0x06
     5ce:	8f 83       	std	Y+7, r24	; 0x07
     5d0:	98 87       	std	Y+8, r25	; 0x08
     5d2:	c8 01       	movw	r24, r16
     5d4:	b7 01       	movw	r22, r14
     5d6:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     5da:	3b 01       	movw	r6, r22
     5dc:	4c 01       	movw	r8, r24
     5de:	c6 01       	movw	r24, r12
     5e0:	b5 01       	movw	r22, r10
     5e2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     5e6:	5b 01       	movw	r10, r22
     5e8:	6c 01       	movw	r12, r24
     5ea:	6a ef       	ldi	r22, 0xFA	; 250
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	2d 81       	ldd	r18, Y+5	; 0x05
     5f8:	3e 81       	ldd	r19, Y+6	; 0x06
     5fa:	00 e0       	ldi	r16, 0x00	; 0
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	73 01       	movw	r14, r6
     600:	65 01       	movw	r12, r10
     602:	0e 94 b6 05 	call	0xb6c	; 0xb6c <straight>
	
	setDirection(0, 0);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setDirection>
	straight(130, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     612:	60 91 48 01 	lds	r22, 0x0148
     616:	70 91 49 01 	lds	r23, 0x0149
     61a:	80 91 4a 01 	lds	r24, 0x014A
     61e:	90 91 4b 01 	lds	r25, 0x014B
     622:	f1 01       	movw	r30, r2
     624:	e0 80       	ld	r14, Z
     626:	f1 80       	ldd	r15, Z+1	; 0x01
     628:	02 81       	ldd	r16, Z+2	; 0x02
     62a:	13 81       	ldd	r17, Z+3	; 0x03
     62c:	f2 01       	movw	r30, r4
     62e:	a0 80       	ld	r10, Z
     630:	b1 80       	ldd	r11, Z+1	; 0x01
     632:	c2 80       	ldd	r12, Z+2	; 0x02
     634:	d3 80       	ldd	r13, Z+3	; 0x03
     636:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     63a:	1b 01       	movw	r2, r22
     63c:	2c 01       	movw	r4, r24
     63e:	c8 01       	movw	r24, r16
     640:	b7 01       	movw	r22, r14
     642:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     646:	3b 01       	movw	r6, r22
     648:	4c 01       	movw	r8, r24
     64a:	c6 01       	movw	r24, r12
     64c:	b5 01       	movw	r22, r10
     64e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     652:	5b 01       	movw	r10, r22
     654:	6c 01       	movw	r12, r24
     656:	62 e8       	ldi	r22, 0x82	; 130
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	91 01       	movw	r18, r2
     664:	00 e0       	ldi	r16, 0x00	; 0
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	73 01       	movw	r14, r6
     66a:	65 01       	movw	r12, r10
     66c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <straight>
}
     670:	28 96       	adiw	r28, 0x08	; 8
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	7f 90       	pop	r7
     696:	6f 90       	pop	r6
     698:	5f 90       	pop	r5
     69a:	4f 90       	pop	r4
     69c:	3f 90       	pop	r3
     69e:	2f 90       	pop	r2
     6a0:	08 95       	ret

000006a2 <moveBackwards>:
	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void moveBackwards()
{
     6a2:	2f 92       	push	r2
     6a4:	3f 92       	push	r3
     6a6:	4f 92       	push	r4
     6a8:	5f 92       	push	r5
     6aa:	6f 92       	push	r6
     6ac:	7f 92       	push	r7
     6ae:	8f 92       	push	r8
     6b0:	9f 92       	push	r9
     6b2:	af 92       	push	r10
     6b4:	bf 92       	push	r11
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
	//Rotate Left
	setDirection(0, 1);
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	61 e0       	ldi	r22, 0x01	; 1
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setDirection>
	
	//Move Mouse
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     6ce:	60 91 48 01 	lds	r22, 0x0148
     6d2:	70 91 49 01 	lds	r23, 0x0149
     6d6:	80 91 4a 01 	lds	r24, 0x014A
     6da:	90 91 4b 01 	lds	r25, 0x014B
     6de:	e0 e4       	ldi	r30, 0x40	; 64
     6e0:	f1 e0       	ldi	r31, 0x01	; 1
     6e2:	e1 90       	ld	r14, Z+
     6e4:	f1 90       	ld	r15, Z+
     6e6:	01 91       	ld	r16, Z+
     6e8:	11 91       	ld	r17, Z+
     6ea:	a0 80       	ld	r10, Z
     6ec:	b1 80       	ldd	r11, Z+1	; 0x01
     6ee:	c2 80       	ldd	r12, Z+2	; 0x02
     6f0:	d3 80       	ldd	r13, Z+3	; 0x03
     6f2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     6f6:	1b 01       	movw	r2, r22
     6f8:	2c 01       	movw	r4, r24
     6fa:	c8 01       	movw	r24, r16
     6fc:	b7 01       	movw	r22, r14
     6fe:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     702:	3b 01       	movw	r6, r22
     704:	4c 01       	movw	r8, r24
     706:	c6 01       	movw	r24, r12
     708:	b5 01       	movw	r22, r10
     70a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     70e:	5b 01       	movw	r10, r22
     710:	6c 01       	movw	r12, r24
     712:	60 e8       	ldi	r22, 0x80	; 128
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	91 01       	movw	r18, r2
     720:	00 e0       	ldi	r16, 0x00	; 0
     722:	10 e0       	ldi	r17, 0x00	; 0
     724:	73 01       	movw	r14, r6
     726:	65 01       	movw	r12, r10
     728:	0e 94 b6 05 	call	0xb6c	; 0xb6c <straight>
}
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	bf 90       	pop	r11
     73a:	af 90       	pop	r10
     73c:	9f 90       	pop	r9
     73e:	8f 90       	pop	r8
     740:	7f 90       	pop	r7
     742:	6f 90       	pop	r6
     744:	5f 90       	pop	r5
     746:	4f 90       	pop	r4
     748:	3f 90       	pop	r3
     74a:	2f 90       	pop	r2
     74c:	08 95       	ret

0000074e <moveForwardAndStop>:
	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, mouse.maxVelocity, mouse.acceleration, mouse.deceleration);
}

void moveForwardAndStop()
{	
     74e:	2f 92       	push	r2
     750:	3f 92       	push	r3
     752:	4f 92       	push	r4
     754:	5f 92       	push	r5
     756:	6f 92       	push	r6
     758:	7f 92       	push	r7
     75a:	8f 92       	push	r8
     75c:	9f 92       	push	r9
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	df 93       	push	r29
     770:	cf 93       	push	r28
     772:	00 d0       	rcall	.+0      	; 0x774 <moveForwardAndStop+0x26>
     774:	00 d0       	rcall	.+0      	; 0x776 <moveForwardAndStop+0x28>
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
	//Make the robot go forward
	setDirection(0, 0);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setDirection>

	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     786:	60 91 4c 01 	lds	r22, 0x014C
     78a:	70 91 4d 01 	lds	r23, 0x014D
     78e:	80 91 4e 01 	lds	r24, 0x014E
     792:	90 91 4f 01 	lds	r25, 0x014F
     796:	e8 e4       	ldi	r30, 0x48	; 72
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	e0 80       	ld	r14, Z
     79c:	f1 80       	ldd	r15, Z+1	; 0x01
     79e:	02 81       	ldd	r16, Z+2	; 0x02
     7a0:	13 81       	ldd	r17, Z+3	; 0x03
     7a2:	38 97       	sbiw	r30, 0x08	; 8
     7a4:	a1 90       	ld	r10, Z+
     7a6:	b1 90       	ld	r11, Z+
     7a8:	c1 90       	ld	r12, Z+
     7aa:	d1 90       	ld	r13, Z+
     7ac:	20 80       	ld	r2, Z
     7ae:	31 80       	ldd	r3, Z+1	; 0x01
     7b0:	42 80       	ldd	r4, Z+2	; 0x02
     7b2:	53 80       	ldd	r5, Z+3	; 0x03
     7b4:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     7b8:	69 83       	std	Y+1, r22	; 0x01
     7ba:	7a 83       	std	Y+2, r23	; 0x02
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	9c 83       	std	Y+4, r25	; 0x04
     7c0:	c8 01       	movw	r24, r16
     7c2:	b7 01       	movw	r22, r14
     7c4:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     7c8:	7b 01       	movw	r14, r22
     7ca:	8c 01       	movw	r16, r24
     7cc:	c6 01       	movw	r24, r12
     7ce:	b5 01       	movw	r22, r10
     7d0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     7d4:	3b 01       	movw	r6, r22
     7d6:	4c 01       	movw	r8, r24
     7d8:	c2 01       	movw	r24, r4
     7da:	b1 01       	movw	r22, r2
     7dc:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     7e0:	5b 01       	movw	r10, r22
     7e2:	6c 01       	movw	r12, r24
     7e4:	6a ef       	ldi	r22, 0xFA	; 250
     7e6:	72 e0       	ldi	r23, 0x02	; 2
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	49 81       	ldd	r20, Y+1	; 0x01
     7ee:	5a 81       	ldd	r21, Y+2	; 0x02
     7f0:	97 01       	movw	r18, r14
     7f2:	00 e0       	ldi	r16, 0x00	; 0
     7f4:	10 e0       	ldi	r17, 0x00	; 0
     7f6:	73 01       	movw	r14, r6
     7f8:	65 01       	movw	r12, r10
     7fa:	0e 94 b6 05 	call	0xb6c	; 0xb6c <straight>
}
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	cf 91       	pop	r28
     808:	df 91       	pop	r29
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	bf 90       	pop	r11
     818:	af 90       	pop	r10
     81a:	9f 90       	pop	r9
     81c:	8f 90       	pop	r8
     81e:	7f 90       	pop	r7
     820:	6f 90       	pop	r6
     822:	5f 90       	pop	r5
     824:	4f 90       	pop	r4
     826:	3f 90       	pop	r3
     828:	2f 90       	pop	r2
     82a:	08 95       	ret

0000082c <moveForward>:
	//If there is something less then 8 cm away from sensor 
	return (value < 8);
}

void moveForward()
{
     82c:	2f 92       	push	r2
     82e:	3f 92       	push	r3
     830:	4f 92       	push	r4
     832:	5f 92       	push	r5
     834:	6f 92       	push	r6
     836:	7f 92       	push	r7
     838:	8f 92       	push	r8
     83a:	9f 92       	push	r9
     83c:	af 92       	push	r10
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	28 97       	sbiw	r28, 0x08	; 8
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
	//Make the robot go forward
	setDirection(0, 0);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setDirection>

	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, mouse.maxVelocity, mouse.acceleration, mouse.deceleration);
     86c:	ac e4       	ldi	r26, 0x4C	; 76
     86e:	b1 e0       	ldi	r27, 0x01	; 1
     870:	60 91 4c 01 	lds	r22, 0x014C
     874:	70 91 4d 01 	lds	r23, 0x014D
     878:	80 91 4e 01 	lds	r24, 0x014E
     87c:	90 91 4f 01 	lds	r25, 0x014F
     880:	fd 01       	movw	r30, r26
     882:	12 91       	ld	r17, -Z
     884:	02 91       	ld	r16, -Z
     886:	f2 90       	ld	r15, -Z
     888:	e2 90       	ld	r14, -Z
     88a:	a0 80       	ld	r10, Z
     88c:	b1 80       	ldd	r11, Z+1	; 0x01
     88e:	c2 80       	ldd	r12, Z+2	; 0x02
     890:	d3 80       	ldd	r13, Z+3	; 0x03
     892:	1c 97       	sbiw	r26, 0x0c	; 12
     894:	6d 90       	ld	r6, X+
     896:	7d 90       	ld	r7, X+
     898:	8d 90       	ld	r8, X+
     89a:	9d 90       	ld	r9, X+
     89c:	2d 91       	ld	r18, X+
     89e:	3d 91       	ld	r19, X+
     8a0:	4d 91       	ld	r20, X+
     8a2:	5c 91       	ld	r21, X
     8a4:	29 83       	std	Y+1, r18	; 0x01
     8a6:	3a 83       	std	Y+2, r19	; 0x02
     8a8:	4b 83       	std	Y+3, r20	; 0x03
     8aa:	5c 83       	std	Y+4, r21	; 0x04
     8ac:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     8b0:	6d 83       	std	Y+5, r22	; 0x05
     8b2:	7e 83       	std	Y+6, r23	; 0x06
     8b4:	8f 83       	std	Y+7, r24	; 0x07
     8b6:	98 87       	std	Y+8, r25	; 0x08
     8b8:	c8 01       	movw	r24, r16
     8ba:	b7 01       	movw	r22, r14
     8bc:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     8c0:	1b 01       	movw	r2, r22
     8c2:	2c 01       	movw	r4, r24
     8c4:	c6 01       	movw	r24, r12
     8c6:	b5 01       	movw	r22, r10
     8c8:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     8cc:	7b 01       	movw	r14, r22
     8ce:	8c 01       	movw	r16, r24
     8d0:	c4 01       	movw	r24, r8
     8d2:	b3 01       	movw	r22, r6
     8d4:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     8d8:	3b 01       	movw	r6, r22
     8da:	4c 01       	movw	r8, r24
     8dc:	69 81       	ldd	r22, Y+1	; 0x01
     8de:	7a 81       	ldd	r23, Y+2	; 0x02
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	9c 81       	ldd	r25, Y+4	; 0x04
     8e4:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     8e8:	5b 01       	movw	r10, r22
     8ea:	6c 01       	movw	r12, r24
     8ec:	6a ef       	ldi	r22, 0xFA	; 250
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	4d 81       	ldd	r20, Y+5	; 0x05
     8f6:	5e 81       	ldd	r21, Y+6	; 0x06
     8f8:	91 01       	movw	r18, r2
     8fa:	87 01       	movw	r16, r14
     8fc:	73 01       	movw	r14, r6
     8fe:	65 01       	movw	r12, r10
     900:	0e 94 b6 05 	call	0xb6c	; 0xb6c <straight>
}
     904:	28 96       	adiw	r28, 0x08	; 8
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	cf 91       	pop	r28
     912:	df 91       	pop	r29
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	9f 90       	pop	r9
     926:	8f 90       	pop	r8
     928:	7f 90       	pop	r7
     92a:	6f 90       	pop	r6
     92c:	5f 90       	pop	r5
     92e:	4f 90       	pop	r4
     930:	3f 90       	pop	r3
     932:	2f 90       	pop	r2
     934:	08 95       	ret

00000936 <isWallLeft>:
	//If there is something less then 8 cm away from sensor 
	return (value < 8);
}

int isWallLeft()
{
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
	float value = getLeftIR();
     93a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <getLeftIR>
     93e:	c0 e0       	ldi	r28, 0x00	; 0
     940:	d0 e0       	ldi	r29, 0x00	; 0
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpsf2>
     94e:	88 23       	and	r24, r24
     950:	14 f4       	brge	.+4      	; 0x956 <isWallLeft+0x20>
     952:	c1 e0       	ldi	r28, 0x01	; 1
     954:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 8 cm away from sensor 
	return (value < 8);
}
     956:	ce 01       	movw	r24, r28
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <isWallRight>:
	//If there is something less then 16 cm away from sensor
	return (value < 16);		
}

int isWallRight()
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
	float value = getRightIR();
     962:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <getRightIR>
     966:	c0 e0       	ldi	r28, 0x00	; 0
     968:	d0 e0       	ldi	r29, 0x00	; 0
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	51 e4       	ldi	r21, 0x41	; 65
     972:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpsf2>
     976:	88 23       	and	r24, r24
     978:	14 f4       	brge	.+4      	; 0x97e <isWallRight+0x20>
     97a:	c1 e0       	ldi	r28, 0x01	; 1
     97c:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 8 cm away from sensor 
	return (value < 8);
}
     97e:	ce 01       	movw	r24, r28
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <isWallFront>:

//Create Mouse
volatile Mouse mouse;

int isWallFront()
{
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
    float value = getFrontIR();
     98a:	0e 94 3f 0a 	call	0x147e	; 0x147e <getFrontIR>
     98e:	c0 e0       	ldi	r28, 0x00	; 0
     990:	d0 e0       	ldi	r29, 0x00	; 0
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e8       	ldi	r20, 0x80	; 128
     998:	51 e4       	ldi	r21, 0x41	; 65
     99a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpsf2>
     99e:	88 23       	and	r24, r24
     9a0:	14 f4       	brge	.+4      	; 0x9a6 <isWallFront+0x20>
     9a2:	c1 e0       	ldi	r28, 0x01	; 1
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 16 cm away from sensor
	return (value < 16);		
}
     9a6:	ce 01       	movw	r24, r28
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <getOffsetError>:
volatile float lPrevious;
volatile float rPrevious;
volatile int flag;

int getOffsetError()
{
     9ae:	2f 92       	push	r2
     9b0:	3f 92       	push	r3
     9b2:	4f 92       	push	r4
     9b4:	5f 92       	push	r5
     9b6:	6f 92       	push	r6
     9b8:	7f 92       	push	r7
     9ba:	8f 92       	push	r8
     9bc:	9f 92       	push	r9
     9be:	af 92       	push	r10
     9c0:	bf 92       	push	r11
     9c2:	cf 92       	push	r12
     9c4:	df 92       	push	r13
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
	if(flag != 1)
     9ce:	80 91 52 01 	lds	r24, 0x0152
     9d2:	90 91 53 01 	lds	r25, 0x0153
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	d1 f0       	breq	.+52     	; 0xa0e <getOffsetError+0x60>
	{
		lPrevious = getLeftIR();
     9da:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <getLeftIR>
     9de:	60 93 58 01 	sts	0x0158, r22
     9e2:	70 93 59 01 	sts	0x0159, r23
     9e6:	80 93 5a 01 	sts	0x015A, r24
     9ea:	90 93 5b 01 	sts	0x015B, r25
		rPrevious = getRightIR();
     9ee:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <getRightIR>
     9f2:	60 93 54 01 	sts	0x0154, r22
     9f6:	70 93 55 01 	sts	0x0155, r23
     9fa:	80 93 56 01 	sts	0x0156, r24
     9fe:	90 93 57 01 	sts	0x0157, r25
		flag = 1;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	90 93 53 01 	sts	0x0153, r25
     a0a:	80 93 52 01 	sts	0x0152, r24
	}
	
	float left = getLeftIR();
     a0e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <getLeftIR>
     a12:	1b 01       	movw	r2, r22
     a14:	2c 01       	movw	r4, r24
	float right = getRightIR();
     a16:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <getRightIR>
     a1a:	3b 01       	movw	r6, r22
     a1c:	4c 01       	movw	r8, r24
			
	//If derivative of IR readings is greater then 1
	if(left-lPrevious > 1)
     a1e:	20 91 58 01 	lds	r18, 0x0158
     a22:	30 91 59 01 	lds	r19, 0x0159
     a26:	40 91 5a 01 	lds	r20, 0x015A
     a2a:	50 91 5b 01 	lds	r21, 0x015B
     a2e:	c2 01       	movw	r24, r4
     a30:	b1 01       	movw	r22, r2
     a32:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__subsf3>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e8       	ldi	r20, 0x80	; 128
     a3c:	5f e3       	ldi	r21, 0x3F	; 63
     a3e:	0e 94 3d 10 	call	0x207a	; 0x207a <__gesf2>
     a42:	18 16       	cp	r1, r24
     a44:	24 f4       	brge	.+8      	; 0xa4e <getOffsetError+0xa0>
	{		
		mouse.IR_CORRECT = 0;
     a46:	10 92 51 01 	sts	0x0151, r1
     a4a:	10 92 50 01 	sts	0x0150, r1
	}
	if(right-rPrevious > 1)
     a4e:	20 91 54 01 	lds	r18, 0x0154
     a52:	30 91 55 01 	lds	r19, 0x0155
     a56:	40 91 56 01 	lds	r20, 0x0156
     a5a:	50 91 57 01 	lds	r21, 0x0157
     a5e:	c4 01       	movw	r24, r8
     a60:	b3 01       	movw	r22, r6
     a62:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__subsf3>
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e8       	ldi	r20, 0x80	; 128
     a6c:	5f e3       	ldi	r21, 0x3F	; 63
     a6e:	0e 94 3d 10 	call	0x207a	; 0x207a <__gesf2>
     a72:	18 16       	cp	r1, r24
     a74:	24 f4       	brge	.+8      	; 0xa7e <getOffsetError+0xd0>
	{
		mouse.IR_CORRECT = 0;
     a76:	10 92 51 01 	sts	0x0151, r1
     a7a:	10 92 50 01 	sts	0x0150, r1
	}
	
	float error = (right-left)*mouse.IR_CORRECT;
     a7e:	c4 01       	movw	r24, r8
     a80:	b3 01       	movw	r22, r6
     a82:	a2 01       	movw	r20, r4
     a84:	91 01       	movw	r18, r2
     a86:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__subsf3>
     a8a:	5b 01       	movw	r10, r22
     a8c:	6c 01       	movw	r12, r24
     a8e:	00 91 50 01 	lds	r16, 0x0150
     a92:	10 91 51 01 	lds	r17, 0x0151
	
	if(right-left > 3)
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e4       	ldi	r20, 0x40	; 64
     a9c:	50 e4       	ldi	r21, 0x40	; 64
     a9e:	0e 94 3d 10 	call	0x207a	; 0x207a <__gesf2>
     aa2:	18 16       	cp	r1, r24
     aa4:	74 f0       	brlt	.+28     	; 0xac2 <getOffsetError+0x114>
	if(right-rPrevious > 1)
	{
		mouse.IR_CORRECT = 0;
	}
	
	float error = (right-left)*mouse.IR_CORRECT;
     aa6:	b8 01       	movw	r22, r16
     aa8:	88 27       	eor	r24, r24
     aaa:	77 fd       	sbrc	r23, 7
     aac:	80 95       	com	r24
     aae:	98 2f       	mov	r25, r24
     ab0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	c6 01       	movw	r24, r12
     aba:	b5 01       	movw	r22, r10
     abc:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     ac0:	0f c0       	rjmp	.+30     	; 0xae0 <getOffsetError+0x132>
	
	if(right-left > 3)
		error = 3*mouse.IR_CORRECT;
     ac2:	20 91 50 01 	lds	r18, 0x0150
     ac6:	30 91 51 01 	lds	r19, 0x0151
     aca:	b9 01       	movw	r22, r18
     acc:	66 0f       	add	r22, r22
     ace:	77 1f       	adc	r23, r23
     ad0:	62 0f       	add	r22, r18
     ad2:	73 1f       	adc	r23, r19
     ad4:	88 27       	eor	r24, r24
     ad6:	77 fd       	sbrc	r23, 7
     ad8:	80 95       	com	r24
     ada:	98 2f       	mov	r25, r24
     adc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     ae0:	7b 01       	movw	r14, r22
     ae2:	8c 01       	movw	r16, r24
	if(right-left < -3)
     ae4:	c6 01       	movw	r24, r12
     ae6:	b5 01       	movw	r22, r10
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e4       	ldi	r20, 0x40	; 64
     aee:	50 ec       	ldi	r21, 0xC0	; 192
     af0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpsf2>
     af4:	88 23       	and	r24, r24
     af6:	a4 f4       	brge	.+40     	; 0xb20 <__stack+0x21>
		error = -3*mouse.IR_CORRECT;
     af8:	20 91 50 01 	lds	r18, 0x0150
     afc:	30 91 51 01 	lds	r19, 0x0151
     b00:	b9 01       	movw	r22, r18
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	62 0f       	add	r22, r18
     b08:	73 1f       	adc	r23, r19
     b0a:	70 95       	com	r23
     b0c:	61 95       	neg	r22
     b0e:	7f 4f       	sbci	r23, 0xFF	; 255
     b10:	88 27       	eor	r24, r24
     b12:	77 fd       	sbrc	r23, 7
     b14:	80 95       	com	r24
     b16:	98 2f       	mov	r25, r24
     b18:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     b1c:	7b 01       	movw	r14, r22
     b1e:	8c 01       	movw	r16, r24

		
	lPrevious = left;
     b20:	20 92 58 01 	sts	0x0158, r2
     b24:	30 92 59 01 	sts	0x0159, r3
     b28:	40 92 5a 01 	sts	0x015A, r4
     b2c:	50 92 5b 01 	sts	0x015B, r5
	rPrevious = right;
     b30:	60 92 54 01 	sts	0x0154, r6
     b34:	70 92 55 01 	sts	0x0155, r7
     b38:	80 92 56 01 	sts	0x0156, r8
     b3c:	90 92 57 01 	sts	0x0157, r9
     b40:	c8 01       	movw	r24, r16
     b42:	b7 01       	movw	r22, r14
     b44:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
	return error;
}
     b48:	cb 01       	movw	r24, r22
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	df 90       	pop	r13
     b54:	cf 90       	pop	r12
     b56:	bf 90       	pop	r11
     b58:	af 90       	pop	r10
     b5a:	9f 90       	pop	r9
     b5c:	8f 90       	pop	r8
     b5e:	7f 90       	pop	r7
     b60:	6f 90       	pop	r6
     b62:	5f 90       	pop	r5
     b64:	4f 90       	pop	r4
     b66:	3f 90       	pop	r3
     b68:	2f 90       	pop	r2
     b6a:	08 95       	ret

00000b6c <straight>:
extern volatile long milliseconds;
extern volatile Mouse mouse;


void straight(long stepTarget, int inSpeed, int maxSpeed, int exitSpeed, int accel, int decel)
{
     b6c:	2f 92       	push	r2
     b6e:	3f 92       	push	r3
     b70:	4f 92       	push	r4
     b72:	5f 92       	push	r5
     b74:	6f 92       	push	r6
     b76:	7f 92       	push	r7
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	ae 97       	sbiw	r28, 0x2e	; 46
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	69 87       	std	Y+9, r22	; 0x09
     ba2:	7a 87       	std	Y+10, r23	; 0x0a
     ba4:	8b 87       	std	Y+11, r24	; 0x0b
     ba6:	9c 87       	std	Y+12, r25	; 0x0c
     ba8:	3e a7       	std	Y+46, r19	; 0x2e
     baa:	2d a7       	std	Y+45, r18	; 0x2d
     bac:	1e 87       	std	Y+14, r17	; 0x0e
     bae:	0d 87       	std	Y+13, r16	; 0x0d
     bb0:	d8 8a       	std	Y+16, r13	; 0x10
     bb2:	cf 86       	std	Y+15, r12	; 0x0f
	unsigned long startTime = milliseconds;
     bb4:	80 91 06 01 	lds	r24, 0x0106
     bb8:	90 91 07 01 	lds	r25, 0x0107
     bbc:	a0 91 08 01 	lds	r26, 0x0108
     bc0:	b0 91 09 01 	lds	r27, 0x0109
     bc4:	8d 83       	std	Y+5, r24	; 0x05
     bc6:	9e 83       	std	Y+6, r25	; 0x06
     bc8:	af 83       	std	Y+7, r26	; 0x07
     bca:	b8 87       	std	Y+8, r27	; 0x08
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
     bcc:	10 92 10 01 	sts	0x0110, r1
     bd0:	10 92 11 01 	sts	0x0111, r1
     bd4:	10 92 12 01 	sts	0x0112, r1
     bd8:	10 92 13 01 	sts	0x0113, r1
     bdc:	80 91 10 01 	lds	r24, 0x0110
     be0:	90 91 11 01 	lds	r25, 0x0111
     be4:	a0 91 12 01 	lds	r26, 0x0112
     be8:	b0 91 13 01 	lds	r27, 0x0113
     bec:	80 93 28 01 	sts	0x0128, r24
     bf0:	90 93 29 01 	sts	0x0129, r25
     bf4:	a0 93 2a 01 	sts	0x012A, r26
     bf8:	b0 93 2b 01 	sts	0x012B, r27
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
     bfc:	ca 01       	movw	r24, r20
     bfe:	aa 27       	eor	r26, r26
     c00:	97 fd       	sbrc	r25, 7
     c02:	a0 95       	com	r26
     c04:	ba 2f       	mov	r27, r26
     c06:	89 8f       	std	Y+25, r24	; 0x19
     c08:	9a 8f       	std	Y+26, r25	; 0x1a
     c0a:	ab 8f       	std	Y+27, r26	; 0x1b
     c0c:	bc 8f       	std	Y+28, r27	; 0x1c
     c0e:	97 01       	movw	r18, r14
     c10:	44 27       	eor	r20, r20
     c12:	37 fd       	sbrc	r19, 7
     c14:	40 95       	com	r20
     c16:	54 2f       	mov	r21, r20
     c18:	2d 8f       	std	Y+29, r18	; 0x1d
     c1a:	3e 8f       	std	Y+30, r19	; 0x1e
     c1c:	4f 8f       	std	Y+31, r20	; 0x1f
     c1e:	58 a3       	std	Y+32, r21	; 0x20
     c20:	8d a5       	ldd	r24, Y+45	; 0x2d
     c22:	9e a5       	ldd	r25, Y+46	; 0x2e
     c24:	aa 27       	eor	r26, r26
     c26:	97 fd       	sbrc	r25, 7
     c28:	a0 95       	com	r26
     c2a:	ba 2f       	mov	r27, r26
     c2c:	89 a3       	std	Y+33, r24	; 0x21
     c2e:	9a a3       	std	Y+34, r25	; 0x22
     c30:	ab a3       	std	Y+35, r26	; 0x23
     c32:	bc a3       	std	Y+36, r27	; 0x24
		
		mouse.velocity = curSpeed;
		mouse.leftMotor.currentStepDelay = getDelayFromVelocity(curSpeed - error);
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed + error);
		
		float decelStepsUntilStop = curSpeed * curSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
     c34:	96 01       	movw	r18, r12
     c36:	44 27       	eor	r20, r20
     c38:	37 fd       	sbrc	r19, 7
     c3a:	40 95       	com	r20
     c3c:	54 2f       	mov	r21, r20
     c3e:	2d a3       	std	Y+37, r18	; 0x25
     c40:	3e a3       	std	Y+38, r19	; 0x26
     c42:	4f a3       	std	Y+39, r20	; 0x27
     c44:	58 a7       	std	Y+40, r21	; 0x28
     c46:	c8 01       	movw	r24, r16
     c48:	aa 27       	eor	r26, r26
     c4a:	97 fd       	sbrc	r25, 7
     c4c:	a0 95       	com	r26
     c4e:	ba 2f       	mov	r27, r26
     c50:	89 a7       	std	Y+41, r24	; 0x29
     c52:	9a a7       	std	Y+42, r25	; 0x2a
     c54:	ab a7       	std	Y+43, r26	; 0x2b
     c56:	bc a7       	std	Y+44, r27	; 0x2c
     c58:	05 c1       	rjmp	.+522    	; 0xe64 <straight+0x2f8>
	unsigned long startTime = milliseconds;
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
	{
		float curSpeed = inSpeed + accel*(float)((milliseconds-startTime)/1000.0);
     c5a:	60 91 06 01 	lds	r22, 0x0106
     c5e:	70 91 07 01 	lds	r23, 0x0107
     c62:	80 91 08 01 	lds	r24, 0x0108
     c66:	90 91 09 01 	lds	r25, 0x0109
     c6a:	2d 81       	ldd	r18, Y+5	; 0x05
     c6c:	3e 81       	ldd	r19, Y+6	; 0x06
     c6e:	4f 81       	ldd	r20, Y+7	; 0x07
     c70:	58 85       	ldd	r21, Y+8	; 0x08
     c72:	62 1b       	sub	r22, r18
     c74:	73 0b       	sbc	r23, r19
     c76:	84 0b       	sbc	r24, r20
     c78:	95 0b       	sbc	r25, r21
     c7a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatunsisf>
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4a e7       	ldi	r20, 0x7A	; 122
     c84:	54 e4       	ldi	r21, 0x44	; 68
     c86:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divsf3>
     c8a:	9b 01       	movw	r18, r22
     c8c:	ac 01       	movw	r20, r24
     c8e:	c6 01       	movw	r24, r12
     c90:	b5 01       	movw	r22, r10
     c92:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	c4 01       	movw	r24, r8
     c9c:	b3 01       	movw	r22, r6
     c9e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     ca2:	69 8b       	std	Y+17, r22	; 0x11
     ca4:	7a 8b       	std	Y+18, r23	; 0x12
     ca6:	8b 8b       	std	Y+19, r24	; 0x13
     ca8:	9c 8b       	std	Y+20, r25	; 0x14
		
		int error = getOffsetError();
     caa:	0e 94 d7 04 	call	0x9ae	; 0x9ae <getOffsetError>
		
		mouse.velocity = curSpeed;
     cae:	29 89       	ldd	r18, Y+17	; 0x11
     cb0:	3a 89       	ldd	r19, Y+18	; 0x12
     cb2:	4b 89       	ldd	r20, Y+19	; 0x13
     cb4:	5c 89       	ldd	r21, Y+20	; 0x14
     cb6:	20 93 4c 01 	sts	0x014C, r18
     cba:	30 93 4d 01 	sts	0x014D, r19
     cbe:	40 93 4e 01 	sts	0x014E, r20
     cc2:	50 93 4f 01 	sts	0x014F, r21
		mouse.leftMotor.currentStepDelay = getDelayFromVelocity(curSpeed - error);
     cc6:	aa 27       	eor	r26, r26
     cc8:	97 fd       	sbrc	r25, 7
     cca:	a0 95       	com	r26
     ccc:	ba 2f       	mov	r27, r26
     cce:	bc 01       	movw	r22, r24
     cd0:	cd 01       	movw	r24, r26
     cd2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     cd6:	7b 01       	movw	r14, r22
     cd8:	8c 01       	movw	r16, r24
     cda:	69 89       	ldd	r22, Y+17	; 0x11
     cdc:	7a 89       	ldd	r23, Y+18	; 0x12
     cde:	8b 89       	ldd	r24, Y+19	; 0x13
     ce0:	9c 89       	ldd	r25, Y+20	; 0x14
     ce2:	a8 01       	movw	r20, r16
     ce4:	97 01       	movw	r18, r14
     ce6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__subsf3>
     cea:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	0e 94 ae 09 	call	0x135c	; 0x135c <getDelayFromVelocity>
     cf6:	aa 27       	eor	r26, r26
     cf8:	97 fd       	sbrc	r25, 7
     cfa:	a0 95       	com	r26
     cfc:	ba 2f       	mov	r27, r26
     cfe:	bc 01       	movw	r22, r24
     d00:	cd 01       	movw	r24, r26
     d02:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     d06:	60 93 14 01 	sts	0x0114, r22
     d0a:	70 93 15 01 	sts	0x0115, r23
     d0e:	80 93 16 01 	sts	0x0116, r24
     d12:	90 93 17 01 	sts	0x0117, r25
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed + error);
     d16:	69 89       	ldd	r22, Y+17	; 0x11
     d18:	7a 89       	ldd	r23, Y+18	; 0x12
     d1a:	8b 89       	ldd	r24, Y+19	; 0x13
     d1c:	9c 89       	ldd	r25, Y+20	; 0x14
     d1e:	a8 01       	movw	r20, r16
     d20:	97 01       	movw	r18, r14
     d22:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     d26:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	0e 94 ae 09 	call	0x135c	; 0x135c <getDelayFromVelocity>
     d32:	aa 27       	eor	r26, r26
     d34:	97 fd       	sbrc	r25, 7
     d36:	a0 95       	com	r26
     d38:	ba 2f       	mov	r27, r26
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     d42:	60 93 2c 01 	sts	0x012C, r22
     d46:	70 93 2d 01 	sts	0x012D, r23
     d4a:	80 93 2e 01 	sts	0x012E, r24
     d4e:	90 93 2f 01 	sts	0x012F, r25
		
		float decelStepsUntilStop = curSpeed * curSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
     d52:	6d a1       	ldd	r22, Y+37	; 0x25
     d54:	7e a1       	ldd	r23, Y+38	; 0x26
     d56:	8f a1       	ldd	r24, Y+39	; 0x27
     d58:	98 a5       	ldd	r25, Y+40	; 0x28
     d5a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     d5e:	5b 01       	movw	r10, r22
     d60:	6c 01       	movw	r12, r24
     d62:	69 a5       	ldd	r22, Y+41	; 0x29
     d64:	7a a5       	ldd	r23, Y+42	; 0x2a
     d66:	8b a5       	ldd	r24, Y+43	; 0x2b
     d68:	9c a5       	ldd	r25, Y+44	; 0x2c
     d6a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     d6e:	3b 01       	movw	r6, r22
     d70:	4c 01       	movw	r8, r24
		
		//If we need to start deceleratings
		if(mouse.leftMotor.stepCount + decelStepsUntilStop >= stepTarget)
     d72:	60 91 10 01 	lds	r22, 0x0110
     d76:	70 91 11 01 	lds	r23, 0x0111
     d7a:	80 91 12 01 	lds	r24, 0x0112
     d7e:	90 91 13 01 	lds	r25, 0x0113
     d82:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     d86:	6d 8b       	std	Y+21, r22	; 0x15
     d88:	7e 8b       	std	Y+22, r23	; 0x16
     d8a:	8f 8b       	std	Y+23, r24	; 0x17
     d8c:	98 8f       	std	Y+24, r25	; 0x18
     d8e:	69 89       	ldd	r22, Y+17	; 0x11
     d90:	7a 89       	ldd	r23, Y+18	; 0x12
     d92:	8b 89       	ldd	r24, Y+19	; 0x13
     d94:	9c 89       	ldd	r25, Y+20	; 0x14
     d96:	9b 01       	movw	r18, r22
     d98:	ac 01       	movw	r20, r24
     d9a:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     d9e:	7b 01       	movw	r14, r22
     da0:	8c 01       	movw	r16, r24
     da2:	c6 01       	movw	r24, r12
     da4:	b5 01       	movw	r22, r10
     da6:	a6 01       	movw	r20, r12
     da8:	95 01       	movw	r18, r10
     daa:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c8 01       	movw	r24, r16
     db4:	b7 01       	movw	r22, r14
     db6:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divsf3>
     dba:	1b 01       	movw	r2, r22
     dbc:	2c 01       	movw	r4, r24
     dbe:	c4 01       	movw	r24, r8
     dc0:	b3 01       	movw	r22, r6
     dc2:	a4 01       	movw	r20, r8
     dc4:	93 01       	movw	r18, r6
     dc6:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     dca:	7b 01       	movw	r14, r22
     dcc:	8c 01       	movw	r16, r24
     dce:	c6 01       	movw	r24, r12
     dd0:	b5 01       	movw	r22, r10
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	50 ec       	ldi	r21, 0xC0	; 192
     dda:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     dde:	9b 01       	movw	r18, r22
     de0:	ac 01       	movw	r20, r24
     de2:	c8 01       	movw	r24, r16
     de4:	b7 01       	movw	r22, r14
     de6:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divsf3>
     dea:	9b 01       	movw	r18, r22
     dec:	ac 01       	movw	r20, r24
     dee:	c2 01       	movw	r24, r4
     df0:	b1 01       	movw	r22, r2
     df2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	6d 89       	ldd	r22, Y+21	; 0x15
     dfc:	7e 89       	ldd	r23, Y+22	; 0x16
     dfe:	8f 89       	ldd	r24, Y+23	; 0x17
     e00:	98 8d       	ldd	r25, Y+24	; 0x18
     e02:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     e06:	7b 01       	movw	r14, r22
     e08:	8c 01       	movw	r16, r24
     e0a:	69 85       	ldd	r22, Y+9	; 0x09
     e0c:	7a 85       	ldd	r23, Y+10	; 0x0a
     e0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e10:	9c 85       	ldd	r25, Y+12	; 0x0c
     e12:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     e16:	9b 01       	movw	r18, r22
     e18:	ac 01       	movw	r20, r24
     e1a:	c8 01       	movw	r24, r16
     e1c:	b7 01       	movw	r22, r14
     e1e:	0e 94 3d 10 	call	0x207a	; 0x207a <__gesf2>
     e22:	88 23       	and	r24, r24
     e24:	4c f0       	brlt	.+18     	; 0xe38 <straight+0x2cc>
		{
			maxSpeed = curSpeed;
     e26:	69 89       	ldd	r22, Y+17	; 0x11
     e28:	7a 89       	ldd	r23, Y+18	; 0x12
     e2a:	8b 89       	ldd	r24, Y+19	; 0x13
     e2c:	9c 89       	ldd	r25, Y+20	; 0x14
     e2e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
     e32:	7e a7       	std	Y+46, r23	; 0x2e
     e34:	6d a7       	std	Y+45, r22	; 0x2d
     e36:	5a c0       	rjmp	.+180    	; 0xeec <straight+0x380>
			break;
		}
		
		//If we're accelerating past our stepTarget;
		if(mouse.leftMotor.stepCount >= stepTarget)
     e38:	80 91 10 01 	lds	r24, 0x0110
     e3c:	90 91 11 01 	lds	r25, 0x0111
     e40:	a0 91 12 01 	lds	r26, 0x0112
     e44:	b0 91 13 01 	lds	r27, 0x0113
     e48:	29 85       	ldd	r18, Y+9	; 0x09
     e4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e4c:	4b 85       	ldd	r20, Y+11	; 0x0b
     e4e:	5c 85       	ldd	r21, Y+12	; 0x0c
     e50:	82 17       	cp	r24, r18
     e52:	93 07       	cpc	r25, r19
     e54:	a4 07       	cpc	r26, r20
     e56:	b5 07       	cpc	r27, r21
     e58:	0c f0       	brlt	.+2      	; 0xe5c <straight+0x2f0>
     e5a:	47 c1       	rjmp	.+654    	; 0x10ea <straight+0x57e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e5c:	80 ea       	ldi	r24, 0xA0	; 160
     e5e:	9f e0       	ldi	r25, 0x0F	; 15
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <straight+0x2f4>
void straight(long stepTarget, int inSpeed, int maxSpeed, int exitSpeed, int accel, int decel)
{
	unsigned long startTime = milliseconds;
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
     e64:	69 8d       	ldd	r22, Y+25	; 0x19
     e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     e70:	3b 01       	movw	r6, r22
     e72:	4c 01       	movw	r8, r24
     e74:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e76:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e78:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e7a:	98 a1       	ldd	r25, Y+32	; 0x20
     e7c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     e80:	5b 01       	movw	r10, r22
     e82:	6c 01       	movw	r12, r24
     e84:	60 91 06 01 	lds	r22, 0x0106
     e88:	70 91 07 01 	lds	r23, 0x0107
     e8c:	80 91 08 01 	lds	r24, 0x0108
     e90:	90 91 09 01 	lds	r25, 0x0109
     e94:	2d 81       	ldd	r18, Y+5	; 0x05
     e96:	3e 81       	ldd	r19, Y+6	; 0x06
     e98:	4f 81       	ldd	r20, Y+7	; 0x07
     e9a:	58 85       	ldd	r21, Y+8	; 0x08
     e9c:	62 1b       	sub	r22, r18
     e9e:	73 0b       	sbc	r23, r19
     ea0:	84 0b       	sbc	r24, r20
     ea2:	95 0b       	sbc	r25, r21
     ea4:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatunsisf>
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a e7       	ldi	r20, 0x7A	; 122
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divsf3>
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	c6 01       	movw	r24, r12
     eba:	b5 01       	movw	r22, r10
     ebc:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     ec0:	9b 01       	movw	r18, r22
     ec2:	ac 01       	movw	r20, r24
     ec4:	c4 01       	movw	r24, r8
     ec6:	b3 01       	movw	r22, r6
     ec8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     ecc:	7b 01       	movw	r14, r22
     ece:	8c 01       	movw	r16, r24
     ed0:	69 a1       	ldd	r22, Y+33	; 0x21
     ed2:	7a a1       	ldd	r23, Y+34	; 0x22
     ed4:	8b a1       	ldd	r24, Y+35	; 0x23
     ed6:	9c a1       	ldd	r25, Y+36	; 0x24
     ed8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     edc:	9b 01       	movw	r18, r22
     ede:	ac 01       	movw	r20, r24
     ee0:	c8 01       	movw	r24, r16
     ee2:	b7 01       	movw	r22, r14
     ee4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpsf2>
     ee8:	87 fd       	sbrc	r24, 7
     eea:	b7 ce       	rjmp	.-658    	; 0xc5a <straight+0xee>
		}
		_delay_ms(1);
	}	
	
	//Calculate when to start decelerating
	float decelSteps = (float)maxSpeed * (float)maxSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
     eec:	4d a5       	ldd	r20, Y+45	; 0x2d
     eee:	5e a5       	ldd	r21, Y+46	; 0x2e
     ef0:	ba 01       	movw	r22, r20
     ef2:	88 27       	eor	r24, r24
     ef4:	77 fd       	sbrc	r23, 7
     ef6:	80 95       	com	r24
     ef8:	98 2f       	mov	r25, r24
     efa:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     efe:	1b 01       	movw	r2, r22
     f00:	2c 01       	movw	r4, r24
     f02:	af 85       	ldd	r26, Y+15	; 0x0f
     f04:	b8 89       	ldd	r27, Y+16	; 0x10
     f06:	bd 01       	movw	r22, r26
     f08:	88 27       	eor	r24, r24
     f0a:	77 fd       	sbrc	r23, 7
     f0c:	80 95       	com	r24
     f0e:	98 2f       	mov	r25, r24
     f10:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     f14:	3b 01       	movw	r6, r22
     f16:	4c 01       	movw	r8, r24
     f18:	ed 85       	ldd	r30, Y+13	; 0x0d
     f1a:	fe 85       	ldd	r31, Y+14	; 0x0e
     f1c:	bf 01       	movw	r22, r30
     f1e:	88 27       	eor	r24, r24
     f20:	77 fd       	sbrc	r23, 7
     f22:	80 95       	com	r24
     f24:	98 2f       	mov	r25, r24
     f26:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     f2a:	69 83       	std	Y+1, r22	; 0x01
     f2c:	7a 83       	std	Y+2, r23	; 0x02
     f2e:	8b 83       	std	Y+3, r24	; 0x03
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	c2 01       	movw	r24, r4
     f34:	b1 01       	movw	r22, r2
     f36:	a2 01       	movw	r20, r4
     f38:	91 01       	movw	r18, r2
     f3a:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     f3e:	7b 01       	movw	r14, r22
     f40:	8c 01       	movw	r16, r24
     f42:	c4 01       	movw	r24, r8
     f44:	b3 01       	movw	r22, r6
     f46:	a4 01       	movw	r20, r8
     f48:	93 01       	movw	r18, r6
     f4a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     f4e:	9b 01       	movw	r18, r22
     f50:	ac 01       	movw	r20, r24
     f52:	c8 01       	movw	r24, r16
     f54:	b7 01       	movw	r22, r14
     f56:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divsf3>
     f5a:	5b 01       	movw	r10, r22
     f5c:	6c 01       	movw	r12, r24
     f5e:	69 81       	ldd	r22, Y+1	; 0x01
     f60:	7a 81       	ldd	r23, Y+2	; 0x02
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	9b 01       	movw	r18, r22
     f68:	ac 01       	movw	r20, r24
     f6a:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     f6e:	7b 01       	movw	r14, r22
     f70:	8c 01       	movw	r16, r24
     f72:	c4 01       	movw	r24, r8
     f74:	b3 01       	movw	r22, r6
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 ec       	ldi	r21, 0xC0	; 192
     f7e:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	c8 01       	movw	r24, r16
     f88:	b7 01       	movw	r22, r14
     f8a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divsf3>
     f8e:	9b 01       	movw	r18, r22
     f90:	ac 01       	movw	r20, r24
     f92:	c6 01       	movw	r24, r12
     f94:	b5 01       	movw	r22, r10
     f96:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     f9a:	5b 01       	movw	r10, r22
     f9c:	6c 01       	movw	r12, r24

	//Decelerate n stuff
	while(mouse.leftMotor.stepCount + decelSteps < stepTarget);
     f9e:	60 91 10 01 	lds	r22, 0x0110
     fa2:	70 91 11 01 	lds	r23, 0x0111
     fa6:	80 91 12 01 	lds	r24, 0x0112
     faa:	90 91 13 01 	lds	r25, 0x0113
     fae:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     fb2:	a6 01       	movw	r20, r12
     fb4:	95 01       	movw	r18, r10
     fb6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
     fba:	7b 01       	movw	r14, r22
     fbc:	8c 01       	movw	r16, r24
     fbe:	69 85       	ldd	r22, Y+9	; 0x09
     fc0:	7a 85       	ldd	r23, Y+10	; 0x0a
     fc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
     fce:	c8 01       	movw	r24, r16
     fd0:	b7 01       	movw	r22, r14
     fd2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpsf2>
     fd6:	87 fd       	sbrc	r24, 7
     fd8:	e2 cf       	rjmp	.-60     	; 0xf9e <straight+0x432>
	
	startTime = milliseconds;
     fda:	a0 90 06 01 	lds	r10, 0x0106
     fde:	b0 90 07 01 	lds	r11, 0x0107
     fe2:	c0 90 08 01 	lds	r12, 0x0108
     fe6:	d0 90 09 01 	lds	r13, 0x0109
     fea:	56 c0       	rjmp	.+172    	; 0x1098 <straight+0x52c>
		
	while(maxSpeed - decel*(float)((milliseconds-startTime)/1000.0) > exitSpeed)
	{
		float curSpeed = maxSpeed - decel*(float)((milliseconds-startTime)/1000.0);
     fec:	60 91 06 01 	lds	r22, 0x0106
     ff0:	70 91 07 01 	lds	r23, 0x0107
     ff4:	80 91 08 01 	lds	r24, 0x0108
     ff8:	90 91 09 01 	lds	r25, 0x0109
     ffc:	6a 19       	sub	r22, r10
     ffe:	7b 09       	sbc	r23, r11
    1000:	8c 09       	sbc	r24, r12
    1002:	9d 09       	sbc	r25, r13
    1004:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatunsisf>
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	4a e7       	ldi	r20, 0x7A	; 122
    100e:	54 ec       	ldi	r21, 0xC4	; 196
    1010:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divsf3>
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	c4 01       	movw	r24, r8
    101a:	b3 01       	movw	r22, r6
    101c:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
    1020:	9b 01       	movw	r18, r22
    1022:	ac 01       	movw	r20, r24
    1024:	c2 01       	movw	r24, r4
    1026:	b1 01       	movw	r22, r2
    1028:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
		
		mouse.velocity = curSpeed;
    102c:	60 93 4c 01 	sts	0x014C, r22
    1030:	70 93 4d 01 	sts	0x014D, r23
    1034:	80 93 4e 01 	sts	0x014E, r24
    1038:	90 93 4f 01 	sts	0x014F, r25
		mouse.leftMotor.currentStepDelay =  getDelayFromVelocity(curSpeed);
    103c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
    1040:	7b 01       	movw	r14, r22
    1042:	8c 01       	movw	r16, r24
    1044:	cb 01       	movw	r24, r22
    1046:	0e 94 ae 09 	call	0x135c	; 0x135c <getDelayFromVelocity>
    104a:	aa 27       	eor	r26, r26
    104c:	97 fd       	sbrc	r25, 7
    104e:	a0 95       	com	r26
    1050:	ba 2f       	mov	r27, r26
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
    105a:	60 93 14 01 	sts	0x0114, r22
    105e:	70 93 15 01 	sts	0x0115, r23
    1062:	80 93 16 01 	sts	0x0116, r24
    1066:	90 93 17 01 	sts	0x0117, r25
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed);
    106a:	c7 01       	movw	r24, r14
    106c:	0e 94 ae 09 	call	0x135c	; 0x135c <getDelayFromVelocity>
    1070:	aa 27       	eor	r26, r26
    1072:	97 fd       	sbrc	r25, 7
    1074:	a0 95       	com	r26
    1076:	ba 2f       	mov	r27, r26
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
    1080:	60 93 2c 01 	sts	0x012C, r22
    1084:	70 93 2d 01 	sts	0x012D, r23
    1088:	80 93 2e 01 	sts	0x012E, r24
    108c:	90 93 2f 01 	sts	0x012F, r25
    1090:	80 ea       	ldi	r24, 0xA0	; 160
    1092:	9f e0       	ldi	r25, 0x0F	; 15
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <straight+0x528>
	//Decelerate n stuff
	while(mouse.leftMotor.stepCount + decelSteps < stepTarget);
	
	startTime = milliseconds;
		
	while(maxSpeed - decel*(float)((milliseconds-startTime)/1000.0) > exitSpeed)
    1098:	60 91 06 01 	lds	r22, 0x0106
    109c:	70 91 07 01 	lds	r23, 0x0107
    10a0:	80 91 08 01 	lds	r24, 0x0108
    10a4:	90 91 09 01 	lds	r25, 0x0109
    10a8:	6a 19       	sub	r22, r10
    10aa:	7b 09       	sbc	r23, r11
    10ac:	8c 09       	sbc	r24, r12
    10ae:	9d 09       	sbc	r25, r13
    10b0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatunsisf>
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	4a e7       	ldi	r20, 0x7A	; 122
    10ba:	54 ec       	ldi	r21, 0xC4	; 196
    10bc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divsf3>
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	c4 01       	movw	r24, r8
    10c6:	b3 01       	movw	r22, r6
    10c8:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	c2 01       	movw	r24, r4
    10d2:	b1 01       	movw	r22, r2
    10d4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
    10d8:	29 81       	ldd	r18, Y+1	; 0x01
    10da:	3a 81       	ldd	r19, Y+2	; 0x02
    10dc:	4b 81       	ldd	r20, Y+3	; 0x03
    10de:	5c 81       	ldd	r21, Y+4	; 0x04
    10e0:	0e 94 3d 10 	call	0x207a	; 0x207a <__gesf2>
    10e4:	18 16       	cp	r1, r24
    10e6:	0c f4       	brge	.+2      	; 0x10ea <straight+0x57e>
    10e8:	81 cf       	rjmp	.-254    	; 0xfec <straight+0x480>
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed);
		
		_delay_ms(1);
	}

}
    10ea:	ae 96       	adiw	r28, 0x2e	; 46
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	7f 90       	pop	r7
    1110:	6f 90       	pop	r6
    1112:	5f 90       	pop	r5
    1114:	4f 90       	pop	r4
    1116:	3f 90       	pop	r3
    1118:	2f 90       	pop	r2
    111a:	08 95       	ret

0000111c <setupStepperMotor>:
}

void setupStepperMotor()
{
	//Motor Pins are D2 and D4 on arduino nano
	DDRD |= (1 << PORTD1) | (1 << PORTD2) | (1 << PORTD3);
    111c:	8a b1       	in	r24, 0x0a	; 10
    111e:	8e 60       	ori	r24, 0x0E	; 14
    1120:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB1) | (1 << PORTB0) | (1 << PORTB6) | (1 << PORTB7);
    1122:	84 b1       	in	r24, 0x04	; 4
    1124:	83 6c       	ori	r24, 0xC3	; 195
    1126:	84 b9       	out	0x04, r24	; 4
	
	//Set to CTC
	TCCR1B = (1 << WGM12);
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	80 93 81 00 	sts	0x0081, r24
	TCCR3B = (1 << WGM32);
    112e:	80 93 91 00 	sts	0x0091, r24
	
	//Compare Ticks
	OCR1A = 0;
    1132:	10 92 89 00 	sts	0x0089, r1
    1136:	10 92 88 00 	sts	0x0088, r1
	OCR3A = 0;
    113a:	10 92 99 00 	sts	0x0099, r1
    113e:	10 92 98 00 	sts	0x0098, r1
	
	//Enable Interrupts
	TIMSK1 = (1 << OCIE1A);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	80 93 6f 00 	sts	0x006F, r24
	TIMSK3 = (1 << OCIE3A);
    1148:	80 93 71 00 	sts	0x0071, r24
	
	//Set Prescalar to 0
	OCR1B = 0;
    114c:	10 92 8b 00 	sts	0x008B, r1
    1150:	10 92 8a 00 	sts	0x008A, r1
	OCR3B = 0;
    1154:	10 92 9b 00 	sts	0x009B, r1
    1158:	10 92 9a 00 	sts	0x009A, r1
	
	//Enable Interrupts
	sei(); 
    115c:	78 94       	sei
{
	
	if(left)
		PORTB &= ~(1 << PB6);
	else
		PORTB |= (1 << PB6);
    115e:	2e 9a       	sbi	0x05, 6	; 5
	
	//Enable Interrupts
	sei(); 
	
	enableDrive(0);	
}
    1160:	08 95       	ret

00001162 <enableDrive>:

void enableDrive(int left)
{
	
	if(left)
    1162:	89 2b       	or	r24, r25
    1164:	11 f0       	breq	.+4      	; 0x116a <enableDrive+0x8>
		PORTB &= ~(1 << PB6);
    1166:	2e 98       	cbi	0x05, 6	; 5
    1168:	08 95       	ret
	else
		PORTB |= (1 << PB6);
    116a:	2e 9a       	sbi	0x05, 6	; 5
    116c:	08 95       	ret

0000116e <pulseMotor>:
}

/* Pulse port and pin for 10 microseconds */
void pulseMotor(volatile uint8_t *port, uint8_t pin)
{
    116e:	fc 01       	movw	r30, r24
	//Send Pulse to Motor
	(*port) |= (1 << pin);
    1170:	20 81       	ld	r18, Z
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <pulseMotor+0xe>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	6a 95       	dec	r22
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <pulseMotor+0xa>
    1180:	28 2b       	or	r18, r24
    1182:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1184:	9a e1       	ldi	r25, 0x1A	; 26
    1186:	9a 95       	dec	r25
    1188:	f1 f7       	brne	.-4      	; 0x1186 <pulseMotor+0x18>
	_delay_us(5);
	(*port) &= ~(1 << pin);
    118a:	20 81       	ld	r18, Z
    118c:	80 95       	com	r24
    118e:	82 23       	and	r24, r18
    1190:	80 83       	st	Z, r24
}
    1192:	08 95       	ret

00001194 <__vector_32>:
	OCR1A = mouse.leftMotor.currentStepDelay;
}

/* RIGHT MOTOR CONTROL */
ISR(TIMER3_COMPA_vect)
{	
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
	//Pulse and increment motor
	pulseMotor(&PORTB, PB7);
    11b6:	85 e2       	ldi	r24, 0x25	; 37
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	67 e0       	ldi	r22, 0x07	; 7
    11bc:	0e 94 b7 08 	call	0x116e	; 0x116e <pulseMotor>
	mouse.rightMotor.stepCount++;
    11c0:	80 91 28 01 	lds	r24, 0x0128
    11c4:	90 91 29 01 	lds	r25, 0x0129
    11c8:	a0 91 2a 01 	lds	r26, 0x012A
    11cc:	b0 91 2b 01 	lds	r27, 0x012B
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	a1 1d       	adc	r26, r1
    11d4:	b1 1d       	adc	r27, r1
    11d6:	80 93 28 01 	sts	0x0128, r24
    11da:	90 93 29 01 	sts	0x0129, r25
    11de:	a0 93 2a 01 	sts	0x012A, r26
    11e2:	b0 93 2b 01 	sts	0x012B, r27

	OCR3A = mouse.rightMotor.currentStepDelay;
    11e6:	60 91 2c 01 	lds	r22, 0x012C
    11ea:	70 91 2d 01 	lds	r23, 0x012D
    11ee:	80 91 2e 01 	lds	r24, 0x012E
    11f2:	90 91 2f 01 	lds	r25, 0x012F
    11f6:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fixunssfsi>
    11fa:	70 93 99 00 	sts	0x0099, r23
    11fe:	60 93 98 00 	sts	0x0098, r22
}
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	bf 91       	pop	r27
    1208:	af 91       	pop	r26
    120a:	9f 91       	pop	r25
    120c:	8f 91       	pop	r24
    120e:	7f 91       	pop	r23
    1210:	6f 91       	pop	r22
    1212:	5f 91       	pop	r21
    1214:	4f 91       	pop	r20
    1216:	3f 91       	pop	r19
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <__vector_17>:

extern volatile Mouse mouse;

/* LEFT MOTOR CONTROL */
ISR(TIMER1_COMPA_vect)
{
    1224:	1f 92       	push	r1
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	0f 92       	push	r0
    122c:	11 24       	eor	r1, r1
    122e:	2f 93       	push	r18
    1230:	3f 93       	push	r19
    1232:	4f 93       	push	r20
    1234:	5f 93       	push	r21
    1236:	6f 93       	push	r22
    1238:	7f 93       	push	r23
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	ef 93       	push	r30
    1244:	ff 93       	push	r31
	pulseMotor(&PORTD, PD1);
    1246:	8b e2       	ldi	r24, 0x2B	; 43
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	0e 94 b7 08 	call	0x116e	; 0x116e <pulseMotor>
	mouse.leftMotor.stepCount++;		
    1250:	80 91 10 01 	lds	r24, 0x0110
    1254:	90 91 11 01 	lds	r25, 0x0111
    1258:	a0 91 12 01 	lds	r26, 0x0112
    125c:	b0 91 13 01 	lds	r27, 0x0113
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	a1 1d       	adc	r26, r1
    1264:	b1 1d       	adc	r27, r1
    1266:	80 93 10 01 	sts	0x0110, r24
    126a:	90 93 11 01 	sts	0x0111, r25
    126e:	a0 93 12 01 	sts	0x0112, r26
    1272:	b0 93 13 01 	sts	0x0113, r27

	OCR1A = mouse.leftMotor.currentStepDelay;
    1276:	60 91 14 01 	lds	r22, 0x0114
    127a:	70 91 15 01 	lds	r23, 0x0115
    127e:	80 91 16 01 	lds	r24, 0x0116
    1282:	90 91 17 01 	lds	r25, 0x0117
    1286:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fixunssfsi>
    128a:	70 93 89 00 	sts	0x0089, r23
    128e:	60 93 88 00 	sts	0x0088, r22
}
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <setDirection>:
	(*port) &= ~(1 << pin);
}

void setDirection(int left, int right)
{
	if(left)
    12b4:	89 2b       	or	r24, r25
    12b6:	11 f0       	breq	.+4      	; 0x12bc <setDirection+0x8>
		PORTD &= ~(1 << PD0);
    12b8:	58 98       	cbi	0x0b, 0	; 11
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <setDirection+0xa>
	else
		PORTD |= (1 << PD0);
    12bc:	58 9a       	sbi	0x0b, 0	; 11
		
	if(right)
    12be:	67 2b       	or	r22, r23
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <setDirection+0x12>
		PORTD |= (1 << PD6);
    12c2:	5e 9a       	sbi	0x0b, 6	; 11
    12c4:	08 95       	ret
	else
		PORTD &= ~(1 << PD6);
    12c6:	5e 98       	cbi	0x0b, 6	; 11
    12c8:	08 95       	ret

000012ca <eightBitTimerFix>:
}


int eightBitTimerFix(struct StepperMotor *motor)
{
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	ec 01       	movw	r28, r24
	
	int returnNum;

	if(motor->delayCounter <= 255)
    12d0:	68 85       	ldd	r22, Y+8	; 0x08
    12d2:	79 85       	ldd	r23, Y+9	; 0x09
    12d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4f e7       	ldi	r20, 0x7F	; 127
    12de:	53 e4       	ldi	r21, 0x43	; 67
    12e0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpsf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	7c f0       	brlt	.+30     	; 0x1306 <eightBitTimerFix+0x3c>
	{
		returnNum = motor->delayCounter;
    12e8:	68 85       	ldd	r22, Y+8	; 0x08
    12ea:	79 85       	ldd	r23, Y+9	; 0x09
    12ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__fixsfsi>
		motor->delayCounter = 0;	
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	88 87       	std	Y+8, r24	; 0x08
    12fe:	99 87       	std	Y+9, r25	; 0x09
    1300:	aa 87       	std	Y+10, r26	; 0x0a
    1302:	bb 87       	std	Y+11, r27	; 0x0b
    1304:	10 c0       	rjmp	.+32     	; 0x1326 <eightBitTimerFix+0x5c>
	}
	else
	{
		motor->delayCounter -= 255;
    1306:	68 85       	ldd	r22, Y+8	; 0x08
    1308:	79 85       	ldd	r23, Y+9	; 0x09
    130a:	8a 85       	ldd	r24, Y+10	; 0x0a
    130c:	9b 85       	ldd	r25, Y+11	; 0x0b
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	53 e4       	ldi	r21, 0x43	; 67
    1316:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__subsf3>
    131a:	68 87       	std	Y+8, r22	; 0x08
    131c:	79 87       	std	Y+9, r23	; 0x09
    131e:	8a 87       	std	Y+10, r24	; 0x0a
    1320:	9b 87       	std	Y+11, r25	; 0x0b
    1322:	6f ef       	ldi	r22, 0xFF	; 255
    1324:	70 e0       	ldi	r23, 0x00	; 0
		returnNum = 255;
	}
	return returnNum;
}
    1326:	cb 01       	movw	r24, r22
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <turnOnTimers>:

void turnOnTimers(int one, int two)
{
	if(one)
    132e:	89 2b       	or	r24, r25
    1330:	21 f0       	breq	.+8      	; 0x133a <turnOnTimers+0xc>
		TCCR1B |= (1 << CS11) | (1 << CS10);
    1332:	80 91 81 00 	lds	r24, 0x0081
    1336:	83 60       	ori	r24, 0x03	; 3
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <turnOnTimers+0x12>
	else
		TCCR1B &= ~((1 << CS11) | (1 << CS10));
    133a:	80 91 81 00 	lds	r24, 0x0081
    133e:	8c 7f       	andi	r24, 0xFC	; 252
    1340:	80 93 81 00 	sts	0x0081, r24
		
	if(two)
    1344:	67 2b       	or	r22, r23
    1346:	21 f0       	breq	.+8      	; 0x1350 <turnOnTimers+0x22>
		TCCR3B |= (1 << CS31) | (1 << CS30);
    1348:	80 91 91 00 	lds	r24, 0x0091
    134c:	83 60       	ori	r24, 0x03	; 3
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <turnOnTimers+0x28>
	else	
		TCCR3B &= ~((1 << CS31) | (1 << CS30));
    1350:	80 91 91 00 	lds	r24, 0x0091
    1354:	8c 7f       	andi	r24, 0xFC	; 252
    1356:	80 93 91 00 	sts	0x0091, r24
    135a:	08 95       	ret

0000135c <getDelayFromVelocity>:
}

int getDelayFromVelocity(int stepsPerSecond)
{
	if(stepsPerSecond < 10)
    135c:	8a 30       	cpi	r24, 0x0A	; 10
    135e:	91 05       	cpc	r25, r1
    1360:	1c f4       	brge	.+6      	; 0x1368 <getDelayFromVelocity+0xc>
    1362:	28 ea       	ldi	r18, 0xA8	; 168
    1364:	31 e6       	ldi	r19, 0x61	; 97
    1366:	0b c0       	rjmp	.+22     	; 0x137e <getDelayFromVelocity+0x22>
		return 25000;
	else
		return TIMER_FREQUENCY / stepsPerSecond;
    1368:	9c 01       	movw	r18, r24
    136a:	44 27       	eor	r20, r20
    136c:	37 fd       	sbrc	r19, 7
    136e:	40 95       	com	r20
    1370:	54 2f       	mov	r21, r20
    1372:	60 e9       	ldi	r22, 0x90	; 144
    1374:	70 ed       	ldi	r23, 0xD0	; 208
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 1c 11 	call	0x2238	; 0x2238 <__divmodsi4>
}
    137e:	c9 01       	movw	r24, r18
    1380:	08 95       	ret

00001382 <turnOnLeds>:
	return !(ReadADC(analogChannel) > 512);
}

void turnOnLeds(int num)
{
	if((num & 4) == 4)	
    1382:	82 ff       	sbrs	r24, 2
    1384:	02 c0       	rjmp	.+4      	; 0x138a <turnOnLeds+0x8>
		PORTE |= (1 << PE6);
    1386:	76 9a       	sbi	0x0e, 6	; 14
    1388:	01 c0       	rjmp	.+2      	; 0x138c <turnOnLeds+0xa>
	
	else
		PORTE &= ~(1 << PE6);
    138a:	76 98       	cbi	0x0e, 6	; 14
		
	if((num & 2) == 2)
    138c:	81 ff       	sbrs	r24, 1
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <turnOnLeds+0x12>
		PORTB |= (1 << PB5);
    1390:	2d 9a       	sbi	0x05, 5	; 5
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <turnOnLeds+0x14>
		
	else
		PORTB &= ~(1 << PB5);
    1394:	2d 98       	cbi	0x05, 5	; 5
		
	if((num & 1) == 1)
    1396:	80 ff       	sbrs	r24, 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <turnOnLeds+0x1c>
		PORTB |= (1 << PB4);
    139a:	2c 9a       	sbi	0x05, 4	; 5
    139c:	08 95       	ret
		
	else
		PORTB &= ~(1 << PB4);
    139e:	2c 98       	cbi	0x05, 4	; 5
    13a0:	08 95       	ret

000013a2 <setupADC>:

/* Setup Analog To Digital Converter */
void setupADC()
{
	//Setup Registers
	ADMUX = (1 << REFS0);// | (1 << MUX0) | (1 << MUX1) | (1 << MUX2);
    13a2:	80 e4       	ldi	r24, 0x40	; 64
    13a4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (ADPS0) | (1 << ADPS1) | (1 << ADPS2);	
    13a8:	86 e8       	ldi	r24, 0x86	; 134
    13aa:	80 93 7a 00 	sts	0x007A, r24
	
	//IR Triggers
	DDRD |= (1 << PORTD4) | (1 << PORTD7);
    13ae:	8a b1       	in	r24, 0x0a	; 10
    13b0:	80 69       	ori	r24, 0x90	; 144
    13b2:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << PORTC6);
    13b4:	3e 9a       	sbi	0x07, 6	; 7
	
	//LED's
	DDRB |= (1 << PORTB4);
    13b6:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1 << PORTB5);
    13b8:	25 9a       	sbi	0x04, 5	; 4
	DDRE |= (1 << PORTE6);	
    13ba:	6e 9a       	sbi	0x0d, 6	; 13
}
    13bc:	08 95       	ret

000013be <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX= (1 << REFS0) | ch;
    13be:	87 70       	andi	r24, 0x07	; 7
    13c0:	80 64       	ori	r24, 0x40	; 64
    13c2:	80 93 7c 00 	sts	0x007C, r24

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
    13c6:	80 91 7a 00 	lds	r24, 0x007A
    13ca:	80 64       	ori	r24, 0x40	; 64
    13cc:	80 93 7a 00 	sts	0x007A, r24
	
   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
    13d0:	80 91 7a 00 	lds	r24, 0x007A
    13d4:	84 ff       	sbrs	r24, 4
    13d6:	fc cf       	rjmp	.-8      	; 0x13d0 <ReadADC+0x12>

   ADCSRA|=(1<<ADIF);
    13d8:	80 91 7a 00 	lds	r24, 0x007A
    13dc:	80 61       	ori	r24, 0x10	; 16
    13de:	80 93 7a 00 	sts	0x007A, r24

   return(ADC);
    13e2:	20 91 78 00 	lds	r18, 0x0078
    13e6:	30 91 79 00 	lds	r19, 0x0079
}
    13ea:	c9 01       	movw	r24, r18
    13ec:	08 95       	ret

000013ee <isButtonPushed>:
	return ReadADC(analogChannel);
}

int isButtonPushed(int analogChannel)
{
	return !(ReadADC(analogChannel) > 512);
    13ee:	0e 94 df 09 	call	0x13be	; 0x13be <ReadADC>
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 50       	subi	r24, 0x01	; 1
    13f8:	92 40       	sbci	r25, 0x02	; 2
    13fa:	10 f4       	brcc	.+4      	; 0x1400 <isButtonPushed+0x12>
    13fc:	21 e0       	ldi	r18, 0x01	; 1
    13fe:	30 e0       	ldi	r19, 0x00	; 0
}
    1400:	c9 01       	movw	r24, r18
    1402:	08 95       	ret

00001404 <getPotSensorValue>:
	return emit;	
}

int getPotSensorValue(int analogChannel)
{ 
	return ReadADC(analogChannel);
    1404:	0e 94 df 09 	call	0x13be	; 0x13be <ReadADC>
}
    1408:	08 95       	ret

0000140a <getIRSensorValue>:
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD4, 5) );
}

int getIRSensorValue(volatile uint8_t *port, uint8_t pin, int analogChannel)
{
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	7c 01       	movw	r14, r24
    1418:	84 2f       	mov	r24, r20
	//Turn on Emitter
	(*port) |= (1 << pin);
    141a:	f7 01       	movw	r30, r14
    141c:	90 81       	ld	r25, Z
    141e:	01 e0       	ldi	r16, 0x01	; 1
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <getIRSensorValue+0x1e>
    1424:	00 0f       	add	r16, r16
    1426:	11 1f       	adc	r17, r17
    1428:	6a 95       	dec	r22
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <getIRSensorValue+0x1a>
    142c:	90 2b       	or	r25, r16
    142e:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1430:	90 e4       	ldi	r25, 0x40	; 64
    1432:	c9 2e       	mov	r12, r25
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	d9 2e       	mov	r13, r25
    1438:	f6 01       	movw	r30, r12
    143a:	31 97       	sbiw	r30, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <getIRSensorValue+0x30>
	
	_delay_us(80);
	
	int emit = ReadADC(analogChannel);
    143e:	0e 94 df 09 	call	0x13be	; 0x13be <ReadADC>
	
	//Turn off Emitter
	(*port) &= ~(1 << pin);
    1442:	f7 01       	movw	r30, r14
    1444:	20 81       	ld	r18, Z
    1446:	00 95       	com	r16
    1448:	02 23       	and	r16, r18
    144a:	00 83       	st	Z, r16
    144c:	f6 01       	movw	r30, r12
    144e:	31 97       	sbiw	r30, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <getIRSensorValue+0x44>
	
	_delay_us(80);
	
	return emit;	
}
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	08 95       	ret

00001460 <linearizeIRSensorValues>:
   return(ADC);
}

float linearizeIRSensorValues(float input)
{
	return -6.0220498115*log( input ) + 43.5411429577;
    1460:	0e 94 46 10 	call	0x208c	; 0x208c <log>
    1464:	22 ea       	ldi	r18, 0xA2	; 162
    1466:	34 eb       	ldi	r19, 0xB4	; 180
    1468:	40 ec       	ldi	r20, 0xC0	; 192
    146a:	50 ec       	ldi	r21, 0xC0	; 192
    146c:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3>
    1470:	21 e2       	ldi	r18, 0x21	; 33
    1472:	3a e2       	ldi	r19, 0x2A	; 42
    1474:	4e e2       	ldi	r20, 0x2E	; 46
    1476:	52 e4       	ldi	r21, 0x42	; 66
    1478:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3>
}
    147c:	08 95       	ret

0000147e <getFrontIR>:
	return linearizeIRSensorValues( getIRSensorValue(&PORTC, PC6, 4) );
}

float getFrontIR()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD4, 5) );
    147e:	8b e2       	ldi	r24, 0x2B	; 43
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	64 e0       	ldi	r22, 0x04	; 4
    1484:	45 e0       	ldi	r20, 0x05	; 5
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	0e 94 05 0a 	call	0x140a	; 0x140a <getIRSensorValue>
    148c:	aa 27       	eor	r26, r26
    148e:	97 fd       	sbrc	r25, 7
    1490:	a0 95       	com	r26
    1492:	ba 2f       	mov	r27, r26
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
    149c:	0e 94 30 0a 	call	0x1460	; 0x1460 <linearizeIRSensorValues>
}
    14a0:	08 95       	ret

000014a2 <getRightIR>:
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD7, 6) );
}

float getRightIR()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTC, PC6, 4) );
    14a2:	88 e2       	ldi	r24, 0x28	; 40
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	66 e0       	ldi	r22, 0x06	; 6
    14a8:	44 e0       	ldi	r20, 0x04	; 4
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	0e 94 05 0a 	call	0x140a	; 0x140a <getIRSensorValue>
    14b0:	aa 27       	eor	r26, r26
    14b2:	97 fd       	sbrc	r25, 7
    14b4:	a0 95       	com	r26
    14b6:	ba 2f       	mov	r27, r26
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
    14c0:	0e 94 30 0a 	call	0x1460	; 0x1460 <linearizeIRSensorValues>
}
    14c4:	08 95       	ret

000014c6 <getLeftIR>:

#include "RobotModel_Sensors.h"

float getLeftIR()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD7, 6) );
    14c6:	8b e2       	ldi	r24, 0x2B	; 43
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	67 e0       	ldi	r22, 0x07	; 7
    14cc:	46 e0       	ldi	r20, 0x06	; 6
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	0e 94 05 0a 	call	0x140a	; 0x140a <getIRSensorValue>
    14d4:	aa 27       	eor	r26, r26
    14d6:	97 fd       	sbrc	r25, 7
    14d8:	a0 95       	com	r26
    14da:	ba 2f       	mov	r27, r26
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
    14e4:	0e 94 30 0a 	call	0x1460	; 0x1460 <linearizeIRSensorValues>
}
    14e8:	08 95       	ret

000014ea <USART_init>:
void USART_putstring(char* StringPtr);
 
 
void USART_init(void){
 
 UBRR1H = (uint8_t)(BAUD_PRESCALLER>>8);
    14ea:	10 92 cd 00 	sts	0x00CD, r1
 UBRR1L = (uint8_t)(BAUD_PRESCALLER);
    14ee:	87 e6       	ldi	r24, 0x67	; 103
    14f0:	80 93 cc 00 	sts	0x00CC, r24
 UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    14f4:	88 e1       	ldi	r24, 0x18	; 24
    14f6:	80 93 c9 00 	sts	0x00C9, r24
 UCSR1C = (3<<UCSZ10);
    14fa:	86 e0       	ldi	r24, 0x06	; 6
    14fc:	80 93 ca 00 	sts	0x00CA, r24
}
    1500:	08 95       	ret

00001502 <USART_receive>:
 
unsigned char USART_receive(void){
 
 while(!(UCSR1A & (1<<RXC1)));
    1502:	80 91 c8 00 	lds	r24, 0x00C8
    1506:	87 ff       	sbrs	r24, 7
    1508:	fc cf       	rjmp	.-8      	; 0x1502 <USART_receive>
 return UDR1;
    150a:	80 91 ce 00 	lds	r24, 0x00CE
 
}
    150e:	08 95       	ret

00001510 <USART_send>:
 
void USART_send( unsigned char data){
    1510:	98 2f       	mov	r25, r24
 
 while(!(UCSR1A & (1<<UDRE1)));
    1512:	80 91 c8 00 	lds	r24, 0x00C8
    1516:	85 ff       	sbrs	r24, 5
    1518:	fc cf       	rjmp	.-8      	; 0x1512 <USART_send+0x2>
 UDR1 = data;
    151a:	90 93 ce 00 	sts	0x00CE, r25
 
}
    151e:	08 95       	ret

00001520 <USART_putstring>:
 
void USART_putstring(char* StringPtr){
    1520:	fc 01       	movw	r30, r24
    1522:	07 c0       	rjmp	.+14     	; 0x1532 <USART_putstring+0x12>
 
}
 
void USART_send( unsigned char data){
 
 while(!(UCSR1A & (1<<UDRE1)));
    1524:	80 91 c8 00 	lds	r24, 0x00C8
    1528:	85 ff       	sbrs	r24, 5
    152a:	fc cf       	rjmp	.-8      	; 0x1524 <USART_putstring+0x4>
 UDR1 = data;
    152c:	90 93 ce 00 	sts	0x00CE, r25
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
 USART_send(*StringPtr);
 StringPtr++;}
    1530:	31 96       	adiw	r30, 0x01	; 1
 
}
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
    1532:	90 81       	ld	r25, Z
    1534:	99 23       	and	r25, r25
    1536:	b1 f7       	brne	.-20     	; 0x1524 <USART_putstring+0x4>
 USART_send(*StringPtr);
 StringPtr++;}
 
}
    1538:	08 95       	ret

0000153a <print>:
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial
}

void print(char* string)
{
	USART_putstring(string);
    153a:	0e 94 90 0a 	call	0x1520	; 0x1520 <USART_putstring>
    153e:	08 95       	ret

00001540 <printNum>:
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial  
	USART_putstring("\n\r");
}

void printNum(float value)
{
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
	sprintf(str,"%f",value);
    1544:	2d b7       	in	r18, 0x3d	; 61
    1546:	3e b7       	in	r19, 0x3e	; 62
    1548:	28 50       	subi	r18, 0x08	; 8
    154a:	30 40       	sbci	r19, 0x00	; 0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	3e bf       	out	0x3e, r19	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	2d bf       	out	0x3d, r18	; 61
    1556:	ed b7       	in	r30, 0x3d	; 61
    1558:	fe b7       	in	r31, 0x3e	; 62
    155a:	31 96       	adiw	r30, 0x01	; 1
    155c:	0c e5       	ldi	r16, 0x5C	; 92
    155e:	11 e0       	ldi	r17, 0x01	; 1
    1560:	ad b7       	in	r26, 0x3d	; 61
    1562:	be b7       	in	r27, 0x3e	; 62
    1564:	12 96       	adiw	r26, 0x02	; 2
    1566:	1c 93       	st	X, r17
    1568:	0e 93       	st	-X, r16
    156a:	11 97       	sbiw	r26, 0x01	; 1
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	31 e0       	ldi	r19, 0x01	; 1
    1570:	33 83       	std	Z+3, r19	; 0x03
    1572:	22 83       	std	Z+2, r18	; 0x02
    1574:	64 83       	std	Z+4, r22	; 0x04
    1576:	75 83       	std	Z+5, r23	; 0x05
    1578:	86 83       	std	Z+6, r24	; 0x06
    157a:	97 83       	std	Z+7, r25	; 0x07
    157c:	0e 94 aa 12 	call	0x2554	; 0x2554 <sprintf>
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial
    1580:	2d b7       	in	r18, 0x3d	; 61
    1582:	3e b7       	in	r19, 0x3e	; 62
    1584:	28 5f       	subi	r18, 0xF8	; 248
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	3e bf       	out	0x3e, r19	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	2d bf       	out	0x3d, r18	; 61
    1592:	c8 01       	movw	r24, r16
    1594:	0e 94 90 0a 	call	0x1520	; 0x1520 <USART_putstring>
}
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <printlnNum>:
 
}

char str[16];
void printlnNum(double value)
{
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
	sprintf(str,"%f",value);
    15a2:	2d b7       	in	r18, 0x3d	; 61
    15a4:	3e b7       	in	r19, 0x3e	; 62
    15a6:	28 50       	subi	r18, 0x08	; 8
    15a8:	30 40       	sbci	r19, 0x00	; 0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	3e bf       	out	0x3e, r19	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	2d bf       	out	0x3d, r18	; 61
    15b4:	ed b7       	in	r30, 0x3d	; 61
    15b6:	fe b7       	in	r31, 0x3e	; 62
    15b8:	31 96       	adiw	r30, 0x01	; 1
    15ba:	0c e5       	ldi	r16, 0x5C	; 92
    15bc:	11 e0       	ldi	r17, 0x01	; 1
    15be:	ad b7       	in	r26, 0x3d	; 61
    15c0:	be b7       	in	r27, 0x3e	; 62
    15c2:	12 96       	adiw	r26, 0x02	; 2
    15c4:	1c 93       	st	X, r17
    15c6:	0e 93       	st	-X, r16
    15c8:	11 97       	sbiw	r26, 0x01	; 1
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	31 e0       	ldi	r19, 0x01	; 1
    15ce:	33 83       	std	Z+3, r19	; 0x03
    15d0:	22 83       	std	Z+2, r18	; 0x02
    15d2:	64 83       	std	Z+4, r22	; 0x04
    15d4:	75 83       	std	Z+5, r23	; 0x05
    15d6:	86 83       	std	Z+6, r24	; 0x06
    15d8:	97 83       	std	Z+7, r25	; 0x07
    15da:	0e 94 aa 12 	call	0x2554	; 0x2554 <sprintf>
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial  
    15de:	2d b7       	in	r18, 0x3d	; 61
    15e0:	3e b7       	in	r19, 0x3e	; 62
    15e2:	28 5f       	subi	r18, 0xF8	; 248
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	3e bf       	out	0x3e, r19	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	2d bf       	out	0x3d, r18	; 61
    15f0:	c8 01       	movw	r24, r16
    15f2:	0e 94 90 0a 	call	0x1520	; 0x1520 <USART_putstring>
	USART_putstring("\n\r");
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0e 94 90 0a 	call	0x1520	; 0x1520 <USART_putstring>
}
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <vfprintf>:
    1604:	a1 e1       	ldi	r26, 0x11	; 17
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e8 e0       	ldi	r30, 0x08	; 8
    160a:	fb e0       	ldi	r31, 0x0B	; 11
    160c:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__>
    1610:	3c 01       	movw	r6, r24
    1612:	7f 87       	std	Y+15, r23	; 0x0f
    1614:	6e 87       	std	Y+14, r22	; 0x0e
    1616:	6a 01       	movw	r12, r20
    1618:	fc 01       	movw	r30, r24
    161a:	17 82       	std	Z+7, r1	; 0x07
    161c:	16 82       	std	Z+6, r1	; 0x06
    161e:	83 81       	ldd	r24, Z+3	; 0x03
    1620:	81 fd       	sbrc	r24, 1
    1622:	03 c0       	rjmp	.+6      	; 0x162a <vfprintf+0x26>
    1624:	6f ef       	ldi	r22, 0xFF	; 255
    1626:	7f ef       	ldi	r23, 0xFF	; 255
    1628:	6f c3       	rjmp	.+1758   	; 0x1d08 <vfprintf+0x704>
    162a:	9e 01       	movw	r18, r28
    162c:	2f 5f       	subi	r18, 0xFF	; 255
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	39 8b       	std	Y+17, r19	; 0x11
    1632:	28 8b       	std	Y+16, r18	; 0x10
    1634:	f3 01       	movw	r30, r6
    1636:	23 81       	ldd	r18, Z+3	; 0x03
    1638:	ee 85       	ldd	r30, Y+14	; 0x0e
    163a:	ff 85       	ldd	r31, Y+15	; 0x0f
    163c:	23 fd       	sbrc	r18, 3
    163e:	85 91       	lpm	r24, Z+
    1640:	23 ff       	sbrs	r18, 3
    1642:	81 91       	ld	r24, Z+
    1644:	ff 87       	std	Y+15, r31	; 0x0f
    1646:	ee 87       	std	Y+14, r30	; 0x0e
    1648:	88 23       	and	r24, r24
    164a:	09 f4       	brne	.+2      	; 0x164e <vfprintf+0x4a>
    164c:	5a c3       	rjmp	.+1716   	; 0x1d02 <vfprintf+0x6fe>
    164e:	85 32       	cpi	r24, 0x25	; 37
    1650:	51 f4       	brne	.+20     	; 0x1666 <vfprintf+0x62>
    1652:	ee 85       	ldd	r30, Y+14	; 0x0e
    1654:	ff 85       	ldd	r31, Y+15	; 0x0f
    1656:	23 fd       	sbrc	r18, 3
    1658:	85 91       	lpm	r24, Z+
    165a:	23 ff       	sbrs	r18, 3
    165c:	81 91       	ld	r24, Z+
    165e:	ff 87       	std	Y+15, r31	; 0x0f
    1660:	ee 87       	std	Y+14, r30	; 0x0e
    1662:	85 32       	cpi	r24, 0x25	; 37
    1664:	29 f4       	brne	.+10     	; 0x1670 <vfprintf+0x6c>
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	b3 01       	movw	r22, r6
    166a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    166e:	e2 cf       	rjmp	.-60     	; 0x1634 <vfprintf+0x30>
    1670:	98 2f       	mov	r25, r24
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	88 24       	eor	r8, r8
    1676:	99 24       	eor	r9, r9
    1678:	10 32       	cpi	r17, 0x20	; 32
    167a:	b0 f4       	brcc	.+44     	; 0x16a8 <vfprintf+0xa4>
    167c:	9b 32       	cpi	r25, 0x2B	; 43
    167e:	69 f0       	breq	.+26     	; 0x169a <vfprintf+0x96>
    1680:	9c 32       	cpi	r25, 0x2C	; 44
    1682:	28 f4       	brcc	.+10     	; 0x168e <vfprintf+0x8a>
    1684:	90 32       	cpi	r25, 0x20	; 32
    1686:	51 f0       	breq	.+20     	; 0x169c <vfprintf+0x98>
    1688:	93 32       	cpi	r25, 0x23	; 35
    168a:	71 f4       	brne	.+28     	; 0x16a8 <vfprintf+0xa4>
    168c:	0b c0       	rjmp	.+22     	; 0x16a4 <vfprintf+0xa0>
    168e:	9d 32       	cpi	r25, 0x2D	; 45
    1690:	39 f0       	breq	.+14     	; 0x16a0 <vfprintf+0x9c>
    1692:	90 33       	cpi	r25, 0x30	; 48
    1694:	49 f4       	brne	.+18     	; 0x16a8 <vfprintf+0xa4>
    1696:	11 60       	ori	r17, 0x01	; 1
    1698:	28 c0       	rjmp	.+80     	; 0x16ea <vfprintf+0xe6>
    169a:	12 60       	ori	r17, 0x02	; 2
    169c:	14 60       	ori	r17, 0x04	; 4
    169e:	25 c0       	rjmp	.+74     	; 0x16ea <vfprintf+0xe6>
    16a0:	18 60       	ori	r17, 0x08	; 8
    16a2:	23 c0       	rjmp	.+70     	; 0x16ea <vfprintf+0xe6>
    16a4:	10 61       	ori	r17, 0x10	; 16
    16a6:	21 c0       	rjmp	.+66     	; 0x16ea <vfprintf+0xe6>
    16a8:	17 fd       	sbrc	r17, 7
    16aa:	2a c0       	rjmp	.+84     	; 0x1700 <vfprintf+0xfc>
    16ac:	89 2f       	mov	r24, r25
    16ae:	80 53       	subi	r24, 0x30	; 48
    16b0:	8a 30       	cpi	r24, 0x0A	; 10
    16b2:	78 f4       	brcc	.+30     	; 0x16d2 <vfprintf+0xce>
    16b4:	16 ff       	sbrs	r17, 6
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <vfprintf+0xc0>
    16b8:	fa e0       	ldi	r31, 0x0A	; 10
    16ba:	9f 9e       	mul	r9, r31
    16bc:	90 2c       	mov	r9, r0
    16be:	11 24       	eor	r1, r1
    16c0:	98 0e       	add	r9, r24
    16c2:	13 c0       	rjmp	.+38     	; 0x16ea <vfprintf+0xe6>
    16c4:	3a e0       	ldi	r19, 0x0A	; 10
    16c6:	83 9e       	mul	r8, r19
    16c8:	80 2c       	mov	r8, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	88 0e       	add	r8, r24
    16ce:	10 62       	ori	r17, 0x20	; 32
    16d0:	0c c0       	rjmp	.+24     	; 0x16ea <vfprintf+0xe6>
    16d2:	9e 32       	cpi	r25, 0x2E	; 46
    16d4:	21 f4       	brne	.+8      	; 0x16de <vfprintf+0xda>
    16d6:	16 fd       	sbrc	r17, 6
    16d8:	14 c3       	rjmp	.+1576   	; 0x1d02 <vfprintf+0x6fe>
    16da:	10 64       	ori	r17, 0x40	; 64
    16dc:	06 c0       	rjmp	.+12     	; 0x16ea <vfprintf+0xe6>
    16de:	9c 36       	cpi	r25, 0x6C	; 108
    16e0:	11 f4       	brne	.+4      	; 0x16e6 <vfprintf+0xe2>
    16e2:	10 68       	ori	r17, 0x80	; 128
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <vfprintf+0xe6>
    16e6:	98 36       	cpi	r25, 0x68	; 104
    16e8:	59 f4       	brne	.+22     	; 0x1700 <vfprintf+0xfc>
    16ea:	ee 85       	ldd	r30, Y+14	; 0x0e
    16ec:	ff 85       	ldd	r31, Y+15	; 0x0f
    16ee:	23 fd       	sbrc	r18, 3
    16f0:	95 91       	lpm	r25, Z+
    16f2:	23 ff       	sbrs	r18, 3
    16f4:	91 91       	ld	r25, Z+
    16f6:	ff 87       	std	Y+15, r31	; 0x0f
    16f8:	ee 87       	std	Y+14, r30	; 0x0e
    16fa:	99 23       	and	r25, r25
    16fc:	09 f0       	breq	.+2      	; 0x1700 <vfprintf+0xfc>
    16fe:	bc cf       	rjmp	.-136    	; 0x1678 <vfprintf+0x74>
    1700:	89 2f       	mov	r24, r25
    1702:	85 54       	subi	r24, 0x45	; 69
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	20 f4       	brcc	.+8      	; 0x1710 <vfprintf+0x10c>
    1708:	81 2f       	mov	r24, r17
    170a:	80 61       	ori	r24, 0x10	; 16
    170c:	90 5e       	subi	r25, 0xE0	; 224
    170e:	07 c0       	rjmp	.+14     	; 0x171e <vfprintf+0x11a>
    1710:	89 2f       	mov	r24, r25
    1712:	85 56       	subi	r24, 0x65	; 101
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	08 f0       	brcs	.+2      	; 0x171a <vfprintf+0x116>
    1718:	9f c1       	rjmp	.+830    	; 0x1a58 <vfprintf+0x454>
    171a:	81 2f       	mov	r24, r17
    171c:	8f 7e       	andi	r24, 0xEF	; 239
    171e:	86 fd       	sbrc	r24, 6
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <vfprintf+0x122>
    1722:	76 e0       	ldi	r23, 0x06	; 6
    1724:	97 2e       	mov	r9, r23
    1726:	6f e3       	ldi	r22, 0x3F	; 63
    1728:	f6 2e       	mov	r15, r22
    172a:	f8 22       	and	r15, r24
    172c:	95 36       	cpi	r25, 0x65	; 101
    172e:	19 f4       	brne	.+6      	; 0x1736 <vfprintf+0x132>
    1730:	f0 e4       	ldi	r31, 0x40	; 64
    1732:	ff 2a       	or	r15, r31
    1734:	07 c0       	rjmp	.+14     	; 0x1744 <vfprintf+0x140>
    1736:	96 36       	cpi	r25, 0x66	; 102
    1738:	19 f4       	brne	.+6      	; 0x1740 <vfprintf+0x13c>
    173a:	20 e8       	ldi	r18, 0x80	; 128
    173c:	f2 2a       	or	r15, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x140>
    1740:	91 10       	cpse	r9, r1
    1742:	9a 94       	dec	r9
    1744:	f7 fe       	sbrs	r15, 7
    1746:	0a c0       	rjmp	.+20     	; 0x175c <vfprintf+0x158>
    1748:	3b e3       	ldi	r19, 0x3B	; 59
    174a:	39 15       	cp	r19, r9
    174c:	18 f4       	brcc	.+6      	; 0x1754 <vfprintf+0x150>
    174e:	5c e3       	ldi	r21, 0x3C	; 60
    1750:	b5 2e       	mov	r11, r21
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x154>
    1754:	b9 2c       	mov	r11, r9
    1756:	b3 94       	inc	r11
    1758:	27 e0       	ldi	r18, 0x07	; 7
    175a:	09 c0       	rjmp	.+18     	; 0x176e <vfprintf+0x16a>
    175c:	47 e0       	ldi	r20, 0x07	; 7
    175e:	49 15       	cp	r20, r9
    1760:	20 f4       	brcc	.+8      	; 0x176a <vfprintf+0x166>
    1762:	bb 24       	eor	r11, r11
    1764:	47 e0       	ldi	r20, 0x07	; 7
    1766:	94 2e       	mov	r9, r20
    1768:	f7 cf       	rjmp	.-18     	; 0x1758 <vfprintf+0x154>
    176a:	29 2d       	mov	r18, r9
    176c:	bb 24       	eor	r11, r11
    176e:	c6 01       	movw	r24, r12
    1770:	04 96       	adiw	r24, 0x04	; 4
    1772:	9d 87       	std	Y+13, r25	; 0x0d
    1774:	8c 87       	std	Y+12, r24	; 0x0c
    1776:	f6 01       	movw	r30, r12
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	ae 01       	movw	r20, r28
    1782:	4f 5f       	subi	r20, 0xFF	; 255
    1784:	5f 4f       	sbci	r21, 0xFF	; 255
    1786:	0b 2d       	mov	r16, r11
    1788:	0e 94 90 11 	call	0x2320	; 0x2320 <__ftoa_engine>
    178c:	6c 01       	movw	r12, r24
    178e:	09 81       	ldd	r16, Y+1	; 0x01
    1790:	20 2e       	mov	r2, r16
    1792:	33 24       	eor	r3, r3
    1794:	00 ff       	sbrs	r16, 0
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <vfprintf+0x19c>
    1798:	03 fd       	sbrc	r16, 3
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <vfprintf+0x19c>
    179c:	1d e2       	ldi	r17, 0x2D	; 45
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <vfprintf+0x1ae>
    17a0:	f1 fe       	sbrs	r15, 1
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfprintf+0x1a4>
    17a4:	1b e2       	ldi	r17, 0x2B	; 43
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <vfprintf+0x1ae>
    17a8:	f2 fc       	sbrc	r15, 2
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <vfprintf+0x1ac>
    17ac:	10 e0       	ldi	r17, 0x00	; 0
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <vfprintf+0x1ae>
    17b0:	10 e2       	ldi	r17, 0x20	; 32
    17b2:	c1 01       	movw	r24, r2
    17b4:	8c 70       	andi	r24, 0x0C	; 12
    17b6:	90 70       	andi	r25, 0x00	; 0
    17b8:	89 2b       	or	r24, r25
    17ba:	b9 f1       	breq	.+110    	; 0x182a <vfprintf+0x226>
    17bc:	11 23       	and	r17, r17
    17be:	11 f4       	brne	.+4      	; 0x17c4 <vfprintf+0x1c0>
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <vfprintf+0x1c2>
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	88 15       	cp	r24, r8
    17c8:	10 f0       	brcs	.+4      	; 0x17ce <vfprintf+0x1ca>
    17ca:	88 24       	eor	r8, r8
    17cc:	0a c0       	rjmp	.+20     	; 0x17e2 <vfprintf+0x1de>
    17ce:	88 1a       	sub	r8, r24
    17d0:	f3 fc       	sbrc	r15, 3
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <vfprintf+0x1de>
    17d4:	80 e2       	ldi	r24, 0x20	; 32
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	b3 01       	movw	r22, r6
    17da:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    17de:	8a 94       	dec	r8
    17e0:	c9 f7       	brne	.-14     	; 0x17d4 <vfprintf+0x1d0>
    17e2:	11 23       	and	r17, r17
    17e4:	29 f0       	breq	.+10     	; 0x17f0 <vfprintf+0x1ec>
    17e6:	81 2f       	mov	r24, r17
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	b3 01       	movw	r22, r6
    17ec:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    17f0:	23 fe       	sbrs	r2, 3
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <vfprintf+0x1f6>
    17f4:	06 e0       	ldi	r16, 0x06	; 6
    17f6:	11 e0       	ldi	r17, 0x01	; 1
    17f8:	0e c0       	rjmp	.+28     	; 0x1816 <vfprintf+0x212>
    17fa:	0a e0       	ldi	r16, 0x0A	; 10
    17fc:	11 e0       	ldi	r17, 0x01	; 1
    17fe:	0b c0       	rjmp	.+22     	; 0x1816 <vfprintf+0x212>
    1800:	e1 14       	cp	r14, r1
    1802:	f1 04       	cpc	r15, r1
    1804:	09 f0       	breq	.+2      	; 0x1808 <vfprintf+0x204>
    1806:	80 52       	subi	r24, 0x20	; 32
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	b3 01       	movw	r22, r6
    180c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1810:	0f 5f       	subi	r16, 0xFF	; 255
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <vfprintf+0x21c>
    1816:	ef 2c       	mov	r14, r15
    1818:	ff 24       	eor	r15, r15
    181a:	f0 e1       	ldi	r31, 0x10	; 16
    181c:	ef 22       	and	r14, r31
    181e:	ff 24       	eor	r15, r15
    1820:	f8 01       	movw	r30, r16
    1822:	84 91       	lpm	r24, Z+
    1824:	88 23       	and	r24, r24
    1826:	61 f7       	brne	.-40     	; 0x1800 <vfprintf+0x1fc>
    1828:	14 c1       	rjmp	.+552    	; 0x1a52 <vfprintf+0x44e>
    182a:	f7 fe       	sbrs	r15, 7
    182c:	12 c0       	rjmp	.+36     	; 0x1852 <vfprintf+0x24e>
    182e:	bc 0c       	add	r11, r12
    1830:	24 fe       	sbrs	r2, 4
    1832:	04 c0       	rjmp	.+8      	; 0x183c <vfprintf+0x238>
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	81 33       	cpi	r24, 0x31	; 49
    1838:	09 f4       	brne	.+2      	; 0x183c <vfprintf+0x238>
    183a:	ba 94       	dec	r11
    183c:	1b 14       	cp	r1, r11
    183e:	1c f0       	brlt	.+6      	; 0x1846 <vfprintf+0x242>
    1840:	bb 24       	eor	r11, r11
    1842:	b3 94       	inc	r11
    1844:	2d c0       	rjmp	.+90     	; 0x18a0 <vfprintf+0x29c>
    1846:	f8 e0       	ldi	r31, 0x08	; 8
    1848:	fb 15       	cp	r31, r11
    184a:	50 f5       	brcc	.+84     	; 0x18a0 <vfprintf+0x29c>
    184c:	38 e0       	ldi	r19, 0x08	; 8
    184e:	b3 2e       	mov	r11, r19
    1850:	27 c0       	rjmp	.+78     	; 0x18a0 <vfprintf+0x29c>
    1852:	f6 fc       	sbrc	r15, 6
    1854:	25 c0       	rjmp	.+74     	; 0x18a0 <vfprintf+0x29c>
    1856:	89 2d       	mov	r24, r9
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	8c 15       	cp	r24, r12
    185c:	9d 05       	cpc	r25, r13
    185e:	4c f0       	brlt	.+18     	; 0x1872 <vfprintf+0x26e>
    1860:	2c ef       	ldi	r18, 0xFC	; 252
    1862:	c2 16       	cp	r12, r18
    1864:	2f ef       	ldi	r18, 0xFF	; 255
    1866:	d2 06       	cpc	r13, r18
    1868:	24 f0       	brlt	.+8      	; 0x1872 <vfprintf+0x26e>
    186a:	30 e8       	ldi	r19, 0x80	; 128
    186c:	f3 2a       	or	r15, r19
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <vfprintf+0x26e>
    1870:	9a 94       	dec	r9
    1872:	99 20       	and	r9, r9
    1874:	49 f0       	breq	.+18     	; 0x1888 <vfprintf+0x284>
    1876:	e2 e0       	ldi	r30, 0x02	; 2
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	ec 0f       	add	r30, r28
    187c:	fd 1f       	adc	r31, r29
    187e:	e9 0d       	add	r30, r9
    1880:	f1 1d       	adc	r31, r1
    1882:	80 81       	ld	r24, Z
    1884:	80 33       	cpi	r24, 0x30	; 48
    1886:	a1 f3       	breq	.-24     	; 0x1870 <vfprintf+0x26c>
    1888:	f7 fe       	sbrs	r15, 7
    188a:	0a c0       	rjmp	.+20     	; 0x18a0 <vfprintf+0x29c>
    188c:	b9 2c       	mov	r11, r9
    188e:	b3 94       	inc	r11
    1890:	89 2d       	mov	r24, r9
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	c8 16       	cp	r12, r24
    1896:	d9 06       	cpc	r13, r25
    1898:	14 f0       	brlt	.+4      	; 0x189e <vfprintf+0x29a>
    189a:	99 24       	eor	r9, r9
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vfprintf+0x29c>
    189e:	9c 18       	sub	r9, r12
    18a0:	f7 fc       	sbrc	r15, 7
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <vfprintf+0x2a6>
    18a4:	25 e0       	ldi	r18, 0x05	; 5
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <vfprintf+0x2b8>
    18aa:	1c 14       	cp	r1, r12
    18ac:	1d 04       	cpc	r1, r13
    18ae:	1c f0       	brlt	.+6      	; 0x18b6 <vfprintf+0x2b2>
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	03 c0       	rjmp	.+6      	; 0x18bc <vfprintf+0x2b8>
    18b6:	96 01       	movw	r18, r12
    18b8:	2f 5f       	subi	r18, 0xFF	; 255
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	11 23       	and	r17, r17
    18be:	11 f0       	breq	.+4      	; 0x18c4 <vfprintf+0x2c0>
    18c0:	2f 5f       	subi	r18, 0xFF	; 255
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	99 20       	and	r9, r9
    18c6:	29 f0       	breq	.+10     	; 0x18d2 <vfprintf+0x2ce>
    18c8:	89 2d       	mov	r24, r9
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	28 0f       	add	r18, r24
    18d0:	39 1f       	adc	r19, r25
    18d2:	88 2d       	mov	r24, r8
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	28 17       	cp	r18, r24
    18d8:	39 07       	cpc	r19, r25
    18da:	14 f0       	brlt	.+4      	; 0x18e0 <vfprintf+0x2dc>
    18dc:	88 24       	eor	r8, r8
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <vfprintf+0x2de>
    18e0:	82 1a       	sub	r8, r18
    18e2:	4f 2c       	mov	r4, r15
    18e4:	55 24       	eor	r5, r5
    18e6:	c2 01       	movw	r24, r4
    18e8:	89 70       	andi	r24, 0x09	; 9
    18ea:	90 70       	andi	r25, 0x00	; 0
    18ec:	89 2b       	or	r24, r25
    18ee:	39 f0       	breq	.+14     	; 0x18fe <vfprintf+0x2fa>
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <vfprintf+0x2fe>
    18f2:	80 e2       	ldi	r24, 0x20	; 32
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	b3 01       	movw	r22, r6
    18f8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    18fc:	8a 94       	dec	r8
    18fe:	88 20       	and	r8, r8
    1900:	c1 f7       	brne	.-16     	; 0x18f2 <vfprintf+0x2ee>
    1902:	11 23       	and	r17, r17
    1904:	29 f0       	breq	.+10     	; 0x1910 <vfprintf+0x30c>
    1906:	81 2f       	mov	r24, r17
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	b3 01       	movw	r22, r6
    190c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1910:	43 fe       	sbrs	r4, 3
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <vfprintf+0x31e>
    1914:	08 c0       	rjmp	.+16     	; 0x1926 <vfprintf+0x322>
    1916:	80 e3       	ldi	r24, 0x30	; 48
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	b3 01       	movw	r22, r6
    191c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1920:	8a 94       	dec	r8
    1922:	88 20       	and	r8, r8
    1924:	c1 f7       	brne	.-16     	; 0x1916 <vfprintf+0x312>
    1926:	f7 fe       	sbrs	r15, 7
    1928:	46 c0       	rjmp	.+140    	; 0x19b6 <vfprintf+0x3b2>
    192a:	86 01       	movw	r16, r12
    192c:	d7 fe       	sbrs	r13, 7
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfprintf+0x330>
    1930:	00 e0       	ldi	r16, 0x00	; 0
    1932:	10 e0       	ldi	r17, 0x00	; 0
    1934:	76 01       	movw	r14, r12
    1936:	08 94       	sec
    1938:	e1 1c       	adc	r14, r1
    193a:	f1 1c       	adc	r15, r1
    193c:	e0 1a       	sub	r14, r16
    193e:	f1 0a       	sbc	r15, r17
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	4c 0f       	add	r20, r28
    1946:	5d 1f       	adc	r21, r29
    1948:	e4 0e       	add	r14, r20
    194a:	f5 1e       	adc	r15, r21
    194c:	26 01       	movw	r4, r12
    194e:	4b 18       	sub	r4, r11
    1950:	51 08       	sbc	r5, r1
    1952:	89 2d       	mov	r24, r9
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	aa 24       	eor	r10, r10
    1958:	bb 24       	eor	r11, r11
    195a:	a8 1a       	sub	r10, r24
    195c:	b9 0a       	sbc	r11, r25
    195e:	5f ef       	ldi	r21, 0xFF	; 255
    1960:	0f 3f       	cpi	r16, 0xFF	; 255
    1962:	15 07       	cpc	r17, r21
    1964:	29 f4       	brne	.+10     	; 0x1970 <vfprintf+0x36c>
    1966:	8e e2       	ldi	r24, 0x2E	; 46
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	b3 01       	movw	r22, r6
    196c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1970:	c0 16       	cp	r12, r16
    1972:	d1 06       	cpc	r13, r17
    1974:	34 f0       	brlt	.+12     	; 0x1982 <vfprintf+0x37e>
    1976:	40 16       	cp	r4, r16
    1978:	51 06       	cpc	r5, r17
    197a:	1c f4       	brge	.+6      	; 0x1982 <vfprintf+0x37e>
    197c:	f7 01       	movw	r30, r14
    197e:	80 81       	ld	r24, Z
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <vfprintf+0x380>
    1982:	80 e3       	ldi	r24, 0x30	; 48
    1984:	01 50       	subi	r16, 0x01	; 1
    1986:	10 40       	sbci	r17, 0x00	; 0
    1988:	08 94       	sec
    198a:	e1 1c       	adc	r14, r1
    198c:	f1 1c       	adc	r15, r1
    198e:	0a 15       	cp	r16, r10
    1990:	1b 05       	cpc	r17, r11
    1992:	2c f0       	brlt	.+10     	; 0x199e <vfprintf+0x39a>
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	b3 01       	movw	r22, r6
    1998:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    199c:	e0 cf       	rjmp	.-64     	; 0x195e <vfprintf+0x35a>
    199e:	0c 15       	cp	r16, r12
    19a0:	1d 05       	cpc	r17, r13
    19a2:	39 f4       	brne	.+14     	; 0x19b2 <vfprintf+0x3ae>
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	96 33       	cpi	r25, 0x36	; 54
    19a8:	18 f4       	brcc	.+6      	; 0x19b0 <vfprintf+0x3ac>
    19aa:	95 33       	cpi	r25, 0x35	; 53
    19ac:	11 f4       	brne	.+4      	; 0x19b2 <vfprintf+0x3ae>
    19ae:	24 fe       	sbrs	r2, 4
    19b0:	81 e3       	ldi	r24, 0x31	; 49
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	4b c0       	rjmp	.+150    	; 0x1a4c <vfprintf+0x448>
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	81 33       	cpi	r24, 0x31	; 49
    19ba:	09 f0       	breq	.+2      	; 0x19be <vfprintf+0x3ba>
    19bc:	0f 7e       	andi	r16, 0xEF	; 239
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	b3 01       	movw	r22, r6
    19c2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    19c6:	99 20       	and	r9, r9
    19c8:	a1 f0       	breq	.+40     	; 0x19f2 <vfprintf+0x3ee>
    19ca:	8e e2       	ldi	r24, 0x2E	; 46
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	b3 01       	movw	r22, r6
    19d0:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    19d4:	12 e0       	ldi	r17, 0x02	; 2
    19d6:	e1 e0       	ldi	r30, 0x01	; 1
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	ec 0f       	add	r30, r28
    19dc:	fd 1f       	adc	r31, r29
    19de:	e1 0f       	add	r30, r17
    19e0:	f1 1d       	adc	r31, r1
    19e2:	1f 5f       	subi	r17, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	b3 01       	movw	r22, r6
    19ea:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    19ee:	9a 94       	dec	r9
    19f0:	91 f7       	brne	.-28     	; 0x19d6 <vfprintf+0x3d2>
    19f2:	44 fc       	sbrc	r4, 4
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <vfprintf+0x3f8>
    19f6:	85 e6       	ldi	r24, 0x65	; 101
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <vfprintf+0x3fc>
    19fc:	85 e4       	ldi	r24, 0x45	; 69
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	b3 01       	movw	r22, r6
    1a02:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1a06:	d7 fc       	sbrc	r13, 7
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <vfprintf+0x410>
    1a0a:	c1 14       	cp	r12, r1
    1a0c:	d1 04       	cpc	r13, r1
    1a0e:	41 f4       	brne	.+16     	; 0x1a20 <vfprintf+0x41c>
    1a10:	04 ff       	sbrs	r16, 4
    1a12:	06 c0       	rjmp	.+12     	; 0x1a20 <vfprintf+0x41c>
    1a14:	d0 94       	com	r13
    1a16:	c1 94       	neg	r12
    1a18:	d1 08       	sbc	r13, r1
    1a1a:	d3 94       	inc	r13
    1a1c:	8d e2       	ldi	r24, 0x2D	; 45
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <vfprintf+0x41e>
    1a20:	8b e2       	ldi	r24, 0x2B	; 43
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	b3 01       	movw	r22, r6
    1a26:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1a2a:	80 e3       	ldi	r24, 0x30	; 48
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <vfprintf+0x434>
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
    1a30:	26 ef       	ldi	r18, 0xF6	; 246
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	c2 0e       	add	r12, r18
    1a36:	d3 1e       	adc	r13, r19
    1a38:	3a e0       	ldi	r19, 0x0A	; 10
    1a3a:	c3 16       	cp	r12, r19
    1a3c:	d1 04       	cpc	r13, r1
    1a3e:	bc f7       	brge	.-18     	; 0x1a2e <vfprintf+0x42a>
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	b3 01       	movw	r22, r6
    1a44:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1a48:	c6 01       	movw	r24, r12
    1a4a:	c0 96       	adiw	r24, 0x30	; 48
    1a4c:	b3 01       	movw	r22, r6
    1a4e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1a52:	cc 84       	ldd	r12, Y+12	; 0x0c
    1a54:	dd 84       	ldd	r13, Y+13	; 0x0d
    1a56:	52 c1       	rjmp	.+676    	; 0x1cfc <vfprintf+0x6f8>
    1a58:	93 36       	cpi	r25, 0x63	; 99
    1a5a:	31 f0       	breq	.+12     	; 0x1a68 <vfprintf+0x464>
    1a5c:	93 37       	cpi	r25, 0x73	; 115
    1a5e:	99 f0       	breq	.+38     	; 0x1a86 <vfprintf+0x482>
    1a60:	93 35       	cpi	r25, 0x53	; 83
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <vfprintf+0x462>
    1a64:	59 c0       	rjmp	.+178    	; 0x1b18 <vfprintf+0x514>
    1a66:	23 c0       	rjmp	.+70     	; 0x1aae <vfprintf+0x4aa>
    1a68:	f6 01       	movw	r30, r12
    1a6a:	80 81       	ld	r24, Z
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	5e 01       	movw	r10, r28
    1a70:	08 94       	sec
    1a72:	a1 1c       	adc	r10, r1
    1a74:	b1 1c       	adc	r11, r1
    1a76:	22 e0       	ldi	r18, 0x02	; 2
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	c2 0e       	add	r12, r18
    1a7c:	d3 1e       	adc	r13, r19
    1a7e:	21 e0       	ldi	r18, 0x01	; 1
    1a80:	e2 2e       	mov	r14, r18
    1a82:	f1 2c       	mov	r15, r1
    1a84:	12 c0       	rjmp	.+36     	; 0x1aaa <vfprintf+0x4a6>
    1a86:	f6 01       	movw	r30, r12
    1a88:	a0 80       	ld	r10, Z
    1a8a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a8c:	16 fd       	sbrc	r17, 6
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <vfprintf+0x492>
    1a90:	6f ef       	ldi	r22, 0xFF	; 255
    1a92:	7f ef       	ldi	r23, 0xFF	; 255
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <vfprintf+0x496>
    1a96:	69 2d       	mov	r22, r9
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	22 e0       	ldi	r18, 0x02	; 2
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	c2 0e       	add	r12, r18
    1aa0:	d3 1e       	adc	r13, r19
    1aa2:	c5 01       	movw	r24, r10
    1aa4:	0e 94 73 12 	call	0x24e6	; 0x24e6 <strnlen>
    1aa8:	7c 01       	movw	r14, r24
    1aaa:	1f 77       	andi	r17, 0x7F	; 127
    1aac:	13 c0       	rjmp	.+38     	; 0x1ad4 <vfprintf+0x4d0>
    1aae:	f6 01       	movw	r30, r12
    1ab0:	a0 80       	ld	r10, Z
    1ab2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ab4:	16 fd       	sbrc	r17, 6
    1ab6:	03 c0       	rjmp	.+6      	; 0x1abe <vfprintf+0x4ba>
    1ab8:	6f ef       	ldi	r22, 0xFF	; 255
    1aba:	7f ef       	ldi	r23, 0xFF	; 255
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <vfprintf+0x4be>
    1abe:	69 2d       	mov	r22, r9
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	22 e0       	ldi	r18, 0x02	; 2
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	c2 0e       	add	r12, r18
    1ac8:	d3 1e       	adc	r13, r19
    1aca:	c5 01       	movw	r24, r10
    1acc:	0e 94 68 12 	call	0x24d0	; 0x24d0 <strnlen_P>
    1ad0:	7c 01       	movw	r14, r24
    1ad2:	10 68       	ori	r17, 0x80	; 128
    1ad4:	13 ff       	sbrs	r17, 3
    1ad6:	07 c0       	rjmp	.+14     	; 0x1ae6 <vfprintf+0x4e2>
    1ad8:	1b c0       	rjmp	.+54     	; 0x1b10 <vfprintf+0x50c>
    1ada:	80 e2       	ldi	r24, 0x20	; 32
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	b3 01       	movw	r22, r6
    1ae0:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1ae4:	8a 94       	dec	r8
    1ae6:	88 2d       	mov	r24, r8
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	e8 16       	cp	r14, r24
    1aec:	f9 06       	cpc	r15, r25
    1aee:	a8 f3       	brcs	.-22     	; 0x1ada <vfprintf+0x4d6>
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <vfprintf+0x50c>
    1af2:	f5 01       	movw	r30, r10
    1af4:	17 fd       	sbrc	r17, 7
    1af6:	85 91       	lpm	r24, Z+
    1af8:	17 ff       	sbrs	r17, 7
    1afa:	81 91       	ld	r24, Z+
    1afc:	5f 01       	movw	r10, r30
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	b3 01       	movw	r22, r6
    1b02:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1b06:	81 10       	cpse	r8, r1
    1b08:	8a 94       	dec	r8
    1b0a:	08 94       	sec
    1b0c:	e1 08       	sbc	r14, r1
    1b0e:	f1 08       	sbc	r15, r1
    1b10:	e1 14       	cp	r14, r1
    1b12:	f1 04       	cpc	r15, r1
    1b14:	71 f7       	brne	.-36     	; 0x1af2 <vfprintf+0x4ee>
    1b16:	f2 c0       	rjmp	.+484    	; 0x1cfc <vfprintf+0x6f8>
    1b18:	94 36       	cpi	r25, 0x64	; 100
    1b1a:	11 f0       	breq	.+4      	; 0x1b20 <vfprintf+0x51c>
    1b1c:	99 36       	cpi	r25, 0x69	; 105
    1b1e:	89 f5       	brne	.+98     	; 0x1b82 <vfprintf+0x57e>
    1b20:	17 ff       	sbrs	r17, 7
    1b22:	08 c0       	rjmp	.+16     	; 0x1b34 <vfprintf+0x530>
    1b24:	f6 01       	movw	r30, r12
    1b26:	20 81       	ld	r18, Z
    1b28:	31 81       	ldd	r19, Z+1	; 0x01
    1b2a:	42 81       	ldd	r20, Z+2	; 0x02
    1b2c:	53 81       	ldd	r21, Z+3	; 0x03
    1b2e:	84 e0       	ldi	r24, 0x04	; 4
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0a c0       	rjmp	.+20     	; 0x1b48 <vfprintf+0x544>
    1b34:	f6 01       	movw	r30, r12
    1b36:	80 81       	ld	r24, Z
    1b38:	91 81       	ldd	r25, Z+1	; 0x01
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	44 27       	eor	r20, r20
    1b3e:	37 fd       	sbrc	r19, 7
    1b40:	40 95       	com	r20
    1b42:	54 2f       	mov	r21, r20
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	c8 0e       	add	r12, r24
    1b4a:	d9 1e       	adc	r13, r25
    1b4c:	9f e6       	ldi	r25, 0x6F	; 111
    1b4e:	f9 2e       	mov	r15, r25
    1b50:	f1 22       	and	r15, r17
    1b52:	57 ff       	sbrs	r21, 7
    1b54:	09 c0       	rjmp	.+18     	; 0x1b68 <vfprintf+0x564>
    1b56:	50 95       	com	r21
    1b58:	40 95       	com	r20
    1b5a:	30 95       	com	r19
    1b5c:	21 95       	neg	r18
    1b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b60:	4f 4f       	sbci	r20, 0xFF	; 255
    1b62:	5f 4f       	sbci	r21, 0xFF	; 255
    1b64:	90 e8       	ldi	r25, 0x80	; 128
    1b66:	f9 2a       	or	r15, r25
    1b68:	ca 01       	movw	r24, r20
    1b6a:	b9 01       	movw	r22, r18
    1b6c:	ae 01       	movw	r20, r28
    1b6e:	4f 5f       	subi	r20, 0xFF	; 255
    1b70:	5f 4f       	sbci	r21, 0xFF	; 255
    1b72:	2a e0       	ldi	r18, 0x0A	; 10
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	0e 94 ce 12 	call	0x259c	; 0x259c <__ultoa_invert>
    1b7a:	e8 2e       	mov	r14, r24
    1b7c:	e8 89       	ldd	r30, Y+16	; 0x10
    1b7e:	ee 1a       	sub	r14, r30
    1b80:	41 c0       	rjmp	.+130    	; 0x1c04 <vfprintf+0x600>
    1b82:	95 37       	cpi	r25, 0x75	; 117
    1b84:	21 f4       	brne	.+8      	; 0x1b8e <vfprintf+0x58a>
    1b86:	1f 7e       	andi	r17, 0xEF	; 239
    1b88:	2a e0       	ldi	r18, 0x0A	; 10
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	1c c0       	rjmp	.+56     	; 0x1bc6 <vfprintf+0x5c2>
    1b8e:	19 7f       	andi	r17, 0xF9	; 249
    1b90:	9f 36       	cpi	r25, 0x6F	; 111
    1b92:	61 f0       	breq	.+24     	; 0x1bac <vfprintf+0x5a8>
    1b94:	90 37       	cpi	r25, 0x70	; 112
    1b96:	20 f4       	brcc	.+8      	; 0x1ba0 <vfprintf+0x59c>
    1b98:	98 35       	cpi	r25, 0x58	; 88
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <vfprintf+0x59a>
    1b9c:	b2 c0       	rjmp	.+356    	; 0x1d02 <vfprintf+0x6fe>
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <vfprintf+0x5ba>
    1ba0:	90 37       	cpi	r25, 0x70	; 112
    1ba2:	39 f0       	breq	.+14     	; 0x1bb2 <vfprintf+0x5ae>
    1ba4:	98 37       	cpi	r25, 0x78	; 120
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <vfprintf+0x5a6>
    1ba8:	ac c0       	rjmp	.+344    	; 0x1d02 <vfprintf+0x6fe>
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <vfprintf+0x5b0>
    1bac:	28 e0       	ldi	r18, 0x08	; 8
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	0a c0       	rjmp	.+20     	; 0x1bc6 <vfprintf+0x5c2>
    1bb2:	10 61       	ori	r17, 0x10	; 16
    1bb4:	14 fd       	sbrc	r17, 4
    1bb6:	14 60       	ori	r17, 0x04	; 4
    1bb8:	20 e1       	ldi	r18, 0x10	; 16
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	04 c0       	rjmp	.+8      	; 0x1bc6 <vfprintf+0x5c2>
    1bbe:	14 fd       	sbrc	r17, 4
    1bc0:	16 60       	ori	r17, 0x06	; 6
    1bc2:	20 e1       	ldi	r18, 0x10	; 16
    1bc4:	32 e0       	ldi	r19, 0x02	; 2
    1bc6:	17 ff       	sbrs	r17, 7
    1bc8:	08 c0       	rjmp	.+16     	; 0x1bda <vfprintf+0x5d6>
    1bca:	f6 01       	movw	r30, r12
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	44 e0       	ldi	r20, 0x04	; 4
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	08 c0       	rjmp	.+16     	; 0x1bea <vfprintf+0x5e6>
    1bda:	f6 01       	movw	r30, r12
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	bc 01       	movw	r22, r24
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	42 e0       	ldi	r20, 0x02	; 2
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	c4 0e       	add	r12, r20
    1bec:	d5 1e       	adc	r13, r21
    1bee:	ae 01       	movw	r20, r28
    1bf0:	4f 5f       	subi	r20, 0xFF	; 255
    1bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf4:	0e 94 ce 12 	call	0x259c	; 0x259c <__ultoa_invert>
    1bf8:	e8 2e       	mov	r14, r24
    1bfa:	58 89       	ldd	r21, Y+16	; 0x10
    1bfc:	e5 1a       	sub	r14, r21
    1bfe:	8f e7       	ldi	r24, 0x7F	; 127
    1c00:	f8 2e       	mov	r15, r24
    1c02:	f1 22       	and	r15, r17
    1c04:	f6 fe       	sbrs	r15, 6
    1c06:	0b c0       	rjmp	.+22     	; 0x1c1e <vfprintf+0x61a>
    1c08:	8e ef       	ldi	r24, 0xFE	; 254
    1c0a:	f8 22       	and	r15, r24
    1c0c:	e9 14       	cp	r14, r9
    1c0e:	38 f4       	brcc	.+14     	; 0x1c1e <vfprintf+0x61a>
    1c10:	f4 fe       	sbrs	r15, 4
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <vfprintf+0x61e>
    1c14:	f2 fc       	sbrc	r15, 2
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <vfprintf+0x61e>
    1c18:	9f ee       	ldi	r25, 0xEF	; 239
    1c1a:	f9 22       	and	r15, r25
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <vfprintf+0x61e>
    1c1e:	1e 2d       	mov	r17, r14
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <vfprintf+0x620>
    1c22:	19 2d       	mov	r17, r9
    1c24:	f4 fe       	sbrs	r15, 4
    1c26:	0d c0       	rjmp	.+26     	; 0x1c42 <vfprintf+0x63e>
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ee 0d       	add	r30, r14
    1c2c:	f1 1d       	adc	r31, r1
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 33       	cpi	r24, 0x30	; 48
    1c32:	19 f4       	brne	.+6      	; 0x1c3a <vfprintf+0x636>
    1c34:	e9 ee       	ldi	r30, 0xE9	; 233
    1c36:	fe 22       	and	r15, r30
    1c38:	08 c0       	rjmp	.+16     	; 0x1c4a <vfprintf+0x646>
    1c3a:	1f 5f       	subi	r17, 0xFF	; 255
    1c3c:	f2 fe       	sbrs	r15, 2
    1c3e:	05 c0       	rjmp	.+10     	; 0x1c4a <vfprintf+0x646>
    1c40:	03 c0       	rjmp	.+6      	; 0x1c48 <vfprintf+0x644>
    1c42:	8f 2d       	mov	r24, r15
    1c44:	86 78       	andi	r24, 0x86	; 134
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <vfprintf+0x646>
    1c48:	1f 5f       	subi	r17, 0xFF	; 255
    1c4a:	0f 2d       	mov	r16, r15
    1c4c:	f3 fc       	sbrc	r15, 3
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <vfprintf+0x674>
    1c50:	f0 fe       	sbrs	r15, 0
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <vfprintf+0x66e>
    1c54:	18 15       	cp	r17, r8
    1c56:	10 f0       	brcs	.+4      	; 0x1c5c <vfprintf+0x658>
    1c58:	9e 2c       	mov	r9, r14
    1c5a:	0b c0       	rjmp	.+22     	; 0x1c72 <vfprintf+0x66e>
    1c5c:	9e 2c       	mov	r9, r14
    1c5e:	98 0c       	add	r9, r8
    1c60:	91 1a       	sub	r9, r17
    1c62:	18 2d       	mov	r17, r8
    1c64:	06 c0       	rjmp	.+12     	; 0x1c72 <vfprintf+0x66e>
    1c66:	80 e2       	ldi	r24, 0x20	; 32
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	b3 01       	movw	r22, r6
    1c6c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1c70:	1f 5f       	subi	r17, 0xFF	; 255
    1c72:	18 15       	cp	r17, r8
    1c74:	c0 f3       	brcs	.-16     	; 0x1c66 <vfprintf+0x662>
    1c76:	04 c0       	rjmp	.+8      	; 0x1c80 <vfprintf+0x67c>
    1c78:	18 15       	cp	r17, r8
    1c7a:	10 f4       	brcc	.+4      	; 0x1c80 <vfprintf+0x67c>
    1c7c:	81 1a       	sub	r8, r17
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <vfprintf+0x67e>
    1c80:	88 24       	eor	r8, r8
    1c82:	04 ff       	sbrs	r16, 4
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <vfprintf+0x6a0>
    1c86:	80 e3       	ldi	r24, 0x30	; 48
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	b3 01       	movw	r22, r6
    1c8c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1c90:	02 ff       	sbrs	r16, 2
    1c92:	1d c0       	rjmp	.+58     	; 0x1cce <vfprintf+0x6ca>
    1c94:	01 fd       	sbrc	r16, 1
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <vfprintf+0x69a>
    1c98:	88 e7       	ldi	r24, 0x78	; 120
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e c0       	rjmp	.+28     	; 0x1cba <vfprintf+0x6b6>
    1c9e:	88 e5       	ldi	r24, 0x58	; 88
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0b c0       	rjmp	.+22     	; 0x1cba <vfprintf+0x6b6>
    1ca4:	80 2f       	mov	r24, r16
    1ca6:	86 78       	andi	r24, 0x86	; 134
    1ca8:	91 f0       	breq	.+36     	; 0x1cce <vfprintf+0x6ca>
    1caa:	01 ff       	sbrs	r16, 1
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <vfprintf+0x6ae>
    1cae:	8b e2       	ldi	r24, 0x2B	; 43
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <vfprintf+0x6b0>
    1cb2:	80 e2       	ldi	r24, 0x20	; 32
    1cb4:	f7 fc       	sbrc	r15, 7
    1cb6:	8d e2       	ldi	r24, 0x2D	; 45
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	b3 01       	movw	r22, r6
    1cbc:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <vfprintf+0x6ca>
    1cc2:	80 e3       	ldi	r24, 0x30	; 48
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	b3 01       	movw	r22, r6
    1cc8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1ccc:	9a 94       	dec	r9
    1cce:	e9 14       	cp	r14, r9
    1cd0:	c0 f3       	brcs	.-16     	; 0x1cc2 <vfprintf+0x6be>
    1cd2:	ea 94       	dec	r14
    1cd4:	e1 e0       	ldi	r30, 0x01	; 1
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	ec 0f       	add	r30, r28
    1cda:	fd 1f       	adc	r31, r29
    1cdc:	ee 0d       	add	r30, r14
    1cde:	f1 1d       	adc	r31, r1
    1ce0:	80 81       	ld	r24, Z
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	b3 01       	movw	r22, r6
    1ce6:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1cea:	ee 20       	and	r14, r14
    1cec:	91 f7       	brne	.-28     	; 0x1cd2 <vfprintf+0x6ce>
    1cee:	06 c0       	rjmp	.+12     	; 0x1cfc <vfprintf+0x6f8>
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	b3 01       	movw	r22, r6
    1cf6:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    1cfa:	8a 94       	dec	r8
    1cfc:	88 20       	and	r8, r8
    1cfe:	c1 f7       	brne	.-16     	; 0x1cf0 <vfprintf+0x6ec>
    1d00:	99 cc       	rjmp	.-1742   	; 0x1634 <vfprintf+0x30>
    1d02:	f3 01       	movw	r30, r6
    1d04:	66 81       	ldd	r22, Z+6	; 0x06
    1d06:	77 81       	ldd	r23, Z+7	; 0x07
    1d08:	cb 01       	movw	r24, r22
    1d0a:	61 96       	adiw	r28, 0x11	; 17
    1d0c:	e2 e1       	ldi	r30, 0x12	; 18
    1d0e:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__>

00001d12 <__subsf3>:
    1d12:	50 58       	subi	r21, 0x80	; 128

00001d14 <__addsf3>:
    1d14:	bb 27       	eor	r27, r27
    1d16:	aa 27       	eor	r26, r26
    1d18:	0e d0       	rcall	.+28     	; 0x1d36 <__addsf3x>
    1d1a:	75 c1       	rjmp	.+746    	; 0x2006 <__fp_round>
    1d1c:	66 d1       	rcall	.+716    	; 0x1fea <__fp_pscA>
    1d1e:	30 f0       	brcs	.+12     	; 0x1d2c <__addsf3+0x18>
    1d20:	6b d1       	rcall	.+726    	; 0x1ff8 <__fp_pscB>
    1d22:	20 f0       	brcs	.+8      	; 0x1d2c <__addsf3+0x18>
    1d24:	31 f4       	brne	.+12     	; 0x1d32 <__addsf3+0x1e>
    1d26:	9f 3f       	cpi	r25, 0xFF	; 255
    1d28:	11 f4       	brne	.+4      	; 0x1d2e <__addsf3+0x1a>
    1d2a:	1e f4       	brtc	.+6      	; 0x1d32 <__addsf3+0x1e>
    1d2c:	5b c1       	rjmp	.+694    	; 0x1fe4 <__fp_nan>
    1d2e:	0e f4       	brtc	.+2      	; 0x1d32 <__addsf3+0x1e>
    1d30:	e0 95       	com	r30
    1d32:	e7 fb       	bst	r30, 7
    1d34:	51 c1       	rjmp	.+674    	; 0x1fd8 <__fp_inf>

00001d36 <__addsf3x>:
    1d36:	e9 2f       	mov	r30, r25
    1d38:	77 d1       	rcall	.+750    	; 0x2028 <__fp_split3>
    1d3a:	80 f3       	brcs	.-32     	; 0x1d1c <__addsf3+0x8>
    1d3c:	ba 17       	cp	r27, r26
    1d3e:	62 07       	cpc	r22, r18
    1d40:	73 07       	cpc	r23, r19
    1d42:	84 07       	cpc	r24, r20
    1d44:	95 07       	cpc	r25, r21
    1d46:	18 f0       	brcs	.+6      	; 0x1d4e <__addsf3x+0x18>
    1d48:	71 f4       	brne	.+28     	; 0x1d66 <__addsf3x+0x30>
    1d4a:	9e f5       	brtc	.+102    	; 0x1db2 <__addsf3x+0x7c>
    1d4c:	8f c1       	rjmp	.+798    	; 0x206c <__fp_zero>
    1d4e:	0e f4       	brtc	.+2      	; 0x1d52 <__addsf3x+0x1c>
    1d50:	e0 95       	com	r30
    1d52:	0b 2e       	mov	r0, r27
    1d54:	ba 2f       	mov	r27, r26
    1d56:	a0 2d       	mov	r26, r0
    1d58:	0b 01       	movw	r0, r22
    1d5a:	b9 01       	movw	r22, r18
    1d5c:	90 01       	movw	r18, r0
    1d5e:	0c 01       	movw	r0, r24
    1d60:	ca 01       	movw	r24, r20
    1d62:	a0 01       	movw	r20, r0
    1d64:	11 24       	eor	r1, r1
    1d66:	ff 27       	eor	r31, r31
    1d68:	59 1b       	sub	r21, r25
    1d6a:	99 f0       	breq	.+38     	; 0x1d92 <__addsf3x+0x5c>
    1d6c:	59 3f       	cpi	r21, 0xF9	; 249
    1d6e:	50 f4       	brcc	.+20     	; 0x1d84 <__addsf3x+0x4e>
    1d70:	50 3e       	cpi	r21, 0xE0	; 224
    1d72:	68 f1       	brcs	.+90     	; 0x1dce <__addsf3x+0x98>
    1d74:	1a 16       	cp	r1, r26
    1d76:	f0 40       	sbci	r31, 0x00	; 0
    1d78:	a2 2f       	mov	r26, r18
    1d7a:	23 2f       	mov	r18, r19
    1d7c:	34 2f       	mov	r19, r20
    1d7e:	44 27       	eor	r20, r20
    1d80:	58 5f       	subi	r21, 0xF8	; 248
    1d82:	f3 cf       	rjmp	.-26     	; 0x1d6a <__addsf3x+0x34>
    1d84:	46 95       	lsr	r20
    1d86:	37 95       	ror	r19
    1d88:	27 95       	ror	r18
    1d8a:	a7 95       	ror	r26
    1d8c:	f0 40       	sbci	r31, 0x00	; 0
    1d8e:	53 95       	inc	r21
    1d90:	c9 f7       	brne	.-14     	; 0x1d84 <__addsf3x+0x4e>
    1d92:	7e f4       	brtc	.+30     	; 0x1db2 <__addsf3x+0x7c>
    1d94:	1f 16       	cp	r1, r31
    1d96:	ba 0b       	sbc	r27, r26
    1d98:	62 0b       	sbc	r22, r18
    1d9a:	73 0b       	sbc	r23, r19
    1d9c:	84 0b       	sbc	r24, r20
    1d9e:	ba f0       	brmi	.+46     	; 0x1dce <__addsf3x+0x98>
    1da0:	91 50       	subi	r25, 0x01	; 1
    1da2:	a1 f0       	breq	.+40     	; 0x1dcc <__addsf3x+0x96>
    1da4:	ff 0f       	add	r31, r31
    1da6:	bb 1f       	adc	r27, r27
    1da8:	66 1f       	adc	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	88 1f       	adc	r24, r24
    1dae:	c2 f7       	brpl	.-16     	; 0x1da0 <__addsf3x+0x6a>
    1db0:	0e c0       	rjmp	.+28     	; 0x1dce <__addsf3x+0x98>
    1db2:	ba 0f       	add	r27, r26
    1db4:	62 1f       	adc	r22, r18
    1db6:	73 1f       	adc	r23, r19
    1db8:	84 1f       	adc	r24, r20
    1dba:	48 f4       	brcc	.+18     	; 0x1dce <__addsf3x+0x98>
    1dbc:	87 95       	ror	r24
    1dbe:	77 95       	ror	r23
    1dc0:	67 95       	ror	r22
    1dc2:	b7 95       	ror	r27
    1dc4:	f7 95       	ror	r31
    1dc6:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc8:	08 f0       	brcs	.+2      	; 0x1dcc <__addsf3x+0x96>
    1dca:	b3 cf       	rjmp	.-154    	; 0x1d32 <__addsf3+0x1e>
    1dcc:	93 95       	inc	r25
    1dce:	88 0f       	add	r24, r24
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <__addsf3x+0x9e>
    1dd2:	99 27       	eor	r25, r25
    1dd4:	ee 0f       	add	r30, r30
    1dd6:	97 95       	ror	r25
    1dd8:	87 95       	ror	r24
    1dda:	08 95       	ret

00001ddc <__cmpsf2>:
    1ddc:	d9 d0       	rcall	.+434    	; 0x1f90 <__fp_cmp>
    1dde:	08 f4       	brcc	.+2      	; 0x1de2 <__cmpsf2+0x6>
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	08 95       	ret

00001de4 <__divsf3>:
    1de4:	0c d0       	rcall	.+24     	; 0x1dfe <__divsf3x>
    1de6:	0f c1       	rjmp	.+542    	; 0x2006 <__fp_round>
    1de8:	07 d1       	rcall	.+526    	; 0x1ff8 <__fp_pscB>
    1dea:	40 f0       	brcs	.+16     	; 0x1dfc <__divsf3+0x18>
    1dec:	fe d0       	rcall	.+508    	; 0x1fea <__fp_pscA>
    1dee:	30 f0       	brcs	.+12     	; 0x1dfc <__divsf3+0x18>
    1df0:	21 f4       	brne	.+8      	; 0x1dfa <__divsf3+0x16>
    1df2:	5f 3f       	cpi	r21, 0xFF	; 255
    1df4:	19 f0       	breq	.+6      	; 0x1dfc <__divsf3+0x18>
    1df6:	f0 c0       	rjmp	.+480    	; 0x1fd8 <__fp_inf>
    1df8:	51 11       	cpse	r21, r1
    1dfa:	39 c1       	rjmp	.+626    	; 0x206e <__fp_szero>
    1dfc:	f3 c0       	rjmp	.+486    	; 0x1fe4 <__fp_nan>

00001dfe <__divsf3x>:
    1dfe:	14 d1       	rcall	.+552    	; 0x2028 <__fp_split3>
    1e00:	98 f3       	brcs	.-26     	; 0x1de8 <__divsf3+0x4>

00001e02 <__divsf3_pse>:
    1e02:	99 23       	and	r25, r25
    1e04:	c9 f3       	breq	.-14     	; 0x1df8 <__divsf3+0x14>
    1e06:	55 23       	and	r21, r21
    1e08:	b1 f3       	breq	.-20     	; 0x1df6 <__divsf3+0x12>
    1e0a:	95 1b       	sub	r25, r21
    1e0c:	55 0b       	sbc	r21, r21
    1e0e:	bb 27       	eor	r27, r27
    1e10:	aa 27       	eor	r26, r26
    1e12:	62 17       	cp	r22, r18
    1e14:	73 07       	cpc	r23, r19
    1e16:	84 07       	cpc	r24, r20
    1e18:	38 f0       	brcs	.+14     	; 0x1e28 <__divsf3_pse+0x26>
    1e1a:	9f 5f       	subi	r25, 0xFF	; 255
    1e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1e:	22 0f       	add	r18, r18
    1e20:	33 1f       	adc	r19, r19
    1e22:	44 1f       	adc	r20, r20
    1e24:	aa 1f       	adc	r26, r26
    1e26:	a9 f3       	breq	.-22     	; 0x1e12 <__divsf3_pse+0x10>
    1e28:	33 d0       	rcall	.+102    	; 0x1e90 <__divsf3_pse+0x8e>
    1e2a:	0e 2e       	mov	r0, r30
    1e2c:	3a f0       	brmi	.+14     	; 0x1e3c <__divsf3_pse+0x3a>
    1e2e:	e0 e8       	ldi	r30, 0x80	; 128
    1e30:	30 d0       	rcall	.+96     	; 0x1e92 <__divsf3_pse+0x90>
    1e32:	91 50       	subi	r25, 0x01	; 1
    1e34:	50 40       	sbci	r21, 0x00	; 0
    1e36:	e6 95       	lsr	r30
    1e38:	00 1c       	adc	r0, r0
    1e3a:	ca f7       	brpl	.-14     	; 0x1e2e <__divsf3_pse+0x2c>
    1e3c:	29 d0       	rcall	.+82     	; 0x1e90 <__divsf3_pse+0x8e>
    1e3e:	fe 2f       	mov	r31, r30
    1e40:	27 d0       	rcall	.+78     	; 0x1e90 <__divsf3_pse+0x8e>
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	bb 1f       	adc	r27, r27
    1e4a:	26 17       	cp	r18, r22
    1e4c:	37 07       	cpc	r19, r23
    1e4e:	48 07       	cpc	r20, r24
    1e50:	ab 07       	cpc	r26, r27
    1e52:	b0 e8       	ldi	r27, 0x80	; 128
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <__divsf3_pse+0x56>
    1e56:	bb 0b       	sbc	r27, r27
    1e58:	80 2d       	mov	r24, r0
    1e5a:	bf 01       	movw	r22, r30
    1e5c:	ff 27       	eor	r31, r31
    1e5e:	93 58       	subi	r25, 0x83	; 131
    1e60:	5f 4f       	sbci	r21, 0xFF	; 255
    1e62:	2a f0       	brmi	.+10     	; 0x1e6e <__divsf3_pse+0x6c>
    1e64:	9e 3f       	cpi	r25, 0xFE	; 254
    1e66:	51 05       	cpc	r21, r1
    1e68:	68 f0       	brcs	.+26     	; 0x1e84 <__divsf3_pse+0x82>
    1e6a:	b6 c0       	rjmp	.+364    	; 0x1fd8 <__fp_inf>
    1e6c:	00 c1       	rjmp	.+512    	; 0x206e <__fp_szero>
    1e6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e70:	ec f3       	brlt	.-6      	; 0x1e6c <__divsf3_pse+0x6a>
    1e72:	98 3e       	cpi	r25, 0xE8	; 232
    1e74:	dc f3       	brlt	.-10     	; 0x1e6c <__divsf3_pse+0x6a>
    1e76:	86 95       	lsr	r24
    1e78:	77 95       	ror	r23
    1e7a:	67 95       	ror	r22
    1e7c:	b7 95       	ror	r27
    1e7e:	f7 95       	ror	r31
    1e80:	9f 5f       	subi	r25, 0xFF	; 255
    1e82:	c9 f7       	brne	.-14     	; 0x1e76 <__divsf3_pse+0x74>
    1e84:	88 0f       	add	r24, r24
    1e86:	91 1d       	adc	r25, r1
    1e88:	96 95       	lsr	r25
    1e8a:	87 95       	ror	r24
    1e8c:	97 f9       	bld	r25, 7
    1e8e:	08 95       	ret
    1e90:	e1 e0       	ldi	r30, 0x01	; 1
    1e92:	66 0f       	add	r22, r22
    1e94:	77 1f       	adc	r23, r23
    1e96:	88 1f       	adc	r24, r24
    1e98:	bb 1f       	adc	r27, r27
    1e9a:	62 17       	cp	r22, r18
    1e9c:	73 07       	cpc	r23, r19
    1e9e:	84 07       	cpc	r24, r20
    1ea0:	ba 07       	cpc	r27, r26
    1ea2:	20 f0       	brcs	.+8      	; 0x1eac <__divsf3_pse+0xaa>
    1ea4:	62 1b       	sub	r22, r18
    1ea6:	73 0b       	sbc	r23, r19
    1ea8:	84 0b       	sbc	r24, r20
    1eaa:	ba 0b       	sbc	r27, r26
    1eac:	ee 1f       	adc	r30, r30
    1eae:	88 f7       	brcc	.-30     	; 0x1e92 <__divsf3_pse+0x90>
    1eb0:	e0 95       	com	r30
    1eb2:	08 95       	ret

00001eb4 <__fixsfsi>:
    1eb4:	04 d0       	rcall	.+8      	; 0x1ebe <__fixunssfsi>
    1eb6:	68 94       	set
    1eb8:	b1 11       	cpse	r27, r1
    1eba:	d9 c0       	rjmp	.+434    	; 0x206e <__fp_szero>
    1ebc:	08 95       	ret

00001ebe <__fixunssfsi>:
    1ebe:	bc d0       	rcall	.+376    	; 0x2038 <__fp_splitA>
    1ec0:	88 f0       	brcs	.+34     	; 0x1ee4 <__fixunssfsi+0x26>
    1ec2:	9f 57       	subi	r25, 0x7F	; 127
    1ec4:	90 f0       	brcs	.+36     	; 0x1eea <__fixunssfsi+0x2c>
    1ec6:	b9 2f       	mov	r27, r25
    1ec8:	99 27       	eor	r25, r25
    1eca:	b7 51       	subi	r27, 0x17	; 23
    1ecc:	a0 f0       	brcs	.+40     	; 0x1ef6 <__fixunssfsi+0x38>
    1ece:	d1 f0       	breq	.+52     	; 0x1f04 <__fixunssfsi+0x46>
    1ed0:	66 0f       	add	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	1a f0       	brmi	.+6      	; 0x1ee0 <__fixunssfsi+0x22>
    1eda:	ba 95       	dec	r27
    1edc:	c9 f7       	brne	.-14     	; 0x1ed0 <__fixunssfsi+0x12>
    1ede:	12 c0       	rjmp	.+36     	; 0x1f04 <__fixunssfsi+0x46>
    1ee0:	b1 30       	cpi	r27, 0x01	; 1
    1ee2:	81 f0       	breq	.+32     	; 0x1f04 <__fixunssfsi+0x46>
    1ee4:	c3 d0       	rcall	.+390    	; 0x206c <__fp_zero>
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
    1ee8:	08 95       	ret
    1eea:	c0 c0       	rjmp	.+384    	; 0x206c <__fp_zero>
    1eec:	67 2f       	mov	r22, r23
    1eee:	78 2f       	mov	r23, r24
    1ef0:	88 27       	eor	r24, r24
    1ef2:	b8 5f       	subi	r27, 0xF8	; 248
    1ef4:	39 f0       	breq	.+14     	; 0x1f04 <__fixunssfsi+0x46>
    1ef6:	b9 3f       	cpi	r27, 0xF9	; 249
    1ef8:	cc f3       	brlt	.-14     	; 0x1eec <__fixunssfsi+0x2e>
    1efa:	86 95       	lsr	r24
    1efc:	77 95       	ror	r23
    1efe:	67 95       	ror	r22
    1f00:	b3 95       	inc	r27
    1f02:	d9 f7       	brne	.-10     	; 0x1efa <__fixunssfsi+0x3c>
    1f04:	3e f4       	brtc	.+14     	; 0x1f14 <__fixunssfsi+0x56>
    1f06:	90 95       	com	r25
    1f08:	80 95       	com	r24
    1f0a:	70 95       	com	r23
    1f0c:	61 95       	neg	r22
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	8f 4f       	sbci	r24, 0xFF	; 255
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	08 95       	ret

00001f16 <__floatunsisf>:
    1f16:	e8 94       	clt
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <__floatsisf+0x12>

00001f1a <__floatsisf>:
    1f1a:	97 fb       	bst	r25, 7
    1f1c:	3e f4       	brtc	.+14     	; 0x1f2c <__floatsisf+0x12>
    1f1e:	90 95       	com	r25
    1f20:	80 95       	com	r24
    1f22:	70 95       	com	r23
    1f24:	61 95       	neg	r22
    1f26:	7f 4f       	sbci	r23, 0xFF	; 255
    1f28:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	99 23       	and	r25, r25
    1f2e:	a9 f0       	breq	.+42     	; 0x1f5a <__floatsisf+0x40>
    1f30:	f9 2f       	mov	r31, r25
    1f32:	96 e9       	ldi	r25, 0x96	; 150
    1f34:	bb 27       	eor	r27, r27
    1f36:	93 95       	inc	r25
    1f38:	f6 95       	lsr	r31
    1f3a:	87 95       	ror	r24
    1f3c:	77 95       	ror	r23
    1f3e:	67 95       	ror	r22
    1f40:	b7 95       	ror	r27
    1f42:	f1 11       	cpse	r31, r1
    1f44:	f8 cf       	rjmp	.-16     	; 0x1f36 <__floatsisf+0x1c>
    1f46:	fa f4       	brpl	.+62     	; 0x1f86 <__floatsisf+0x6c>
    1f48:	bb 0f       	add	r27, r27
    1f4a:	11 f4       	brne	.+4      	; 0x1f50 <__floatsisf+0x36>
    1f4c:	60 ff       	sbrs	r22, 0
    1f4e:	1b c0       	rjmp	.+54     	; 0x1f86 <__floatsisf+0x6c>
    1f50:	6f 5f       	subi	r22, 0xFF	; 255
    1f52:	7f 4f       	sbci	r23, 0xFF	; 255
    1f54:	8f 4f       	sbci	r24, 0xFF	; 255
    1f56:	9f 4f       	sbci	r25, 0xFF	; 255
    1f58:	16 c0       	rjmp	.+44     	; 0x1f86 <__floatsisf+0x6c>
    1f5a:	88 23       	and	r24, r24
    1f5c:	11 f0       	breq	.+4      	; 0x1f62 <__floatsisf+0x48>
    1f5e:	96 e9       	ldi	r25, 0x96	; 150
    1f60:	11 c0       	rjmp	.+34     	; 0x1f84 <__floatsisf+0x6a>
    1f62:	77 23       	and	r23, r23
    1f64:	21 f0       	breq	.+8      	; 0x1f6e <__floatsisf+0x54>
    1f66:	9e e8       	ldi	r25, 0x8E	; 142
    1f68:	87 2f       	mov	r24, r23
    1f6a:	76 2f       	mov	r23, r22
    1f6c:	05 c0       	rjmp	.+10     	; 0x1f78 <__floatsisf+0x5e>
    1f6e:	66 23       	and	r22, r22
    1f70:	71 f0       	breq	.+28     	; 0x1f8e <__floatsisf+0x74>
    1f72:	96 e8       	ldi	r25, 0x86	; 134
    1f74:	86 2f       	mov	r24, r22
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	2a f0       	brmi	.+10     	; 0x1f86 <__floatsisf+0x6c>
    1f7c:	9a 95       	dec	r25
    1f7e:	66 0f       	add	r22, r22
    1f80:	77 1f       	adc	r23, r23
    1f82:	88 1f       	adc	r24, r24
    1f84:	da f7       	brpl	.-10     	; 0x1f7c <__floatsisf+0x62>
    1f86:	88 0f       	add	r24, r24
    1f88:	96 95       	lsr	r25
    1f8a:	87 95       	ror	r24
    1f8c:	97 f9       	bld	r25, 7
    1f8e:	08 95       	ret

00001f90 <__fp_cmp>:
    1f90:	99 0f       	add	r25, r25
    1f92:	00 08       	sbc	r0, r0
    1f94:	55 0f       	add	r21, r21
    1f96:	aa 0b       	sbc	r26, r26
    1f98:	e0 e8       	ldi	r30, 0x80	; 128
    1f9a:	fe ef       	ldi	r31, 0xFE	; 254
    1f9c:	16 16       	cp	r1, r22
    1f9e:	17 06       	cpc	r1, r23
    1fa0:	e8 07       	cpc	r30, r24
    1fa2:	f9 07       	cpc	r31, r25
    1fa4:	c0 f0       	brcs	.+48     	; 0x1fd6 <__fp_cmp+0x46>
    1fa6:	12 16       	cp	r1, r18
    1fa8:	13 06       	cpc	r1, r19
    1faa:	e4 07       	cpc	r30, r20
    1fac:	f5 07       	cpc	r31, r21
    1fae:	98 f0       	brcs	.+38     	; 0x1fd6 <__fp_cmp+0x46>
    1fb0:	62 1b       	sub	r22, r18
    1fb2:	73 0b       	sbc	r23, r19
    1fb4:	84 0b       	sbc	r24, r20
    1fb6:	95 0b       	sbc	r25, r21
    1fb8:	39 f4       	brne	.+14     	; 0x1fc8 <__fp_cmp+0x38>
    1fba:	0a 26       	eor	r0, r26
    1fbc:	61 f0       	breq	.+24     	; 0x1fd6 <__fp_cmp+0x46>
    1fbe:	23 2b       	or	r18, r19
    1fc0:	24 2b       	or	r18, r20
    1fc2:	25 2b       	or	r18, r21
    1fc4:	21 f4       	brne	.+8      	; 0x1fce <__fp_cmp+0x3e>
    1fc6:	08 95       	ret
    1fc8:	0a 26       	eor	r0, r26
    1fca:	09 f4       	brne	.+2      	; 0x1fce <__fp_cmp+0x3e>
    1fcc:	a1 40       	sbci	r26, 0x01	; 1
    1fce:	a6 95       	lsr	r26
    1fd0:	8f ef       	ldi	r24, 0xFF	; 255
    1fd2:	81 1d       	adc	r24, r1
    1fd4:	81 1d       	adc	r24, r1
    1fd6:	08 95       	ret

00001fd8 <__fp_inf>:
    1fd8:	97 f9       	bld	r25, 7
    1fda:	9f 67       	ori	r25, 0x7F	; 127
    1fdc:	80 e8       	ldi	r24, 0x80	; 128
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	08 95       	ret

00001fe4 <__fp_nan>:
    1fe4:	9f ef       	ldi	r25, 0xFF	; 255
    1fe6:	80 ec       	ldi	r24, 0xC0	; 192
    1fe8:	08 95       	ret

00001fea <__fp_pscA>:
    1fea:	00 24       	eor	r0, r0
    1fec:	0a 94       	dec	r0
    1fee:	16 16       	cp	r1, r22
    1ff0:	17 06       	cpc	r1, r23
    1ff2:	18 06       	cpc	r1, r24
    1ff4:	09 06       	cpc	r0, r25
    1ff6:	08 95       	ret

00001ff8 <__fp_pscB>:
    1ff8:	00 24       	eor	r0, r0
    1ffa:	0a 94       	dec	r0
    1ffc:	12 16       	cp	r1, r18
    1ffe:	13 06       	cpc	r1, r19
    2000:	14 06       	cpc	r1, r20
    2002:	05 06       	cpc	r0, r21
    2004:	08 95       	ret

00002006 <__fp_round>:
    2006:	09 2e       	mov	r0, r25
    2008:	03 94       	inc	r0
    200a:	00 0c       	add	r0, r0
    200c:	11 f4       	brne	.+4      	; 0x2012 <__fp_round+0xc>
    200e:	88 23       	and	r24, r24
    2010:	52 f0       	brmi	.+20     	; 0x2026 <__fp_round+0x20>
    2012:	bb 0f       	add	r27, r27
    2014:	40 f4       	brcc	.+16     	; 0x2026 <__fp_round+0x20>
    2016:	bf 2b       	or	r27, r31
    2018:	11 f4       	brne	.+4      	; 0x201e <__fp_round+0x18>
    201a:	60 ff       	sbrs	r22, 0
    201c:	04 c0       	rjmp	.+8      	; 0x2026 <__fp_round+0x20>
    201e:	6f 5f       	subi	r22, 0xFF	; 255
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	8f 4f       	sbci	r24, 0xFF	; 255
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	08 95       	ret

00002028 <__fp_split3>:
    2028:	57 fd       	sbrc	r21, 7
    202a:	90 58       	subi	r25, 0x80	; 128
    202c:	44 0f       	add	r20, r20
    202e:	55 1f       	adc	r21, r21
    2030:	59 f0       	breq	.+22     	; 0x2048 <__fp_splitA+0x10>
    2032:	5f 3f       	cpi	r21, 0xFF	; 255
    2034:	71 f0       	breq	.+28     	; 0x2052 <__fp_splitA+0x1a>
    2036:	47 95       	ror	r20

00002038 <__fp_splitA>:
    2038:	88 0f       	add	r24, r24
    203a:	97 fb       	bst	r25, 7
    203c:	99 1f       	adc	r25, r25
    203e:	61 f0       	breq	.+24     	; 0x2058 <__fp_splitA+0x20>
    2040:	9f 3f       	cpi	r25, 0xFF	; 255
    2042:	79 f0       	breq	.+30     	; 0x2062 <__fp_splitA+0x2a>
    2044:	87 95       	ror	r24
    2046:	08 95       	ret
    2048:	12 16       	cp	r1, r18
    204a:	13 06       	cpc	r1, r19
    204c:	14 06       	cpc	r1, r20
    204e:	55 1f       	adc	r21, r21
    2050:	f2 cf       	rjmp	.-28     	; 0x2036 <__fp_split3+0xe>
    2052:	46 95       	lsr	r20
    2054:	f1 df       	rcall	.-30     	; 0x2038 <__fp_splitA>
    2056:	08 c0       	rjmp	.+16     	; 0x2068 <__fp_splitA+0x30>
    2058:	16 16       	cp	r1, r22
    205a:	17 06       	cpc	r1, r23
    205c:	18 06       	cpc	r1, r24
    205e:	99 1f       	adc	r25, r25
    2060:	f1 cf       	rjmp	.-30     	; 0x2044 <__fp_splitA+0xc>
    2062:	86 95       	lsr	r24
    2064:	71 05       	cpc	r23, r1
    2066:	61 05       	cpc	r22, r1
    2068:	08 94       	sec
    206a:	08 95       	ret

0000206c <__fp_zero>:
    206c:	e8 94       	clt

0000206e <__fp_szero>:
    206e:	bb 27       	eor	r27, r27
    2070:	66 27       	eor	r22, r22
    2072:	77 27       	eor	r23, r23
    2074:	cb 01       	movw	r24, r22
    2076:	97 f9       	bld	r25, 7
    2078:	08 95       	ret

0000207a <__gesf2>:
    207a:	8a df       	rcall	.-236    	; 0x1f90 <__fp_cmp>
    207c:	08 f4       	brcc	.+2      	; 0x2080 <__gesf2+0x6>
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	08 95       	ret
    2082:	0e f0       	brts	.+2      	; 0x2086 <__gesf2+0xc>
    2084:	a6 c0       	rjmp	.+332    	; 0x21d2 <__fp_mpack>
    2086:	ae cf       	rjmp	.-164    	; 0x1fe4 <__fp_nan>
    2088:	68 94       	set
    208a:	a6 cf       	rjmp	.-180    	; 0x1fd8 <__fp_inf>

0000208c <log>:
    208c:	d5 df       	rcall	.-86     	; 0x2038 <__fp_splitA>
    208e:	c8 f3       	brcs	.-14     	; 0x2082 <__gesf2+0x8>
    2090:	99 23       	and	r25, r25
    2092:	d1 f3       	breq	.-12     	; 0x2088 <__gesf2+0xe>
    2094:	c6 f3       	brts	.-16     	; 0x2086 <__gesf2+0xc>
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	1f 93       	push	r17
    209c:	0f 93       	push	r16
    209e:	ff 92       	push	r15
    20a0:	c9 2f       	mov	r28, r25
    20a2:	dd 27       	eor	r29, r29
    20a4:	88 23       	and	r24, r24
    20a6:	2a f0       	brmi	.+10     	; 0x20b2 <log+0x26>
    20a8:	21 97       	sbiw	r28, 0x01	; 1
    20aa:	66 0f       	add	r22, r22
    20ac:	77 1f       	adc	r23, r23
    20ae:	88 1f       	adc	r24, r24
    20b0:	da f7       	brpl	.-10     	; 0x20a8 <log+0x1c>
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f eb       	ldi	r21, 0xBF	; 191
    20ba:	9f e3       	ldi	r25, 0x3F	; 63
    20bc:	88 39       	cpi	r24, 0x98	; 152
    20be:	20 f0       	brcs	.+8      	; 0x20c8 <log+0x3c>
    20c0:	80 3e       	cpi	r24, 0xE0	; 224
    20c2:	30 f0       	brcs	.+12     	; 0x20d0 <log+0x44>
    20c4:	21 96       	adiw	r28, 0x01	; 1
    20c6:	8f 77       	andi	r24, 0x7F	; 127
    20c8:	25 de       	rcall	.-950    	; 0x1d14 <__addsf3>
    20ca:	ec ea       	ldi	r30, 0xAC	; 172
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <log+0x4a>
    20d0:	21 de       	rcall	.-958    	; 0x1d14 <__addsf3>
    20d2:	e9 ed       	ldi	r30, 0xD9	; 217
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	8b d0       	rcall	.+278    	; 0x21ee <__fp_powser>
    20d8:	8b 01       	movw	r16, r22
    20da:	be 01       	movw	r22, r28
    20dc:	ec 01       	movw	r28, r24
    20de:	fb 2e       	mov	r15, r27
    20e0:	6f 57       	subi	r22, 0x7F	; 127
    20e2:	71 09       	sbc	r23, r1
    20e4:	75 95       	asr	r23
    20e6:	77 1f       	adc	r23, r23
    20e8:	88 0b       	sbc	r24, r24
    20ea:	99 0b       	sbc	r25, r25
    20ec:	16 df       	rcall	.-468    	; 0x1f1a <__floatsisf>
    20ee:	28 e1       	ldi	r18, 0x18	; 24
    20f0:	32 e7       	ldi	r19, 0x72	; 114
    20f2:	41 e3       	ldi	r20, 0x31	; 49
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	16 d0       	rcall	.+44     	; 0x2124 <__mulsf3x>
    20f8:	af 2d       	mov	r26, r15
    20fa:	98 01       	movw	r18, r16
    20fc:	ae 01       	movw	r20, r28
    20fe:	ff 90       	pop	r15
    2100:	0f 91       	pop	r16
    2102:	1f 91       	pop	r17
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	16 de       	rcall	.-980    	; 0x1d36 <__addsf3x>
    210a:	7d cf       	rjmp	.-262    	; 0x2006 <__fp_round>

0000210c <__mulsf3>:
    210c:	0b d0       	rcall	.+22     	; 0x2124 <__mulsf3x>
    210e:	7b cf       	rjmp	.-266    	; 0x2006 <__fp_round>
    2110:	6c df       	rcall	.-296    	; 0x1fea <__fp_pscA>
    2112:	28 f0       	brcs	.+10     	; 0x211e <__mulsf3+0x12>
    2114:	71 df       	rcall	.-286    	; 0x1ff8 <__fp_pscB>
    2116:	18 f0       	brcs	.+6      	; 0x211e <__mulsf3+0x12>
    2118:	95 23       	and	r25, r21
    211a:	09 f0       	breq	.+2      	; 0x211e <__mulsf3+0x12>
    211c:	5d cf       	rjmp	.-326    	; 0x1fd8 <__fp_inf>
    211e:	62 cf       	rjmp	.-316    	; 0x1fe4 <__fp_nan>
    2120:	11 24       	eor	r1, r1
    2122:	a5 cf       	rjmp	.-182    	; 0x206e <__fp_szero>

00002124 <__mulsf3x>:
    2124:	81 df       	rcall	.-254    	; 0x2028 <__fp_split3>
    2126:	a0 f3       	brcs	.-24     	; 0x2110 <__mulsf3+0x4>

00002128 <__mulsf3_pse>:
    2128:	95 9f       	mul	r25, r21
    212a:	d1 f3       	breq	.-12     	; 0x2120 <__mulsf3+0x14>
    212c:	95 0f       	add	r25, r21
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	55 1f       	adc	r21, r21
    2132:	62 9f       	mul	r22, r18
    2134:	f0 01       	movw	r30, r0
    2136:	72 9f       	mul	r23, r18
    2138:	bb 27       	eor	r27, r27
    213a:	f0 0d       	add	r31, r0
    213c:	b1 1d       	adc	r27, r1
    213e:	63 9f       	mul	r22, r19
    2140:	aa 27       	eor	r26, r26
    2142:	f0 0d       	add	r31, r0
    2144:	b1 1d       	adc	r27, r1
    2146:	aa 1f       	adc	r26, r26
    2148:	64 9f       	mul	r22, r20
    214a:	66 27       	eor	r22, r22
    214c:	b0 0d       	add	r27, r0
    214e:	a1 1d       	adc	r26, r1
    2150:	66 1f       	adc	r22, r22
    2152:	82 9f       	mul	r24, r18
    2154:	22 27       	eor	r18, r18
    2156:	b0 0d       	add	r27, r0
    2158:	a1 1d       	adc	r26, r1
    215a:	62 1f       	adc	r22, r18
    215c:	73 9f       	mul	r23, r19
    215e:	b0 0d       	add	r27, r0
    2160:	a1 1d       	adc	r26, r1
    2162:	62 1f       	adc	r22, r18
    2164:	83 9f       	mul	r24, r19
    2166:	a0 0d       	add	r26, r0
    2168:	61 1d       	adc	r22, r1
    216a:	22 1f       	adc	r18, r18
    216c:	74 9f       	mul	r23, r20
    216e:	33 27       	eor	r19, r19
    2170:	a0 0d       	add	r26, r0
    2172:	61 1d       	adc	r22, r1
    2174:	23 1f       	adc	r18, r19
    2176:	84 9f       	mul	r24, r20
    2178:	60 0d       	add	r22, r0
    217a:	21 1d       	adc	r18, r1
    217c:	82 2f       	mov	r24, r18
    217e:	76 2f       	mov	r23, r22
    2180:	6a 2f       	mov	r22, r26
    2182:	11 24       	eor	r1, r1
    2184:	9f 57       	subi	r25, 0x7F	; 127
    2186:	50 40       	sbci	r21, 0x00	; 0
    2188:	8a f0       	brmi	.+34     	; 0x21ac <__mulsf3_pse+0x84>
    218a:	e1 f0       	breq	.+56     	; 0x21c4 <__mulsf3_pse+0x9c>
    218c:	88 23       	and	r24, r24
    218e:	4a f0       	brmi	.+18     	; 0x21a2 <__mulsf3_pse+0x7a>
    2190:	ee 0f       	add	r30, r30
    2192:	ff 1f       	adc	r31, r31
    2194:	bb 1f       	adc	r27, r27
    2196:	66 1f       	adc	r22, r22
    2198:	77 1f       	adc	r23, r23
    219a:	88 1f       	adc	r24, r24
    219c:	91 50       	subi	r25, 0x01	; 1
    219e:	50 40       	sbci	r21, 0x00	; 0
    21a0:	a9 f7       	brne	.-22     	; 0x218c <__mulsf3_pse+0x64>
    21a2:	9e 3f       	cpi	r25, 0xFE	; 254
    21a4:	51 05       	cpc	r21, r1
    21a6:	70 f0       	brcs	.+28     	; 0x21c4 <__mulsf3_pse+0x9c>
    21a8:	17 cf       	rjmp	.-466    	; 0x1fd8 <__fp_inf>
    21aa:	61 cf       	rjmp	.-318    	; 0x206e <__fp_szero>
    21ac:	5f 3f       	cpi	r21, 0xFF	; 255
    21ae:	ec f3       	brlt	.-6      	; 0x21aa <__mulsf3_pse+0x82>
    21b0:	98 3e       	cpi	r25, 0xE8	; 232
    21b2:	dc f3       	brlt	.-10     	; 0x21aa <__mulsf3_pse+0x82>
    21b4:	86 95       	lsr	r24
    21b6:	77 95       	ror	r23
    21b8:	67 95       	ror	r22
    21ba:	b7 95       	ror	r27
    21bc:	f7 95       	ror	r31
    21be:	e7 95       	ror	r30
    21c0:	9f 5f       	subi	r25, 0xFF	; 255
    21c2:	c1 f7       	brne	.-16     	; 0x21b4 <__mulsf3_pse+0x8c>
    21c4:	fe 2b       	or	r31, r30
    21c6:	88 0f       	add	r24, r24
    21c8:	91 1d       	adc	r25, r1
    21ca:	96 95       	lsr	r25
    21cc:	87 95       	ror	r24
    21ce:	97 f9       	bld	r25, 7
    21d0:	08 95       	ret

000021d2 <__fp_mpack>:
    21d2:	9f 3f       	cpi	r25, 0xFF	; 255
    21d4:	31 f0       	breq	.+12     	; 0x21e2 <__fp_mpack_finite+0xc>

000021d6 <__fp_mpack_finite>:
    21d6:	91 50       	subi	r25, 0x01	; 1
    21d8:	20 f4       	brcc	.+8      	; 0x21e2 <__fp_mpack_finite+0xc>
    21da:	87 95       	ror	r24
    21dc:	77 95       	ror	r23
    21de:	67 95       	ror	r22
    21e0:	b7 95       	ror	r27
    21e2:	88 0f       	add	r24, r24
    21e4:	91 1d       	adc	r25, r1
    21e6:	96 95       	lsr	r25
    21e8:	87 95       	ror	r24
    21ea:	97 f9       	bld	r25, 7
    21ec:	08 95       	ret

000021ee <__fp_powser>:
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	1f 93       	push	r17
    21f4:	0f 93       	push	r16
    21f6:	ff 92       	push	r15
    21f8:	ef 92       	push	r14
    21fa:	df 92       	push	r13
    21fc:	7b 01       	movw	r14, r22
    21fe:	8c 01       	movw	r16, r24
    2200:	68 94       	set
    2202:	05 c0       	rjmp	.+10     	; 0x220e <__fp_powser+0x20>
    2204:	da 2e       	mov	r13, r26
    2206:	ef 01       	movw	r28, r30
    2208:	8d df       	rcall	.-230    	; 0x2124 <__mulsf3x>
    220a:	fe 01       	movw	r30, r28
    220c:	e8 94       	clt
    220e:	a5 91       	lpm	r26, Z+
    2210:	25 91       	lpm	r18, Z+
    2212:	35 91       	lpm	r19, Z+
    2214:	45 91       	lpm	r20, Z+
    2216:	55 91       	lpm	r21, Z+
    2218:	ae f3       	brts	.-22     	; 0x2204 <__fp_powser+0x16>
    221a:	ef 01       	movw	r28, r30
    221c:	8c dd       	rcall	.-1256   	; 0x1d36 <__addsf3x>
    221e:	fe 01       	movw	r30, r28
    2220:	97 01       	movw	r18, r14
    2222:	a8 01       	movw	r20, r16
    2224:	da 94       	dec	r13
    2226:	79 f7       	brne	.-34     	; 0x2206 <__fp_powser+0x18>
    2228:	df 90       	pop	r13
    222a:	ef 90       	pop	r14
    222c:	ff 90       	pop	r15
    222e:	0f 91       	pop	r16
    2230:	1f 91       	pop	r17
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <__divmodsi4>:
    2238:	97 fb       	bst	r25, 7
    223a:	09 2e       	mov	r0, r25
    223c:	05 26       	eor	r0, r21
    223e:	0e d0       	rcall	.+28     	; 0x225c <__divmodsi4_neg1>
    2240:	57 fd       	sbrc	r21, 7
    2242:	04 d0       	rcall	.+8      	; 0x224c <__divmodsi4_neg2>
    2244:	4b d0       	rcall	.+150    	; 0x22dc <__udivmodsi4>
    2246:	0a d0       	rcall	.+20     	; 0x225c <__divmodsi4_neg1>
    2248:	00 1c       	adc	r0, r0
    224a:	38 f4       	brcc	.+14     	; 0x225a <__divmodsi4_exit>

0000224c <__divmodsi4_neg2>:
    224c:	50 95       	com	r21
    224e:	40 95       	com	r20
    2250:	30 95       	com	r19
    2252:	21 95       	neg	r18
    2254:	3f 4f       	sbci	r19, 0xFF	; 255
    2256:	4f 4f       	sbci	r20, 0xFF	; 255
    2258:	5f 4f       	sbci	r21, 0xFF	; 255

0000225a <__divmodsi4_exit>:
    225a:	08 95       	ret

0000225c <__divmodsi4_neg1>:
    225c:	f6 f7       	brtc	.-4      	; 0x225a <__divmodsi4_exit>
    225e:	90 95       	com	r25
    2260:	80 95       	com	r24
    2262:	70 95       	com	r23
    2264:	61 95       	neg	r22
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	8f 4f       	sbci	r24, 0xFF	; 255
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	08 95       	ret

0000226e <__prologue_saves__>:
    226e:	2f 92       	push	r2
    2270:	3f 92       	push	r3
    2272:	4f 92       	push	r4
    2274:	5f 92       	push	r5
    2276:	6f 92       	push	r6
    2278:	7f 92       	push	r7
    227a:	8f 92       	push	r8
    227c:	9f 92       	push	r9
    227e:	af 92       	push	r10
    2280:	bf 92       	push	r11
    2282:	cf 92       	push	r12
    2284:	df 92       	push	r13
    2286:	ef 92       	push	r14
    2288:	ff 92       	push	r15
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	ca 1b       	sub	r28, r26
    2298:	db 0b       	sbc	r29, r27
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	09 94       	ijmp

000022a6 <__epilogue_restores__>:
    22a6:	2a 88       	ldd	r2, Y+18	; 0x12
    22a8:	39 88       	ldd	r3, Y+17	; 0x11
    22aa:	48 88       	ldd	r4, Y+16	; 0x10
    22ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    22ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    22b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    22b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    22b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    22b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    22b8:	b9 84       	ldd	r11, Y+9	; 0x09
    22ba:	c8 84       	ldd	r12, Y+8	; 0x08
    22bc:	df 80       	ldd	r13, Y+7	; 0x07
    22be:	ee 80       	ldd	r14, Y+6	; 0x06
    22c0:	fd 80       	ldd	r15, Y+5	; 0x05
    22c2:	0c 81       	ldd	r16, Y+4	; 0x04
    22c4:	1b 81       	ldd	r17, Y+3	; 0x03
    22c6:	aa 81       	ldd	r26, Y+2	; 0x02
    22c8:	b9 81       	ldd	r27, Y+1	; 0x01
    22ca:	ce 0f       	add	r28, r30
    22cc:	d1 1d       	adc	r29, r1
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	ed 01       	movw	r28, r26
    22da:	08 95       	ret

000022dc <__udivmodsi4>:
    22dc:	a1 e2       	ldi	r26, 0x21	; 33
    22de:	1a 2e       	mov	r1, r26
    22e0:	aa 1b       	sub	r26, r26
    22e2:	bb 1b       	sub	r27, r27
    22e4:	fd 01       	movw	r30, r26
    22e6:	0d c0       	rjmp	.+26     	; 0x2302 <__udivmodsi4_ep>

000022e8 <__udivmodsi4_loop>:
    22e8:	aa 1f       	adc	r26, r26
    22ea:	bb 1f       	adc	r27, r27
    22ec:	ee 1f       	adc	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	a2 17       	cp	r26, r18
    22f2:	b3 07       	cpc	r27, r19
    22f4:	e4 07       	cpc	r30, r20
    22f6:	f5 07       	cpc	r31, r21
    22f8:	20 f0       	brcs	.+8      	; 0x2302 <__udivmodsi4_ep>
    22fa:	a2 1b       	sub	r26, r18
    22fc:	b3 0b       	sbc	r27, r19
    22fe:	e4 0b       	sbc	r30, r20
    2300:	f5 0b       	sbc	r31, r21

00002302 <__udivmodsi4_ep>:
    2302:	66 1f       	adc	r22, r22
    2304:	77 1f       	adc	r23, r23
    2306:	88 1f       	adc	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	1a 94       	dec	r1
    230c:	69 f7       	brne	.-38     	; 0x22e8 <__udivmodsi4_loop>
    230e:	60 95       	com	r22
    2310:	70 95       	com	r23
    2312:	80 95       	com	r24
    2314:	90 95       	com	r25
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
    231a:	bd 01       	movw	r22, r26
    231c:	cf 01       	movw	r24, r30
    231e:	08 95       	ret

00002320 <__ftoa_engine>:
    2320:	28 30       	cpi	r18, 0x08	; 8
    2322:	08 f0       	brcs	.+2      	; 0x2326 <__ftoa_engine+0x6>
    2324:	27 e0       	ldi	r18, 0x07	; 7
    2326:	33 27       	eor	r19, r19
    2328:	da 01       	movw	r26, r20
    232a:	99 0f       	add	r25, r25
    232c:	31 1d       	adc	r19, r1
    232e:	87 fd       	sbrc	r24, 7
    2330:	91 60       	ori	r25, 0x01	; 1
    2332:	00 96       	adiw	r24, 0x00	; 0
    2334:	61 05       	cpc	r22, r1
    2336:	71 05       	cpc	r23, r1
    2338:	39 f4       	brne	.+14     	; 0x2348 <__ftoa_engine+0x28>
    233a:	32 60       	ori	r19, 0x02	; 2
    233c:	2e 5f       	subi	r18, 0xFE	; 254
    233e:	3d 93       	st	X+, r19
    2340:	30 e3       	ldi	r19, 0x30	; 48
    2342:	2a 95       	dec	r18
    2344:	e1 f7       	brne	.-8      	; 0x233e <__ftoa_engine+0x1e>
    2346:	08 95       	ret
    2348:	9f 3f       	cpi	r25, 0xFF	; 255
    234a:	30 f0       	brcs	.+12     	; 0x2358 <__ftoa_engine+0x38>
    234c:	80 38       	cpi	r24, 0x80	; 128
    234e:	71 05       	cpc	r23, r1
    2350:	61 05       	cpc	r22, r1
    2352:	09 f0       	breq	.+2      	; 0x2356 <__ftoa_engine+0x36>
    2354:	3c 5f       	subi	r19, 0xFC	; 252
    2356:	3c 5f       	subi	r19, 0xFC	; 252
    2358:	3d 93       	st	X+, r19
    235a:	91 30       	cpi	r25, 0x01	; 1
    235c:	08 f0       	brcs	.+2      	; 0x2360 <__ftoa_engine+0x40>
    235e:	80 68       	ori	r24, 0x80	; 128
    2360:	91 1d       	adc	r25, r1
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	1f 93       	push	r17
    2368:	0f 93       	push	r16
    236a:	ff 92       	push	r15
    236c:	ef 92       	push	r14
    236e:	19 2f       	mov	r17, r25
    2370:	98 7f       	andi	r25, 0xF8	; 248
    2372:	96 95       	lsr	r25
    2374:	e9 2f       	mov	r30, r25
    2376:	96 95       	lsr	r25
    2378:	96 95       	lsr	r25
    237a:	e9 0f       	add	r30, r25
    237c:	ff 27       	eor	r31, r31
    237e:	e8 59       	subi	r30, 0x98	; 152
    2380:	fe 4f       	sbci	r31, 0xFE	; 254
    2382:	99 27       	eor	r25, r25
    2384:	33 27       	eor	r19, r19
    2386:	ee 24       	eor	r14, r14
    2388:	ff 24       	eor	r15, r15
    238a:	a7 01       	movw	r20, r14
    238c:	e7 01       	movw	r28, r14
    238e:	05 90       	lpm	r0, Z+
    2390:	08 94       	sec
    2392:	07 94       	ror	r0
    2394:	28 f4       	brcc	.+10     	; 0x23a0 <__ftoa_engine+0x80>
    2396:	36 0f       	add	r19, r22
    2398:	e7 1e       	adc	r14, r23
    239a:	f8 1e       	adc	r15, r24
    239c:	49 1f       	adc	r20, r25
    239e:	51 1d       	adc	r21, r1
    23a0:	66 0f       	add	r22, r22
    23a2:	77 1f       	adc	r23, r23
    23a4:	88 1f       	adc	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	06 94       	lsr	r0
    23aa:	a1 f7       	brne	.-24     	; 0x2394 <__ftoa_engine+0x74>
    23ac:	05 90       	lpm	r0, Z+
    23ae:	07 94       	ror	r0
    23b0:	28 f4       	brcc	.+10     	; 0x23bc <__ftoa_engine+0x9c>
    23b2:	e7 0e       	add	r14, r23
    23b4:	f8 1e       	adc	r15, r24
    23b6:	49 1f       	adc	r20, r25
    23b8:	56 1f       	adc	r21, r22
    23ba:	c1 1d       	adc	r28, r1
    23bc:	77 0f       	add	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	66 1f       	adc	r22, r22
    23c4:	06 94       	lsr	r0
    23c6:	a1 f7       	brne	.-24     	; 0x23b0 <__ftoa_engine+0x90>
    23c8:	05 90       	lpm	r0, Z+
    23ca:	07 94       	ror	r0
    23cc:	28 f4       	brcc	.+10     	; 0x23d8 <__ftoa_engine+0xb8>
    23ce:	f8 0e       	add	r15, r24
    23d0:	49 1f       	adc	r20, r25
    23d2:	56 1f       	adc	r21, r22
    23d4:	c7 1f       	adc	r28, r23
    23d6:	d1 1d       	adc	r29, r1
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	66 1f       	adc	r22, r22
    23de:	77 1f       	adc	r23, r23
    23e0:	06 94       	lsr	r0
    23e2:	a1 f7       	brne	.-24     	; 0x23cc <__ftoa_engine+0xac>
    23e4:	05 90       	lpm	r0, Z+
    23e6:	07 94       	ror	r0
    23e8:	20 f4       	brcc	.+8      	; 0x23f2 <__ftoa_engine+0xd2>
    23ea:	49 0f       	add	r20, r25
    23ec:	56 1f       	adc	r21, r22
    23ee:	c7 1f       	adc	r28, r23
    23f0:	d8 1f       	adc	r29, r24
    23f2:	99 0f       	add	r25, r25
    23f4:	66 1f       	adc	r22, r22
    23f6:	77 1f       	adc	r23, r23
    23f8:	88 1f       	adc	r24, r24
    23fa:	06 94       	lsr	r0
    23fc:	a9 f7       	brne	.-22     	; 0x23e8 <__ftoa_engine+0xc8>
    23fe:	84 91       	lpm	r24, Z+
    2400:	10 95       	com	r17
    2402:	17 70       	andi	r17, 0x07	; 7
    2404:	41 f0       	breq	.+16     	; 0x2416 <__ftoa_engine+0xf6>
    2406:	d6 95       	lsr	r29
    2408:	c7 95       	ror	r28
    240a:	57 95       	ror	r21
    240c:	47 95       	ror	r20
    240e:	f7 94       	ror	r15
    2410:	e7 94       	ror	r14
    2412:	1a 95       	dec	r17
    2414:	c1 f7       	brne	.-16     	; 0x2406 <__ftoa_engine+0xe6>
    2416:	ee e0       	ldi	r30, 0x0E	; 14
    2418:	f1 e0       	ldi	r31, 0x01	; 1
    241a:	68 94       	set
    241c:	15 90       	lpm	r1, Z+
    241e:	15 91       	lpm	r17, Z+
    2420:	35 91       	lpm	r19, Z+
    2422:	65 91       	lpm	r22, Z+
    2424:	95 91       	lpm	r25, Z+
    2426:	05 90       	lpm	r0, Z+
    2428:	7f e2       	ldi	r23, 0x2F	; 47
    242a:	73 95       	inc	r23
    242c:	e1 18       	sub	r14, r1
    242e:	f1 0a       	sbc	r15, r17
    2430:	43 0b       	sbc	r20, r19
    2432:	56 0b       	sbc	r21, r22
    2434:	c9 0b       	sbc	r28, r25
    2436:	d0 09       	sbc	r29, r0
    2438:	c0 f7       	brcc	.-16     	; 0x242a <__ftoa_engine+0x10a>
    243a:	e1 0c       	add	r14, r1
    243c:	f1 1e       	adc	r15, r17
    243e:	43 1f       	adc	r20, r19
    2440:	56 1f       	adc	r21, r22
    2442:	c9 1f       	adc	r28, r25
    2444:	d0 1d       	adc	r29, r0
    2446:	7e f4       	brtc	.+30     	; 0x2466 <__ftoa_engine+0x146>
    2448:	70 33       	cpi	r23, 0x30	; 48
    244a:	11 f4       	brne	.+4      	; 0x2450 <__ftoa_engine+0x130>
    244c:	8a 95       	dec	r24
    244e:	e6 cf       	rjmp	.-52     	; 0x241c <__ftoa_engine+0xfc>
    2450:	e8 94       	clt
    2452:	01 50       	subi	r16, 0x01	; 1
    2454:	30 f0       	brcs	.+12     	; 0x2462 <__ftoa_engine+0x142>
    2456:	08 0f       	add	r16, r24
    2458:	0a f4       	brpl	.+2      	; 0x245c <__ftoa_engine+0x13c>
    245a:	00 27       	eor	r16, r16
    245c:	02 17       	cp	r16, r18
    245e:	08 f4       	brcc	.+2      	; 0x2462 <__ftoa_engine+0x142>
    2460:	20 2f       	mov	r18, r16
    2462:	23 95       	inc	r18
    2464:	02 2f       	mov	r16, r18
    2466:	7a 33       	cpi	r23, 0x3A	; 58
    2468:	28 f0       	brcs	.+10     	; 0x2474 <__ftoa_engine+0x154>
    246a:	79 e3       	ldi	r23, 0x39	; 57
    246c:	7d 93       	st	X+, r23
    246e:	2a 95       	dec	r18
    2470:	e9 f7       	brne	.-6      	; 0x246c <__ftoa_engine+0x14c>
    2472:	10 c0       	rjmp	.+32     	; 0x2494 <__ftoa_engine+0x174>
    2474:	7d 93       	st	X+, r23
    2476:	2a 95       	dec	r18
    2478:	89 f6       	brne	.-94     	; 0x241c <__ftoa_engine+0xfc>
    247a:	06 94       	lsr	r0
    247c:	97 95       	ror	r25
    247e:	67 95       	ror	r22
    2480:	37 95       	ror	r19
    2482:	17 95       	ror	r17
    2484:	17 94       	ror	r1
    2486:	e1 18       	sub	r14, r1
    2488:	f1 0a       	sbc	r15, r17
    248a:	43 0b       	sbc	r20, r19
    248c:	56 0b       	sbc	r21, r22
    248e:	c9 0b       	sbc	r28, r25
    2490:	d0 09       	sbc	r29, r0
    2492:	98 f0       	brcs	.+38     	; 0x24ba <__ftoa_engine+0x19a>
    2494:	23 95       	inc	r18
    2496:	7e 91       	ld	r23, -X
    2498:	73 95       	inc	r23
    249a:	7a 33       	cpi	r23, 0x3A	; 58
    249c:	08 f0       	brcs	.+2      	; 0x24a0 <__ftoa_engine+0x180>
    249e:	70 e3       	ldi	r23, 0x30	; 48
    24a0:	7c 93       	st	X, r23
    24a2:	20 13       	cpse	r18, r16
    24a4:	b8 f7       	brcc	.-18     	; 0x2494 <__ftoa_engine+0x174>
    24a6:	7e 91       	ld	r23, -X
    24a8:	70 61       	ori	r23, 0x10	; 16
    24aa:	7d 93       	st	X+, r23
    24ac:	30 f0       	brcs	.+12     	; 0x24ba <__ftoa_engine+0x19a>
    24ae:	83 95       	inc	r24
    24b0:	71 e3       	ldi	r23, 0x31	; 49
    24b2:	7d 93       	st	X+, r23
    24b4:	70 e3       	ldi	r23, 0x30	; 48
    24b6:	2a 95       	dec	r18
    24b8:	e1 f7       	brne	.-8      	; 0x24b2 <__ftoa_engine+0x192>
    24ba:	11 24       	eor	r1, r1
    24bc:	ef 90       	pop	r14
    24be:	ff 90       	pop	r15
    24c0:	0f 91       	pop	r16
    24c2:	1f 91       	pop	r17
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	99 27       	eor	r25, r25
    24ca:	87 fd       	sbrc	r24, 7
    24cc:	90 95       	com	r25
    24ce:	08 95       	ret

000024d0 <strnlen_P>:
    24d0:	fc 01       	movw	r30, r24
    24d2:	05 90       	lpm	r0, Z+
    24d4:	61 50       	subi	r22, 0x01	; 1
    24d6:	70 40       	sbci	r23, 0x00	; 0
    24d8:	01 10       	cpse	r0, r1
    24da:	d8 f7       	brcc	.-10     	; 0x24d2 <strnlen_P+0x2>
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	8e 0f       	add	r24, r30
    24e2:	9f 1f       	adc	r25, r31
    24e4:	08 95       	ret

000024e6 <strnlen>:
    24e6:	fc 01       	movw	r30, r24
    24e8:	61 50       	subi	r22, 0x01	; 1
    24ea:	70 40       	sbci	r23, 0x00	; 0
    24ec:	01 90       	ld	r0, Z+
    24ee:	01 10       	cpse	r0, r1
    24f0:	d8 f7       	brcc	.-10     	; 0x24e8 <strnlen+0x2>
    24f2:	80 95       	com	r24
    24f4:	90 95       	com	r25
    24f6:	8e 0f       	add	r24, r30
    24f8:	9f 1f       	adc	r25, r31
    24fa:	08 95       	ret

000024fc <fputc>:
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	8c 01       	movw	r16, r24
    2506:	eb 01       	movw	r28, r22
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	81 ff       	sbrs	r24, 1
    250c:	1b c0       	rjmp	.+54     	; 0x2544 <fputc+0x48>
    250e:	82 ff       	sbrs	r24, 2
    2510:	0d c0       	rjmp	.+26     	; 0x252c <fputc+0x30>
    2512:	2e 81       	ldd	r18, Y+6	; 0x06
    2514:	3f 81       	ldd	r19, Y+7	; 0x07
    2516:	8c 81       	ldd	r24, Y+4	; 0x04
    2518:	9d 81       	ldd	r25, Y+5	; 0x05
    251a:	28 17       	cp	r18, r24
    251c:	39 07       	cpc	r19, r25
    251e:	64 f4       	brge	.+24     	; 0x2538 <fputc+0x3c>
    2520:	e8 81       	ld	r30, Y
    2522:	f9 81       	ldd	r31, Y+1	; 0x01
    2524:	01 93       	st	Z+, r16
    2526:	f9 83       	std	Y+1, r31	; 0x01
    2528:	e8 83       	st	Y, r30
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <fputc+0x3c>
    252c:	e8 85       	ldd	r30, Y+8	; 0x08
    252e:	f9 85       	ldd	r31, Y+9	; 0x09
    2530:	80 2f       	mov	r24, r16
    2532:	09 95       	icall
    2534:	89 2b       	or	r24, r25
    2536:	31 f4       	brne	.+12     	; 0x2544 <fputc+0x48>
    2538:	8e 81       	ldd	r24, Y+6	; 0x06
    253a:	9f 81       	ldd	r25, Y+7	; 0x07
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	9f 83       	std	Y+7, r25	; 0x07
    2540:	8e 83       	std	Y+6, r24	; 0x06
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <fputc+0x4c>
    2544:	0f ef       	ldi	r16, 0xFF	; 255
    2546:	1f ef       	ldi	r17, 0xFF	; 255
    2548:	c8 01       	movw	r24, r16
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	1f 91       	pop	r17
    2550:	0f 91       	pop	r16
    2552:	08 95       	ret

00002554 <sprintf>:
    2554:	ae e0       	ldi	r26, 0x0E	; 14
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e0 eb       	ldi	r30, 0xB0	; 176
    255a:	f2 e1       	ldi	r31, 0x12	; 18
    255c:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x1c>
    2560:	0d 89       	ldd	r16, Y+21	; 0x15
    2562:	1e 89       	ldd	r17, Y+22	; 0x16
    2564:	86 e0       	ldi	r24, 0x06	; 6
    2566:	8c 83       	std	Y+4, r24	; 0x04
    2568:	1a 83       	std	Y+2, r17	; 0x02
    256a:	09 83       	std	Y+1, r16	; 0x01
    256c:	8f ef       	ldi	r24, 0xFF	; 255
    256e:	9f e7       	ldi	r25, 0x7F	; 127
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	9e 01       	movw	r18, r28
    2576:	27 5e       	subi	r18, 0xE7	; 231
    2578:	3f 4f       	sbci	r19, 0xFF	; 255
    257a:	ce 01       	movw	r24, r28
    257c:	01 96       	adiw	r24, 0x01	; 1
    257e:	6f 89       	ldd	r22, Y+23	; 0x17
    2580:	78 8d       	ldd	r23, Y+24	; 0x18
    2582:	a9 01       	movw	r20, r18
    2584:	0e 94 02 0b 	call	0x1604	; 0x1604 <vfprintf>
    2588:	2f 81       	ldd	r18, Y+7	; 0x07
    258a:	38 85       	ldd	r19, Y+8	; 0x08
    258c:	02 0f       	add	r16, r18
    258e:	13 1f       	adc	r17, r19
    2590:	f8 01       	movw	r30, r16
    2592:	10 82       	st	Z, r1
    2594:	2e 96       	adiw	r28, 0x0e	; 14
    2596:	e4 e0       	ldi	r30, 0x04	; 4
    2598:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x1c>

0000259c <__ultoa_invert>:
    259c:	fa 01       	movw	r30, r20
    259e:	aa 27       	eor	r26, r26
    25a0:	28 30       	cpi	r18, 0x08	; 8
    25a2:	51 f1       	breq	.+84     	; 0x25f8 <__ultoa_invert+0x5c>
    25a4:	20 31       	cpi	r18, 0x10	; 16
    25a6:	81 f1       	breq	.+96     	; 0x2608 <__ultoa_invert+0x6c>
    25a8:	e8 94       	clt
    25aa:	6f 93       	push	r22
    25ac:	6e 7f       	andi	r22, 0xFE	; 254
    25ae:	6e 5f       	subi	r22, 0xFE	; 254
    25b0:	7f 4f       	sbci	r23, 0xFF	; 255
    25b2:	8f 4f       	sbci	r24, 0xFF	; 255
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	af 4f       	sbci	r26, 0xFF	; 255
    25b8:	b1 e0       	ldi	r27, 0x01	; 1
    25ba:	3e d0       	rcall	.+124    	; 0x2638 <__ultoa_invert+0x9c>
    25bc:	b4 e0       	ldi	r27, 0x04	; 4
    25be:	3c d0       	rcall	.+120    	; 0x2638 <__ultoa_invert+0x9c>
    25c0:	67 0f       	add	r22, r23
    25c2:	78 1f       	adc	r23, r24
    25c4:	89 1f       	adc	r24, r25
    25c6:	9a 1f       	adc	r25, r26
    25c8:	a1 1d       	adc	r26, r1
    25ca:	68 0f       	add	r22, r24
    25cc:	79 1f       	adc	r23, r25
    25ce:	8a 1f       	adc	r24, r26
    25d0:	91 1d       	adc	r25, r1
    25d2:	a1 1d       	adc	r26, r1
    25d4:	6a 0f       	add	r22, r26
    25d6:	71 1d       	adc	r23, r1
    25d8:	81 1d       	adc	r24, r1
    25da:	91 1d       	adc	r25, r1
    25dc:	a1 1d       	adc	r26, r1
    25de:	20 d0       	rcall	.+64     	; 0x2620 <__ultoa_invert+0x84>
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <__ultoa_invert+0x48>
    25e2:	68 94       	set
    25e4:	3f 91       	pop	r19
    25e6:	2a e0       	ldi	r18, 0x0A	; 10
    25e8:	26 9f       	mul	r18, r22
    25ea:	11 24       	eor	r1, r1
    25ec:	30 19       	sub	r19, r0
    25ee:	30 5d       	subi	r19, 0xD0	; 208
    25f0:	31 93       	st	Z+, r19
    25f2:	de f6       	brtc	.-74     	; 0x25aa <__ultoa_invert+0xe>
    25f4:	cf 01       	movw	r24, r30
    25f6:	08 95       	ret
    25f8:	46 2f       	mov	r20, r22
    25fa:	47 70       	andi	r20, 0x07	; 7
    25fc:	40 5d       	subi	r20, 0xD0	; 208
    25fe:	41 93       	st	Z+, r20
    2600:	b3 e0       	ldi	r27, 0x03	; 3
    2602:	0f d0       	rcall	.+30     	; 0x2622 <__ultoa_invert+0x86>
    2604:	c9 f7       	brne	.-14     	; 0x25f8 <__ultoa_invert+0x5c>
    2606:	f6 cf       	rjmp	.-20     	; 0x25f4 <__ultoa_invert+0x58>
    2608:	46 2f       	mov	r20, r22
    260a:	4f 70       	andi	r20, 0x0F	; 15
    260c:	40 5d       	subi	r20, 0xD0	; 208
    260e:	4a 33       	cpi	r20, 0x3A	; 58
    2610:	18 f0       	brcs	.+6      	; 0x2618 <__ultoa_invert+0x7c>
    2612:	49 5d       	subi	r20, 0xD9	; 217
    2614:	31 fd       	sbrc	r19, 1
    2616:	40 52       	subi	r20, 0x20	; 32
    2618:	41 93       	st	Z+, r20
    261a:	02 d0       	rcall	.+4      	; 0x2620 <__ultoa_invert+0x84>
    261c:	a9 f7       	brne	.-22     	; 0x2608 <__ultoa_invert+0x6c>
    261e:	ea cf       	rjmp	.-44     	; 0x25f4 <__ultoa_invert+0x58>
    2620:	b4 e0       	ldi	r27, 0x04	; 4
    2622:	a6 95       	lsr	r26
    2624:	97 95       	ror	r25
    2626:	87 95       	ror	r24
    2628:	77 95       	ror	r23
    262a:	67 95       	ror	r22
    262c:	ba 95       	dec	r27
    262e:	c9 f7       	brne	.-14     	; 0x2622 <__ultoa_invert+0x86>
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	61 05       	cpc	r22, r1
    2634:	71 05       	cpc	r23, r1
    2636:	08 95       	ret
    2638:	9b 01       	movw	r18, r22
    263a:	ac 01       	movw	r20, r24
    263c:	0a 2e       	mov	r0, r26
    263e:	06 94       	lsr	r0
    2640:	57 95       	ror	r21
    2642:	47 95       	ror	r20
    2644:	37 95       	ror	r19
    2646:	27 95       	ror	r18
    2648:	ba 95       	dec	r27
    264a:	c9 f7       	brne	.-14     	; 0x263e <__ultoa_invert+0xa2>
    264c:	62 0f       	add	r22, r18
    264e:	73 1f       	adc	r23, r19
    2650:	84 1f       	adc	r24, r20
    2652:	95 1f       	adc	r25, r21
    2654:	a0 1d       	adc	r26, r0
    2656:	08 95       	ret

00002658 <_exit>:
    2658:	f8 94       	cli

0000265a <__stop_program>:
    265a:	ff cf       	rjmp	.-2      	; 0x265a <__stop_program>
