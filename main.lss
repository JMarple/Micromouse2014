
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000303e  000030d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000303e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800108  00800108  000030da  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  000030da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000047f  00000000  00000000  0000319a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000155e  00000000  00000000  00003619  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077c  00000000  00000000  00004b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fc0  00000000  00000000  000052f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  000062b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000645  00000000  00000000  00006664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c2  00000000  00000000  00006ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_17>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_21>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__vector_32>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 08       	sbc	r3, r15
      da:	00 00       	nop
      dc:	00 be       	out	0x30, r0	; 48
      de:	92 24       	eor	r9, r2
      e0:	49 12       	cpse	r4, r25
      e2:	3e ab       	std	Y+54, r19	; 0x36
      e4:	aa aa       	std	Y+50, r10	; 0x32
      e6:	2a be       	out	0x3a, r2	; 58
      e8:	cd cc       	rjmp	.-1638   	; 0xfffffa84 <__eeprom_end+0xff7efa84>
      ea:	cc 4c       	sbci	r28, 0xCC	; 204
      ec:	3e 00       	.word	0x003e	; ????
      ee:	00 00       	nop
      f0:	80 be       	out	0x30, r8	; 48
      f2:	ab aa       	std	Y+51, r10	; 0x33
      f4:	aa aa       	std	Y+50, r10	; 0x32
      f6:	3e 00       	.word	0x003e	; ????
      f8:	00 00       	nop
      fa:	00 bf       	out	0x30, r16	; 48
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 00       	.word	0x003f	; ????
     102:	00 00       	nop
     104:	00 00       	nop
     106:	08 41       	sbci	r16, 0x18	; 24
     108:	78 d3       	rcall	.+1776   	; 0x7fa <rotateLeftWithFix+0x86>
     10a:	bb 43       	sbci	r27, 0x3B	; 59
     10c:	87 d1       	rcall	.+782    	; 0x41c <main+0x1a8>
     10e:	13 3d       	cpi	r17, 0xD3	; 211
     110:	19 0e       	add	r1, r25
     112:	3c c3       	rjmp	.+1656   	; 0x78c <rotateLeftWithFix+0x18>
     114:	bd 42       	sbci	r27, 0x2D	; 45
     116:	82 ad       	ldd	r24, Z+58	; 0x3a
     118:	2b 3e       	cpi	r18, 0xEB	; 235
     11a:	68 ec       	ldi	r22, 0xC8	; 200
     11c:	82 76       	andi	r24, 0x62	; 98
     11e:	be d9       	rcall	.-3204   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
     120:	8f e1       	ldi	r24, 0x1F	; 31
     122:	a9 3e       	cpi	r26, 0xE9	; 233
     124:	4c 80       	ldd	r4, Y+4	; 0x04
     126:	ef ff       	.word	0xffef	; ????
     128:	be 01       	movw	r22, r28
     12a:	c4 ff       	sbrs	r28, 4
     12c:	7f 3f       	cpi	r23, 0xFF	; 255
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	00 6e       	ori	r16, 0xE0	; 224

00000133 <__c.1790>:
     133:	6e 61 6e 00                                         nan.

00000137 <__c.1788>:
     137:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     147:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     157:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     167:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     177:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     187:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     197:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a7:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b7:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c7:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d7:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e7:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f7:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     207:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     217:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     227:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	da e0       	ldi	r29, 0x0A	; 10
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b1 e0       	ldi	r27, 0x01	; 1
     248:	ee e3       	ldi	r30, 0x3E	; 62
     24a:	f0 e3       	ldi	r31, 0x30	; 48
     24c:	02 c0       	rjmp	.+4      	; 0x252 <.do_copy_data_start>

0000024e <.do_copy_data_loop>:
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0

00000252 <.do_copy_data_start>:
     252:	a8 30       	cpi	r26, 0x08	; 8
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <.do_copy_data_loop>

00000258 <__do_clear_bss>:
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	a8 e0       	ldi	r26, 0x08	; 8
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a6 37       	cpi	r26, 0x76	; 118
     264:	b1 07       	cpc	r27, r17
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 1d 18 	jmp	0x303a	; 0x303a <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:

extern volatile int gyroSum;
extern volatile int gyroComp;

int main(void)
{
     274:	2f 92       	push	r2
     276:	3f 92       	push	r3
     278:	4f 92       	push	r4
     27a:	5f 92       	push	r5
     27c:	6f 92       	push	r6
     27e:	7f 92       	push	r7
     280:	8f 92       	push	r8
     282:	9f 92       	push	r9
     284:	af 92       	push	r10
     286:	bf 92       	push	r11
     288:	cf 92       	push	r12
     28a:	df 92       	push	r13
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	df 93       	push	r29
     296:	cf 93       	push	r28
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	60 97       	sbiw	r28, 0x10	; 16
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
	setupADC();	
     2a8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <setupADC>
	setupStepperMotor();
     2ac:	0e 94 5f 0c 	call	0x18be	; 0x18be <setupStepperMotor>
	startTimer();
     2b0:	0e 94 05 08 	call	0x100a	; 0x100a <startTimer>
	
	
	USART_init();
     2b4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <USART_init>
	
	mouse.velocity = 0;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	80 93 50 01 	sts	0x0150, r24
     2c4:	90 93 51 01 	sts	0x0151, r25
     2c8:	a0 93 52 01 	sts	0x0152, r26
     2cc:	b0 93 53 01 	sts	0x0153, r27
	mouse.maxVelocity = 5000;
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e4       	ldi	r25, 0x40	; 64
     2d4:	ac e9       	ldi	r26, 0x9C	; 156
     2d6:	b5 e4       	ldi	r27, 0x45	; 69
     2d8:	80 93 4c 01 	sts	0x014C, r24
     2dc:	90 93 4d 01 	sts	0x014D, r25
     2e0:	a0 93 4e 01 	sts	0x014E, r26
     2e4:	b0 93 4f 01 	sts	0x014F, r27
	mouse.acceleration = 2000;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	aa ef       	ldi	r26, 0xFA	; 250
     2ee:	b4 e4       	ldi	r27, 0x44	; 68
     2f0:	80 93 44 01 	sts	0x0144, r24
     2f4:	90 93 45 01 	sts	0x0145, r25
     2f8:	a0 93 46 01 	sts	0x0146, r26
     2fc:	b0 93 47 01 	sts	0x0147, r27
	mouse.deceleration = 10000;
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e4       	ldi	r25, 0x40	; 64
     304:	ac e1       	ldi	r26, 0x1C	; 28
     306:	b6 e4       	ldi	r27, 0x46	; 70
     308:	80 93 48 01 	sts	0x0148, r24
     30c:	90 93 49 01 	sts	0x0149, r25
     310:	a0 93 4a 01 	sts	0x014A, r26
     314:	b0 93 4b 01 	sts	0x014B, r27

	enableDrive(1);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 82 0c 	call	0x1904	; 0x1904 <enableDrive>
	turnOnTimers(1,1);
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <turnOnTimers>
     32c:	1e 82       	std	Y+6, r1	; 0x06
     32e:	1d 82       	std	Y+5, r1	; 0x05
	
	
	for(int i = 0; i < 30; i++)
	{		
		int right = isWallRight();
     330:	0e 94 c5 07 	call	0xf8a	; 0xf8a <isWallRight>
     334:	9c 83       	std	Y+4, r25	; 0x04
     336:	8b 83       	std	Y+3, r24	; 0x03
		int front = isWallFront();
     338:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <isWallFront>
     33c:	98 8b       	std	Y+16, r25	; 0x10
     33e:	8f 87       	std	Y+15, r24	; 0x0f
		int left = isWallLeft();
     340:	0e 94 b1 07 	call	0xf62	; 0xf62 <isWallLeft>
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	89 83       	std	Y+1, r24	; 0x01

		if(front)
     348:	8f 85       	ldd	r24, Y+15	; 0x0f
     34a:	98 89       	ldd	r25, Y+16	; 0x10
     34c:	89 2b       	or	r24, r25
     34e:	09 f4       	brne	.+2      	; 0x352 <main+0xde>
     350:	84 c0       	rjmp	.+264    	; 0x45a <main+0x1e6>
		{
			float left = getFrontLeftIR();
     352:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <getFrontLeftIR>
     356:	7b 01       	movw	r14, r22
     358:	8c 01       	movw	r16, r24
			float right = getFrontRightIR();
     35a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <getFrontRightIR>
     35e:	9b 01       	movw	r18, r22
     360:	ac 01       	movw	r20, r24
			float length = (left+right)/2;
     362:	c8 01       	movw	r24, r16
     364:	b7 01       	movw	r22, r14
     366:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	5f e3       	ldi	r21, 0x3F	; 63
     372:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
			
			length = length - 3;
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e4       	ldi	r20, 0x40	; 64
     37c:	50 e4       	ldi	r21, 0x40	; 64
     37e:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
     382:	1b 01       	movw	r2, r22
     384:	2c 01       	movw	r4, r24
			if(length < 0)
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
     392:	88 23       	and	r24, r24
     394:	54 f4       	brge	.+20     	; 0x3aa <main+0x136>
			{
				setDirection(1, 1);
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
				length = -length;
     3a2:	57 fa       	bst	r5, 7
     3a4:	50 94       	com	r5
     3a6:	57 f8       	bld	r5, 7
     3a8:	50 94       	com	r5
			}
			straight((length)*42, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     3aa:	e0 90 50 01 	lds	r14, 0x0150
     3ae:	f0 90 51 01 	lds	r15, 0x0151
     3b2:	00 91 52 01 	lds	r16, 0x0152
     3b6:	10 91 53 01 	lds	r17, 0x0153
     3ba:	a0 90 4c 01 	lds	r10, 0x014C
     3be:	b0 90 4d 01 	lds	r11, 0x014D
     3c2:	c0 90 4e 01 	lds	r12, 0x014E
     3c6:	d0 90 4f 01 	lds	r13, 0x014F
     3ca:	60 90 44 01 	lds	r6, 0x0144
     3ce:	70 90 45 01 	lds	r7, 0x0145
     3d2:	80 90 46 01 	lds	r8, 0x0146
     3d6:	90 90 47 01 	lds	r9, 0x0147
     3da:	80 91 48 01 	lds	r24, 0x0148
     3de:	90 91 49 01 	lds	r25, 0x0149
     3e2:	a0 91 4a 01 	lds	r26, 0x014A
     3e6:	b0 91 4b 01 	lds	r27, 0x014B
     3ea:	8f 83       	std	Y+7, r24	; 0x07
     3ec:	98 87       	std	Y+8, r25	; 0x08
     3ee:	a9 87       	std	Y+9, r26	; 0x09
     3f0:	ba 87       	std	Y+10, r27	; 0x0a
     3f2:	c2 01       	movw	r24, r4
     3f4:	b1 01       	movw	r22, r2
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	48 e2       	ldi	r20, 0x28	; 40
     3fc:	52 e4       	ldi	r21, 0x42	; 66
     3fe:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
     402:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     406:	6b 87       	std	Y+11, r22	; 0x0b
     408:	7c 87       	std	Y+12, r23	; 0x0c
     40a:	8d 87       	std	Y+13, r24	; 0x0d
     40c:	9e 87       	std	Y+14, r25	; 0x0e
     40e:	c8 01       	movw	r24, r16
     410:	b7 01       	movw	r22, r14
     412:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     416:	1b 01       	movw	r2, r22
     418:	2c 01       	movw	r4, r24
     41a:	c6 01       	movw	r24, r12
     41c:	b5 01       	movw	r22, r10
     41e:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     422:	7b 01       	movw	r14, r22
     424:	8c 01       	movw	r16, r24
     426:	c4 01       	movw	r24, r8
     428:	b3 01       	movw	r22, r6
     42a:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     42e:	3b 01       	movw	r6, r22
     430:	4c 01       	movw	r8, r24
     432:	6f 81       	ldd	r22, Y+7	; 0x07
     434:	78 85       	ldd	r23, Y+8	; 0x08
     436:	89 85       	ldd	r24, Y+9	; 0x09
     438:	9a 85       	ldd	r25, Y+10	; 0x0a
     43a:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     43e:	5b 01       	movw	r10, r22
     440:	6c 01       	movw	r12, r24
     442:	6b 85       	ldd	r22, Y+11	; 0x0b
     444:	7c 85       	ldd	r23, Y+12	; 0x0c
     446:	8d 85       	ldd	r24, Y+13	; 0x0d
     448:	9e 85       	ldd	r25, Y+14	; 0x0e
     44a:	a1 01       	movw	r20, r2
     44c:	97 01       	movw	r18, r14
     44e:	00 e0       	ldi	r16, 0x00	; 0
     450:	10 e0       	ldi	r17, 0x00	; 0
     452:	73 01       	movw	r14, r6
     454:	65 01       	movw	r12, r10
     456:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
			
		}
		
		float angle = getFrontAngle();
     45a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <getFrontAngle>
     45e:	7b 01       	movw	r14, r22
     460:	8c 01       	movw	r16, r24
		
		int lFront = getFrontLeftIR();
     462:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <getFrontLeftIR>
		int rFront = getFrontRightIR();
     466:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <getFrontRightIR>
		
		
		if(!right)
     46a:	ab 81       	ldd	r26, Y+3	; 0x03
     46c:	bc 81       	ldd	r27, Y+4	; 0x04
     46e:	ab 2b       	or	r26, r27
     470:	61 f4       	brne	.+24     	; 0x48a <main+0x216>
		{
			if(front)
     472:	ef 85       	ldd	r30, Y+15	; 0x0f
     474:	f8 89       	ldd	r31, Y+16	; 0x10
     476:	ef 2b       	or	r30, r31
     478:	29 f0       	breq	.+10     	; 0x484 <main+0x210>
				rotateRightWithFix(angle);
     47a:	c8 01       	movw	r24, r16
     47c:	b7 01       	movw	r22, r14
     47e:	0e 94 3f 03 	call	0x67e	; 0x67e <rotateRightWithFix>
     482:	13 c0       	rjmp	.+38     	; 0x4aa <main+0x236>
			else
				rotateRight();
     484:	0e 94 35 04 	call	0x86a	; 0x86a <rotateRight>
     488:	10 c0       	rjmp	.+32     	; 0x4aa <main+0x236>
		}
		else if(front && !left)
     48a:	8f 85       	ldd	r24, Y+15	; 0x0f
     48c:	98 89       	ldd	r25, Y+16	; 0x10
     48e:	89 2b       	or	r24, r25
     490:	61 f0       	breq	.+24     	; 0x4aa <main+0x236>
     492:	a9 81       	ldd	r26, Y+1	; 0x01
     494:	ba 81       	ldd	r27, Y+2	; 0x02
     496:	ab 2b       	or	r26, r27
     498:	29 f4       	brne	.+10     	; 0x4a4 <main+0x230>
		{
			rotateLeftWithFix(angle);
     49a:	c8 01       	movw	r24, r16
     49c:	b7 01       	movw	r22, r14
     49e:	0e 94 ba 03 	call	0x774	; 0x774 <rotateLeftWithFix>
     4a2:	1d c0       	rjmp	.+58     	; 0x4de <main+0x26a>
		}
		else if(front)
		{
			moveBackwardsAndCorrect();
     4a4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <moveBackwardsAndCorrect>
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <main+0x246>
		}	
		
		if(left && right)		
     4aa:	e9 81       	ldd	r30, Y+1	; 0x01
     4ac:	fa 81       	ldd	r31, Y+2	; 0x02
     4ae:	ef 2b       	or	r30, r31
     4b0:	91 f0       	breq	.+36     	; 0x4d6 <main+0x262>
     4b2:	8b 81       	ldd	r24, Y+3	; 0x03
     4b4:	9c 81       	ldd	r25, Y+4	; 0x04
     4b6:	89 2b       	or	r24, r25
     4b8:	39 f0       	breq	.+14     	; 0x4c8 <main+0x254>
		{
			mouse.IR_CORRECT = 30;			
     4ba:	ae e1       	ldi	r26, 0x1E	; 30
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	b0 93 55 01 	sts	0x0155, r27
     4c2:	a0 93 54 01 	sts	0x0154, r26
     4c6:	16 c0       	rjmp	.+44     	; 0x4f4 <main+0x280>
		}
		else if(left)
		{
			mouse.IR_CORRECT_LEFT = 30;
     4c8:	ee e1       	ldi	r30, 0x1E	; 30
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	f0 93 57 01 	sts	0x0157, r31
     4d0:	e0 93 56 01 	sts	0x0156, r30
     4d4:	0f c0       	rjmp	.+30     	; 0x4f4 <main+0x280>
		}
		else if(right)
     4d6:	8b 81       	ldd	r24, Y+3	; 0x03
     4d8:	9c 81       	ldd	r25, Y+4	; 0x04
     4da:	89 2b       	or	r24, r25
     4dc:	39 f0       	breq	.+14     	; 0x4ec <main+0x278>
		{
			mouse.IR_CORRECT_RIGHT = 30;
     4de:	ae e1       	ldi	r26, 0x1E	; 30
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	b0 93 59 01 	sts	0x0159, r27
     4e6:	a0 93 58 01 	sts	0x0158, r26
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <main+0x280>
		}
		else
		{
			turnOnLeds(0);
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <turnOnLeds>
		}
		
		moveForwardAndStop();
     4f4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <moveForwardAndStop>
		
		mouse.IR_CORRECT = 0;	
     4f8:	10 92 55 01 	sts	0x0155, r1
     4fc:	10 92 54 01 	sts	0x0154, r1
		mouse.IR_CORRECT_LEFT = 0;
     500:	10 92 57 01 	sts	0x0157, r1
     504:	10 92 56 01 	sts	0x0156, r1
		mouse.IR_CORRECT_RIGHT = 0;
     508:	10 92 59 01 	sts	0x0159, r1
     50c:	10 92 58 01 	sts	0x0158, r1

	enableDrive(1);
	turnOnTimers(1,1);
	
	
	for(int i = 0; i < 30; i++)
     510:	ed 81       	ldd	r30, Y+5	; 0x05
     512:	fe 81       	ldd	r31, Y+6	; 0x06
     514:	31 96       	adiw	r30, 0x01	; 1
     516:	fe 83       	std	Y+6, r31	; 0x06
     518:	ed 83       	std	Y+5, r30	; 0x05
     51a:	7e 97       	sbiw	r30, 0x1e	; 30
     51c:	09 f0       	breq	.+2      	; 0x520 <main+0x2ac>
     51e:	08 cf       	rjmp	.-496    	; 0x330 <main+0xbc>
		mouse.IR_CORRECT = 0;	
		mouse.IR_CORRECT_LEFT = 0;
		mouse.IR_CORRECT_RIGHT = 0;
	}
	
	turnOnTimers(0, 0);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <turnOnTimers>
	enableDrive(0);
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 82 0c 	call	0x1904	; 0x1904 <enableDrive>
	

	while(1==1)
	{
		float left = getFrontLeftIR();
     534:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <getFrontLeftIR>
     538:	7b 01       	movw	r14, r22
     53a:	8c 01       	movw	r16, r24
		float right = getFrontRightIR();
     53c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <getFrontRightIR>
     540:	5b 01       	movw	r10, r22
     542:	6c 01       	movw	r12, r24
	
		printNum(left);
     544:	c8 01       	movw	r24, r16
     546:	b7 01       	movw	r22, r14
     548:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <printNum>
		print(",");
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <print>
		printlnNum(right);
     554:	c6 01       	movw	r24, r12
     556:	b5 01       	movw	r22, r10
     558:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <printlnNum>
     55c:	eb cf       	rjmp	.-42     	; 0x534 <main+0x2c0>

0000055e <fixAngle>:
	
	straight(320+addAngle, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 	
}

void fixAngle(float angle)
{
     55e:	2f 92       	push	r2
     560:	3f 92       	push	r3
     562:	4f 92       	push	r4
     564:	5f 92       	push	r5
     566:	6f 92       	push	r6
     568:	7f 92       	push	r7
     56a:	8f 92       	push	r8
     56c:	9f 92       	push	r9
     56e:	af 92       	push	r10
     570:	bf 92       	push	r11
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	00 d0       	rcall	.+0      	; 0x584 <fixAngle+0x26>
     584:	00 d0       	rcall	.+0      	; 0x586 <fixAngle+0x28>
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	7b 01       	movw	r14, r22
     58c:	8c 01       	movw	r16, r24
	if(angle > 0)
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
     59a:	18 16       	cp	r1, r24
     59c:	3c f4       	brge	.+14     	; 0x5ac <fixAngle+0x4e>
	{
		setDirection(0, 1);
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
     5aa:	0a c0       	rjmp	.+20     	; 0x5c0 <fixAngle+0x62>
	}
	else
	{
		setDirection(1, 0);
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
		angle = -angle;
     5b8:	17 fb       	bst	r17, 7
     5ba:	10 95       	com	r17
     5bc:	17 f9       	bld	r17, 7
     5be:	10 95       	com	r17
	}
	
	straight((int)angle*3, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 
     5c0:	a0 90 4c 01 	lds	r10, 0x014C
     5c4:	b0 90 4d 01 	lds	r11, 0x014D
     5c8:	c0 90 4e 01 	lds	r12, 0x014E
     5cc:	d0 90 4f 01 	lds	r13, 0x014F
     5d0:	60 90 44 01 	lds	r6, 0x0144
     5d4:	70 90 45 01 	lds	r7, 0x0145
     5d8:	80 90 46 01 	lds	r8, 0x0146
     5dc:	90 90 47 01 	lds	r9, 0x0147
     5e0:	80 91 48 01 	lds	r24, 0x0148
     5e4:	90 91 49 01 	lds	r25, 0x0149
     5e8:	a0 91 4a 01 	lds	r26, 0x014A
     5ec:	b0 91 4b 01 	lds	r27, 0x014B
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	9a 83       	std	Y+2, r25	; 0x02
     5f4:	ab 83       	std	Y+3, r26	; 0x03
     5f6:	bc 83       	std	Y+4, r27	; 0x04
     5f8:	c8 01       	movw	r24, r16
     5fa:	b7 01       	movw	r22, r14
     5fc:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     600:	7b 01       	movw	r14, r22
     602:	ee 0c       	add	r14, r14
     604:	ff 1c       	adc	r15, r15
     606:	e6 0e       	add	r14, r22
     608:	f7 1e       	adc	r15, r23
     60a:	00 27       	eor	r16, r16
     60c:	f7 fc       	sbrc	r15, 7
     60e:	00 95       	com	r16
     610:	10 2f       	mov	r17, r16
     612:	c6 01       	movw	r24, r12
     614:	b5 01       	movw	r22, r10
     616:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     61a:	1b 01       	movw	r2, r22
     61c:	2c 01       	movw	r4, r24
     61e:	c4 01       	movw	r24, r8
     620:	b3 01       	movw	r22, r6
     622:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     626:	3b 01       	movw	r6, r22
     628:	4c 01       	movw	r8, r24
     62a:	69 81       	ldd	r22, Y+1	; 0x01
     62c:	7a 81       	ldd	r23, Y+2	; 0x02
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	9c 81       	ldd	r25, Y+4	; 0x04
     632:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     636:	5b 01       	movw	r10, r22
     638:	6c 01       	movw	r12, r24
     63a:	c8 01       	movw	r24, r16
     63c:	b7 01       	movw	r22, r14
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	91 01       	movw	r18, r2
     644:	00 e0       	ldi	r16, 0x00	; 0
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	73 01       	movw	r14, r6
     64a:	65 01       	movw	r12, r10
     64c:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	9f 90       	pop	r9
     66e:	8f 90       	pop	r8
     670:	7f 90       	pop	r7
     672:	6f 90       	pop	r6
     674:	5f 90       	pop	r5
     676:	4f 90       	pop	r4
     678:	3f 90       	pop	r3
     67a:	2f 90       	pop	r2
     67c:	08 95       	ret

0000067e <rotateRightWithFix>:
	
	straight(320+addAngle, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 	
}

void rotateRightWithFix(float angle)
{
     67e:	2f 92       	push	r2
     680:	3f 92       	push	r3
     682:	4f 92       	push	r4
     684:	5f 92       	push	r5
     686:	6f 92       	push	r6
     688:	7f 92       	push	r7
     68a:	8f 92       	push	r8
     68c:	9f 92       	push	r9
     68e:	af 92       	push	r10
     690:	bf 92       	push	r11
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <rotateRightWithFix+0x26>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <rotateRightWithFix+0x28>
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
	setDirection(1, 0);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	
	int addAngle = -angle*3;
	
	straight(320+addAngle, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 	
     6ba:	a0 90 4c 01 	lds	r10, 0x014C
     6be:	b0 90 4d 01 	lds	r11, 0x014D
     6c2:	c0 90 4e 01 	lds	r12, 0x014E
     6c6:	d0 90 4f 01 	lds	r13, 0x014F
     6ca:	e4 e4       	ldi	r30, 0x44	; 68
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	61 90       	ld	r6, Z+
     6d0:	71 90       	ld	r7, Z+
     6d2:	81 90       	ld	r8, Z+
     6d4:	91 90       	ld	r9, Z+
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	a2 81       	ldd	r26, Z+2	; 0x02
     6dc:	b3 81       	ldd	r27, Z+3	; 0x03
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	ab 83       	std	Y+3, r26	; 0x03
     6e4:	bc 83       	std	Y+4, r27	; 0x04
     6e6:	c8 01       	movw	r24, r16
     6e8:	b7 01       	movw	r22, r14
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e4       	ldi	r20, 0x40	; 64
     6f0:	50 ec       	ldi	r21, 0xC0	; 192
     6f2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
     6f6:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     6fa:	60 5c       	subi	r22, 0xC0	; 192
     6fc:	7e 4f       	sbci	r23, 0xFE	; 254
     6fe:	1b 01       	movw	r2, r22
     700:	44 24       	eor	r4, r4
     702:	37 fc       	sbrc	r3, 7
     704:	40 94       	com	r4
     706:	54 2c       	mov	r5, r4
     708:	c6 01       	movw	r24, r12
     70a:	b5 01       	movw	r22, r10
     70c:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     710:	7b 01       	movw	r14, r22
     712:	8c 01       	movw	r16, r24
     714:	c4 01       	movw	r24, r8
     716:	b3 01       	movw	r22, r6
     718:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     71c:	3b 01       	movw	r6, r22
     71e:	4c 01       	movw	r8, r24
     720:	69 81       	ldd	r22, Y+1	; 0x01
     722:	7a 81       	ldd	r23, Y+2	; 0x02
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     72c:	5b 01       	movw	r10, r22
     72e:	6c 01       	movw	r12, r24
     730:	c2 01       	movw	r24, r4
     732:	b1 01       	movw	r22, r2
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	97 01       	movw	r18, r14
     73a:	00 e0       	ldi	r16, 0x00	; 0
     73c:	10 e0       	ldi	r17, 0x00	; 0
     73e:	73 01       	movw	r14, r6
     740:	65 01       	movw	r12, r10
     742:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	cf 91       	pop	r28
     750:	df 91       	pop	r29
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	7f 90       	pop	r7
     768:	6f 90       	pop	r6
     76a:	5f 90       	pop	r5
     76c:	4f 90       	pop	r4
     76e:	3f 90       	pop	r3
     770:	2f 90       	pop	r2
     772:	08 95       	ret

00000774 <rotateLeftWithFix>:
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void rotateLeftWithFix(float angle)
{
     774:	2f 92       	push	r2
     776:	3f 92       	push	r3
     778:	4f 92       	push	r4
     77a:	5f 92       	push	r5
     77c:	6f 92       	push	r6
     77e:	7f 92       	push	r7
     780:	8f 92       	push	r8
     782:	9f 92       	push	r9
     784:	af 92       	push	r10
     786:	bf 92       	push	r11
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	00 d0       	rcall	.+0      	; 0x79a <rotateLeftWithFix+0x26>
     79a:	00 d0       	rcall	.+0      	; 0x79c <rotateLeftWithFix+0x28>
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	7b 01       	movw	r14, r22
     7a2:	8c 01       	movw	r16, r24
	//Rotate Left
	setDirection(0, 1);
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	
	int addAngle = angle*3;
	
	straight(320+addAngle, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration); 	
     7b0:	a0 90 4c 01 	lds	r10, 0x014C
     7b4:	b0 90 4d 01 	lds	r11, 0x014D
     7b8:	c0 90 4e 01 	lds	r12, 0x014E
     7bc:	d0 90 4f 01 	lds	r13, 0x014F
     7c0:	e4 e4       	ldi	r30, 0x44	; 68
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	61 90       	ld	r6, Z+
     7c6:	71 90       	ld	r7, Z+
     7c8:	81 90       	ld	r8, Z+
     7ca:	91 90       	ld	r9, Z+
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
     7d0:	a2 81       	ldd	r26, Z+2	; 0x02
     7d2:	b3 81       	ldd	r27, Z+3	; 0x03
     7d4:	89 83       	std	Y+1, r24	; 0x01
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	ab 83       	std	Y+3, r26	; 0x03
     7da:	bc 83       	std	Y+4, r27	; 0x04
     7dc:	c8 01       	movw	r24, r16
     7de:	b7 01       	movw	r22, r14
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e4       	ldi	r20, 0x40	; 64
     7e6:	50 e4       	ldi	r21, 0x40	; 64
     7e8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
     7ec:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     7f0:	60 5c       	subi	r22, 0xC0	; 192
     7f2:	7e 4f       	sbci	r23, 0xFE	; 254
     7f4:	1b 01       	movw	r2, r22
     7f6:	44 24       	eor	r4, r4
     7f8:	37 fc       	sbrc	r3, 7
     7fa:	40 94       	com	r4
     7fc:	54 2c       	mov	r5, r4
     7fe:	c6 01       	movw	r24, r12
     800:	b5 01       	movw	r22, r10
     802:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	c4 01       	movw	r24, r8
     80c:	b3 01       	movw	r22, r6
     80e:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     812:	3b 01       	movw	r6, r22
     814:	4c 01       	movw	r8, r24
     816:	69 81       	ldd	r22, Y+1	; 0x01
     818:	7a 81       	ldd	r23, Y+2	; 0x02
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	9c 81       	ldd	r25, Y+4	; 0x04
     81e:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     822:	5b 01       	movw	r10, r22
     824:	6c 01       	movw	r12, r24
     826:	c2 01       	movw	r24, r4
     828:	b1 01       	movw	r22, r2
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	97 01       	movw	r18, r14
     830:	00 e0       	ldi	r16, 0x00	; 0
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	73 01       	movw	r14, r6
     836:	65 01       	movw	r12, r10
     838:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	cf 91       	pop	r28
     846:	df 91       	pop	r29
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	bf 90       	pop	r11
     856:	af 90       	pop	r10
     858:	9f 90       	pop	r9
     85a:	8f 90       	pop	r8
     85c:	7f 90       	pop	r7
     85e:	6f 90       	pop	r6
     860:	5f 90       	pop	r5
     862:	4f 90       	pop	r4
     864:	3f 90       	pop	r3
     866:	2f 90       	pop	r2
     868:	08 95       	ret

0000086a <rotateRight>:
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void rotateRight()
{
     86a:	2f 92       	push	r2
     86c:	3f 92       	push	r3
     86e:	4f 92       	push	r4
     870:	5f 92       	push	r5
     872:	6f 92       	push	r6
     874:	7f 92       	push	r7
     876:	8f 92       	push	r8
     878:	9f 92       	push	r9
     87a:	af 92       	push	r10
     87c:	bf 92       	push	r11
     87e:	cf 92       	push	r12
     880:	df 92       	push	r13
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
	//Rotate Right
	setDirection(1, 0);
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     896:	60 91 4c 01 	lds	r22, 0x014C
     89a:	70 91 4d 01 	lds	r23, 0x014D
     89e:	80 91 4e 01 	lds	r24, 0x014E
     8a2:	90 91 4f 01 	lds	r25, 0x014F
     8a6:	e4 e4       	ldi	r30, 0x44	; 68
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	e1 90       	ld	r14, Z+
     8ac:	f1 90       	ld	r15, Z+
     8ae:	01 91       	ld	r16, Z+
     8b0:	11 91       	ld	r17, Z+
     8b2:	a0 80       	ld	r10, Z
     8b4:	b1 80       	ldd	r11, Z+1	; 0x01
     8b6:	c2 80       	ldd	r12, Z+2	; 0x02
     8b8:	d3 80       	ldd	r13, Z+3	; 0x03
     8ba:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     8be:	1b 01       	movw	r2, r22
     8c0:	2c 01       	movw	r4, r24
     8c2:	c8 01       	movw	r24, r16
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     8ca:	3b 01       	movw	r6, r22
     8cc:	4c 01       	movw	r8, r24
     8ce:	c6 01       	movw	r24, r12
     8d0:	b5 01       	movw	r22, r10
     8d2:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     8d6:	5b 01       	movw	r10, r22
     8d8:	6c 01       	movw	r12, r24
     8da:	60 e4       	ldi	r22, 0x40	; 64
     8dc:	71 e0       	ldi	r23, 0x01	; 1
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	91 01       	movw	r18, r2
     8e8:	00 e0       	ldi	r16, 0x00	; 0
     8ea:	10 e0       	ldi	r17, 0x00	; 0
     8ec:	73 01       	movw	r14, r6
     8ee:	65 01       	movw	r12, r10
     8f0:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	bf 90       	pop	r11
     902:	af 90       	pop	r10
     904:	9f 90       	pop	r9
     906:	8f 90       	pop	r8
     908:	7f 90       	pop	r7
     90a:	6f 90       	pop	r6
     90c:	5f 90       	pop	r5
     90e:	4f 90       	pop	r4
     910:	3f 90       	pop	r3
     912:	2f 90       	pop	r2
     914:	08 95       	ret

00000916 <rotateLeft>:
	setDirection(0, 0);
	straight(130, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void rotateLeft()
{
     916:	2f 92       	push	r2
     918:	3f 92       	push	r3
     91a:	4f 92       	push	r4
     91c:	5f 92       	push	r5
     91e:	6f 92       	push	r6
     920:	7f 92       	push	r7
     922:	8f 92       	push	r8
     924:	9f 92       	push	r9
     926:	af 92       	push	r10
     928:	bf 92       	push	r11
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
	//Rotate Left
	setDirection(0, 1);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	
	//Move Mouse
	straight(320, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     942:	60 91 4c 01 	lds	r22, 0x014C
     946:	70 91 4d 01 	lds	r23, 0x014D
     94a:	80 91 4e 01 	lds	r24, 0x014E
     94e:	90 91 4f 01 	lds	r25, 0x014F
     952:	e4 e4       	ldi	r30, 0x44	; 68
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	e1 90       	ld	r14, Z+
     958:	f1 90       	ld	r15, Z+
     95a:	01 91       	ld	r16, Z+
     95c:	11 91       	ld	r17, Z+
     95e:	a0 80       	ld	r10, Z
     960:	b1 80       	ldd	r11, Z+1	; 0x01
     962:	c2 80       	ldd	r12, Z+2	; 0x02
     964:	d3 80       	ldd	r13, Z+3	; 0x03
     966:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     96a:	1b 01       	movw	r2, r22
     96c:	2c 01       	movw	r4, r24
     96e:	c8 01       	movw	r24, r16
     970:	b7 01       	movw	r22, r14
     972:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     976:	3b 01       	movw	r6, r22
     978:	4c 01       	movw	r8, r24
     97a:	c6 01       	movw	r24, r12
     97c:	b5 01       	movw	r22, r10
     97e:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     982:	5b 01       	movw	r10, r22
     984:	6c 01       	movw	r12, r24
     986:	60 e4       	ldi	r22, 0x40	; 64
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	91 01       	movw	r18, r2
     994:	00 e0       	ldi	r16, 0x00	; 0
     996:	10 e0       	ldi	r17, 0x00	; 0
     998:	73 01       	movw	r14, r6
     99a:	65 01       	movw	r12, r10
     99c:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	bf 90       	pop	r11
     9ae:	af 90       	pop	r10
     9b0:	9f 90       	pop	r9
     9b2:	8f 90       	pop	r8
     9b4:	7f 90       	pop	r7
     9b6:	6f 90       	pop	r6
     9b8:	5f 90       	pop	r5
     9ba:	4f 90       	pop	r4
     9bc:	3f 90       	pop	r3
     9be:	2f 90       	pop	r2
     9c0:	08 95       	ret

000009c2 <moveBackwardsAndCorrect>:
	setDirection(0, 0);
	straight(length*42, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void moveBackwardsAndCorrect()
{
     9c2:	2f 92       	push	r2
     9c4:	3f 92       	push	r3
     9c6:	4f 92       	push	r4
     9c8:	5f 92       	push	r5
     9ca:	6f 92       	push	r6
     9cc:	7f 92       	push	r7
     9ce:	8f 92       	push	r8
     9d0:	9f 92       	push	r9
     9d2:	af 92       	push	r10
     9d4:	bf 92       	push	r11
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	df 93       	push	r29
     9e4:	cf 93       	push	r28
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	28 97       	sbiw	r28, 0x08	; 8
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
	//Rotate Left 180
	setDirection(0, 1);
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     a02:	3c e4       	ldi	r19, 0x4C	; 76
     a04:	43 2e       	mov	r4, r19
     a06:	31 e0       	ldi	r19, 0x01	; 1
     a08:	53 2e       	mov	r5, r19
     a0a:	60 91 4c 01 	lds	r22, 0x014C
     a0e:	70 91 4d 01 	lds	r23, 0x014D
     a12:	80 91 4e 01 	lds	r24, 0x014E
     a16:	90 91 4f 01 	lds	r25, 0x014F
     a1a:	28 ef       	ldi	r18, 0xF8	; 248
     a1c:	22 2e       	mov	r2, r18
     a1e:	2f ef       	ldi	r18, 0xFF	; 255
     a20:	32 2e       	mov	r3, r18
     a22:	24 0c       	add	r2, r4
     a24:	35 1c       	adc	r3, r5
     a26:	f1 01       	movw	r30, r2
     a28:	e0 80       	ld	r14, Z
     a2a:	f1 80       	ldd	r15, Z+1	; 0x01
     a2c:	02 81       	ldd	r16, Z+2	; 0x02
     a2e:	13 81       	ldd	r17, Z+3	; 0x03
     a30:	f2 01       	movw	r30, r4
     a32:	d2 90       	ld	r13, -Z
     a34:	c2 90       	ld	r12, -Z
     a36:	b2 90       	ld	r11, -Z
     a38:	a2 90       	ld	r10, -Z
     a3a:	2f 01       	movw	r4, r30
     a3c:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     a40:	69 83       	std	Y+1, r22	; 0x01
     a42:	7a 83       	std	Y+2, r23	; 0x02
     a44:	8b 83       	std	Y+3, r24	; 0x03
     a46:	9c 83       	std	Y+4, r25	; 0x04
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     a50:	3b 01       	movw	r6, r22
     a52:	4c 01       	movw	r8, r24
     a54:	c6 01       	movw	r24, r12
     a56:	b5 01       	movw	r22, r10
     a58:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     a5c:	5b 01       	movw	r10, r22
     a5e:	6c 01       	movw	r12, r24
     a60:	60 e8       	ldi	r22, 0x80	; 128
     a62:	72 e0       	ldi	r23, 0x02	; 2
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	29 81       	ldd	r18, Y+1	; 0x01
     a6e:	3a 81       	ldd	r19, Y+2	; 0x02
     a70:	00 e0       	ldi	r16, 0x00	; 0
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	73 01       	movw	r14, r6
     a76:	65 01       	movw	r12, r10
     a78:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
	
	//Go Backwards
	setDirection(1, 1);	
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	straight(250, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     a88:	60 91 4c 01 	lds	r22, 0x014C
     a8c:	70 91 4d 01 	lds	r23, 0x014D
     a90:	80 91 4e 01 	lds	r24, 0x014E
     a94:	90 91 4f 01 	lds	r25, 0x014F
     a98:	f1 01       	movw	r30, r2
     a9a:	e0 80       	ld	r14, Z
     a9c:	f1 80       	ldd	r15, Z+1	; 0x01
     a9e:	02 81       	ldd	r16, Z+2	; 0x02
     aa0:	13 81       	ldd	r17, Z+3	; 0x03
     aa2:	f2 01       	movw	r30, r4
     aa4:	a0 80       	ld	r10, Z
     aa6:	b1 80       	ldd	r11, Z+1	; 0x01
     aa8:	c2 80       	ldd	r12, Z+2	; 0x02
     aaa:	d3 80       	ldd	r13, Z+3	; 0x03
     aac:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     ab0:	6d 83       	std	Y+5, r22	; 0x05
     ab2:	7e 83       	std	Y+6, r23	; 0x06
     ab4:	8f 83       	std	Y+7, r24	; 0x07
     ab6:	98 87       	std	Y+8, r25	; 0x08
     ab8:	c8 01       	movw	r24, r16
     aba:	b7 01       	movw	r22, r14
     abc:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     ac0:	3b 01       	movw	r6, r22
     ac2:	4c 01       	movw	r8, r24
     ac4:	c6 01       	movw	r24, r12
     ac6:	b5 01       	movw	r22, r10
     ac8:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     acc:	5b 01       	movw	r10, r22
     ace:	6c 01       	movw	r12, r24
     ad0:	6a ef       	ldi	r22, 0xFA	; 250
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	2d 81       	ldd	r18, Y+5	; 0x05
     ade:	3e 81       	ldd	r19, Y+6	; 0x06
     ae0:	00 e0       	ldi	r16, 0x00	; 0
     ae2:	10 e0       	ldi	r17, 0x00	; 0
     ae4:	73 01       	movw	r14, r6
     ae6:	65 01       	movw	r12, r10
     ae8:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
	
	setDirection(0, 0);
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	straight(130, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     af8:	60 91 4c 01 	lds	r22, 0x014C
     afc:	70 91 4d 01 	lds	r23, 0x014D
     b00:	80 91 4e 01 	lds	r24, 0x014E
     b04:	90 91 4f 01 	lds	r25, 0x014F
     b08:	f1 01       	movw	r30, r2
     b0a:	e0 80       	ld	r14, Z
     b0c:	f1 80       	ldd	r15, Z+1	; 0x01
     b0e:	02 81       	ldd	r16, Z+2	; 0x02
     b10:	13 81       	ldd	r17, Z+3	; 0x03
     b12:	f2 01       	movw	r30, r4
     b14:	a0 80       	ld	r10, Z
     b16:	b1 80       	ldd	r11, Z+1	; 0x01
     b18:	c2 80       	ldd	r12, Z+2	; 0x02
     b1a:	d3 80       	ldd	r13, Z+3	; 0x03
     b1c:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     b20:	1b 01       	movw	r2, r22
     b22:	2c 01       	movw	r4, r24
     b24:	c8 01       	movw	r24, r16
     b26:	b7 01       	movw	r22, r14
     b28:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     b2c:	3b 01       	movw	r6, r22
     b2e:	4c 01       	movw	r8, r24
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     b38:	5b 01       	movw	r10, r22
     b3a:	6c 01       	movw	r12, r24
     b3c:	62 e8       	ldi	r22, 0x82	; 130
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	91 01       	movw	r18, r2
     b4a:	00 e0       	ldi	r16, 0x00	; 0
     b4c:	10 e0       	ldi	r17, 0x00	; 0
     b4e:	73 01       	movw	r14, r6
     b50:	65 01       	movw	r12, r10
     b52:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     b56:	28 96       	adiw	r28, 0x08	; 8
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	7f 90       	pop	r7
     b7c:	6f 90       	pop	r6
     b7e:	5f 90       	pop	r5
     b80:	4f 90       	pop	r4
     b82:	3f 90       	pop	r3
     b84:	2f 90       	pop	r2
     b86:	08 95       	ret

00000b88 <moveFix>:
	//Move Mouse
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void moveFix(int length)
{
     b88:	2f 92       	push	r2
     b8a:	3f 92       	push	r3
     b8c:	4f 92       	push	r4
     b8e:	5f 92       	push	r5
     b90:	6f 92       	push	r6
     b92:	7f 92       	push	r7
     b94:	8f 92       	push	r8
     b96:	9f 92       	push	r9
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	cf 92       	push	r12
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	28 97       	sbiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8c 01       	movw	r16, r24
	if(length > 0)
     bbe:	18 16       	cp	r1, r24
     bc0:	19 06       	cpc	r1, r25
     bc2:	3c f4       	brge	.+14     	; 0xbd2 <moveFix+0x4a>
	{
		setDirection(1, 1);
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
     bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <moveFix+0x5c>
	}
	else
	{
		setDirection(0, 0);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
		length = -length;
     bde:	10 95       	com	r17
     be0:	01 95       	neg	r16
     be2:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	setDirection(0, 0);
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	straight(length*42, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     bf0:	60 91 50 01 	lds	r22, 0x0150
     bf4:	70 91 51 01 	lds	r23, 0x0151
     bf8:	80 91 52 01 	lds	r24, 0x0152
     bfc:	90 91 53 01 	lds	r25, 0x0153
     c00:	a0 90 4c 01 	lds	r10, 0x014C
     c04:	b0 90 4d 01 	lds	r11, 0x014D
     c08:	c0 90 4e 01 	lds	r12, 0x014E
     c0c:	d0 90 4f 01 	lds	r13, 0x014F
     c10:	60 90 44 01 	lds	r6, 0x0144
     c14:	70 90 45 01 	lds	r7, 0x0145
     c18:	80 90 46 01 	lds	r8, 0x0146
     c1c:	90 90 47 01 	lds	r9, 0x0147
     c20:	20 91 48 01 	lds	r18, 0x0148
     c24:	30 91 49 01 	lds	r19, 0x0149
     c28:	40 91 4a 01 	lds	r20, 0x014A
     c2c:	50 91 4b 01 	lds	r21, 0x014B
     c30:	29 83       	std	Y+1, r18	; 0x01
     c32:	3a 83       	std	Y+2, r19	; 0x02
     c34:	4b 83       	std	Y+3, r20	; 0x03
     c36:	5c 83       	std	Y+4, r21	; 0x04
     c38:	2a e2       	ldi	r18, 0x2A	; 42
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	02 9f       	mul	r16, r18
     c3e:	70 01       	movw	r14, r0
     c40:	03 9f       	mul	r16, r19
     c42:	f0 0c       	add	r15, r0
     c44:	12 9f       	mul	r17, r18
     c46:	f0 0c       	add	r15, r0
     c48:	11 24       	eor	r1, r1
     c4a:	00 27       	eor	r16, r16
     c4c:	f7 fc       	sbrc	r15, 7
     c4e:	00 95       	com	r16
     c50:	10 2f       	mov	r17, r16
     c52:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     c56:	6d 83       	std	Y+5, r22	; 0x05
     c58:	7e 83       	std	Y+6, r23	; 0x06
     c5a:	8f 83       	std	Y+7, r24	; 0x07
     c5c:	98 87       	std	Y+8, r25	; 0x08
     c5e:	c6 01       	movw	r24, r12
     c60:	b5 01       	movw	r22, r10
     c62:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     c66:	1b 01       	movw	r2, r22
     c68:	2c 01       	movw	r4, r24
     c6a:	c4 01       	movw	r24, r8
     c6c:	b3 01       	movw	r22, r6
     c6e:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     c72:	3b 01       	movw	r6, r22
     c74:	4c 01       	movw	r8, r24
     c76:	69 81       	ldd	r22, Y+1	; 0x01
     c78:	7a 81       	ldd	r23, Y+2	; 0x02
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     c82:	5b 01       	movw	r10, r22
     c84:	6c 01       	movw	r12, r24
     c86:	c8 01       	movw	r24, r16
     c88:	b7 01       	movw	r22, r14
     c8a:	4d 81       	ldd	r20, Y+5	; 0x05
     c8c:	5e 81       	ldd	r21, Y+6	; 0x06
     c8e:	91 01       	movw	r18, r2
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	73 01       	movw	r14, r6
     c96:	65 01       	movw	r12, r10
     c98:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     c9c:	28 96       	adiw	r28, 0x08	; 8
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	7f 90       	pop	r7
     cc2:	6f 90       	pop	r6
     cc4:	5f 90       	pop	r5
     cc6:	4f 90       	pop	r4
     cc8:	3f 90       	pop	r3
     cca:	2f 90       	pop	r2
     ccc:	08 95       	ret

00000cce <moveBackwards>:
	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
}

void moveBackwards()
{
     cce:	2f 92       	push	r2
     cd0:	3f 92       	push	r3
     cd2:	4f 92       	push	r4
     cd4:	5f 92       	push	r5
     cd6:	6f 92       	push	r6
     cd8:	7f 92       	push	r7
     cda:	8f 92       	push	r8
     cdc:	9f 92       	push	r9
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
	//Rotate Left
	setDirection(0, 1);
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>
	
	//Move Mouse
	straight(640, 0, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     cfa:	60 91 4c 01 	lds	r22, 0x014C
     cfe:	70 91 4d 01 	lds	r23, 0x014D
     d02:	80 91 4e 01 	lds	r24, 0x014E
     d06:	90 91 4f 01 	lds	r25, 0x014F
     d0a:	e4 e4       	ldi	r30, 0x44	; 68
     d0c:	f1 e0       	ldi	r31, 0x01	; 1
     d0e:	e1 90       	ld	r14, Z+
     d10:	f1 90       	ld	r15, Z+
     d12:	01 91       	ld	r16, Z+
     d14:	11 91       	ld	r17, Z+
     d16:	a0 80       	ld	r10, Z
     d18:	b1 80       	ldd	r11, Z+1	; 0x01
     d1a:	c2 80       	ldd	r12, Z+2	; 0x02
     d1c:	d3 80       	ldd	r13, Z+3	; 0x03
     d1e:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     d22:	1b 01       	movw	r2, r22
     d24:	2c 01       	movw	r4, r24
     d26:	c8 01       	movw	r24, r16
     d28:	b7 01       	movw	r22, r14
     d2a:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     d2e:	3b 01       	movw	r6, r22
     d30:	4c 01       	movw	r8, r24
     d32:	c6 01       	movw	r24, r12
     d34:	b5 01       	movw	r22, r10
     d36:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     d3a:	5b 01       	movw	r10, r22
     d3c:	6c 01       	movw	r12, r24
     d3e:	60 e8       	ldi	r22, 0x80	; 128
     d40:	72 e0       	ldi	r23, 0x02	; 2
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	91 01       	movw	r18, r2
     d4c:	00 e0       	ldi	r16, 0x00	; 0
     d4e:	10 e0       	ldi	r17, 0x00	; 0
     d50:	73 01       	movw	r14, r6
     d52:	65 01       	movw	r12, r10
     d54:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	cf 90       	pop	r12
     d64:	bf 90       	pop	r11
     d66:	af 90       	pop	r10
     d68:	9f 90       	pop	r9
     d6a:	8f 90       	pop	r8
     d6c:	7f 90       	pop	r7
     d6e:	6f 90       	pop	r6
     d70:	5f 90       	pop	r5
     d72:	4f 90       	pop	r4
     d74:	3f 90       	pop	r3
     d76:	2f 90       	pop	r2
     d78:	08 95       	ret

00000d7a <moveForwardAndStop>:
	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, mouse.maxVelocity, mouse.acceleration, mouse.deceleration);
}

void moveForwardAndStop()
{	
     d7a:	2f 92       	push	r2
     d7c:	3f 92       	push	r3
     d7e:	4f 92       	push	r4
     d80:	5f 92       	push	r5
     d82:	6f 92       	push	r6
     d84:	7f 92       	push	r7
     d86:	8f 92       	push	r8
     d88:	9f 92       	push	r9
     d8a:	af 92       	push	r10
     d8c:	bf 92       	push	r11
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <moveForwardAndStop+0x26>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <moveForwardAndStop+0x28>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	//Make the robot go forward
	setDirection(0, 0);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>

	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, 0, mouse.acceleration, mouse.deceleration);
     db2:	60 91 50 01 	lds	r22, 0x0150
     db6:	70 91 51 01 	lds	r23, 0x0151
     dba:	80 91 52 01 	lds	r24, 0x0152
     dbe:	90 91 53 01 	lds	r25, 0x0153
     dc2:	ec e4       	ldi	r30, 0x4C	; 76
     dc4:	f1 e0       	ldi	r31, 0x01	; 1
     dc6:	e0 80       	ld	r14, Z
     dc8:	f1 80       	ldd	r15, Z+1	; 0x01
     dca:	02 81       	ldd	r16, Z+2	; 0x02
     dcc:	13 81       	ldd	r17, Z+3	; 0x03
     dce:	38 97       	sbiw	r30, 0x08	; 8
     dd0:	a1 90       	ld	r10, Z+
     dd2:	b1 90       	ld	r11, Z+
     dd4:	c1 90       	ld	r12, Z+
     dd6:	d1 90       	ld	r13, Z+
     dd8:	20 80       	ld	r2, Z
     dda:	31 80       	ldd	r3, Z+1	; 0x01
     ddc:	42 80       	ldd	r4, Z+2	; 0x02
     dde:	53 80       	ldd	r5, Z+3	; 0x03
     de0:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     de4:	69 83       	std	Y+1, r22	; 0x01
     de6:	7a 83       	std	Y+2, r23	; 0x02
     de8:	8b 83       	std	Y+3, r24	; 0x03
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	c8 01       	movw	r24, r16
     dee:	b7 01       	movw	r22, r14
     df0:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     df4:	7b 01       	movw	r14, r22
     df6:	8c 01       	movw	r16, r24
     df8:	c6 01       	movw	r24, r12
     dfa:	b5 01       	movw	r22, r10
     dfc:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     e00:	3b 01       	movw	r6, r22
     e02:	4c 01       	movw	r8, r24
     e04:	c2 01       	movw	r24, r4
     e06:	b1 01       	movw	r22, r2
     e08:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     e0c:	5b 01       	movw	r10, r22
     e0e:	6c 01       	movw	r12, r24
     e10:	6a ef       	ldi	r22, 0xFA	; 250
     e12:	72 e0       	ldi	r23, 0x02	; 2
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	49 81       	ldd	r20, Y+1	; 0x01
     e1a:	5a 81       	ldd	r21, Y+2	; 0x02
     e1c:	97 01       	movw	r18, r14
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	73 01       	movw	r14, r6
     e24:	65 01       	movw	r12, r10
     e26:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	8f 90       	pop	r8
     e4a:	7f 90       	pop	r7
     e4c:	6f 90       	pop	r6
     e4e:	5f 90       	pop	r5
     e50:	4f 90       	pop	r4
     e52:	3f 90       	pop	r3
     e54:	2f 90       	pop	r2
     e56:	08 95       	ret

00000e58 <moveForward>:
	//If there is something less then 8 cm away from sensor 
	return (value < 14);
}

void moveForward()
{
     e58:	2f 92       	push	r2
     e5a:	3f 92       	push	r3
     e5c:	4f 92       	push	r4
     e5e:	5f 92       	push	r5
     e60:	6f 92       	push	r6
     e62:	7f 92       	push	r7
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	28 97       	sbiw	r28, 0x08	; 8
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
	//Make the robot go forward
	setDirection(0, 0);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <setDirection>

	//Move mouse
	straight(762, mouse.velocity, mouse.maxVelocity, mouse.maxVelocity, mouse.acceleration, mouse.deceleration);
     e98:	a0 e5       	ldi	r26, 0x50	; 80
     e9a:	b1 e0       	ldi	r27, 0x01	; 1
     e9c:	60 91 50 01 	lds	r22, 0x0150
     ea0:	70 91 51 01 	lds	r23, 0x0151
     ea4:	80 91 52 01 	lds	r24, 0x0152
     ea8:	90 91 53 01 	lds	r25, 0x0153
     eac:	fd 01       	movw	r30, r26
     eae:	12 91       	ld	r17, -Z
     eb0:	02 91       	ld	r16, -Z
     eb2:	f2 90       	ld	r15, -Z
     eb4:	e2 90       	ld	r14, -Z
     eb6:	a0 80       	ld	r10, Z
     eb8:	b1 80       	ldd	r11, Z+1	; 0x01
     eba:	c2 80       	ldd	r12, Z+2	; 0x02
     ebc:	d3 80       	ldd	r13, Z+3	; 0x03
     ebe:	1c 97       	sbiw	r26, 0x0c	; 12
     ec0:	6d 90       	ld	r6, X+
     ec2:	7d 90       	ld	r7, X+
     ec4:	8d 90       	ld	r8, X+
     ec6:	9d 90       	ld	r9, X+
     ec8:	2d 91       	ld	r18, X+
     eca:	3d 91       	ld	r19, X+
     ecc:	4d 91       	ld	r20, X+
     ece:	5c 91       	ld	r21, X
     ed0:	29 83       	std	Y+1, r18	; 0x01
     ed2:	3a 83       	std	Y+2, r19	; 0x02
     ed4:	4b 83       	std	Y+3, r20	; 0x03
     ed6:	5c 83       	std	Y+4, r21	; 0x04
     ed8:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     edc:	6d 83       	std	Y+5, r22	; 0x05
     ede:	7e 83       	std	Y+6, r23	; 0x06
     ee0:	8f 83       	std	Y+7, r24	; 0x07
     ee2:	98 87       	std	Y+8, r25	; 0x08
     ee4:	c8 01       	movw	r24, r16
     ee6:	b7 01       	movw	r22, r14
     ee8:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     eec:	1b 01       	movw	r2, r22
     eee:	2c 01       	movw	r4, r24
     ef0:	c6 01       	movw	r24, r12
     ef2:	b5 01       	movw	r22, r10
     ef4:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     ef8:	7b 01       	movw	r14, r22
     efa:	8c 01       	movw	r16, r24
     efc:	c4 01       	movw	r24, r8
     efe:	b3 01       	movw	r22, r6
     f00:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     f04:	3b 01       	movw	r6, r22
     f06:	4c 01       	movw	r8, r24
     f08:	69 81       	ldd	r22, Y+1	; 0x01
     f0a:	7a 81       	ldd	r23, Y+2	; 0x02
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
     f14:	5b 01       	movw	r10, r22
     f16:	6c 01       	movw	r12, r24
     f18:	6a ef       	ldi	r22, 0xFA	; 250
     f1a:	72 e0       	ldi	r23, 0x02	; 2
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	4d 81       	ldd	r20, Y+5	; 0x05
     f22:	5e 81       	ldd	r21, Y+6	; 0x06
     f24:	91 01       	movw	r18, r2
     f26:	87 01       	movw	r16, r14
     f28:	73 01       	movw	r14, r6
     f2a:	65 01       	movw	r12, r10
     f2c:	0e 94 87 09 	call	0x130e	; 0x130e <straight>
}
     f30:	28 96       	adiw	r28, 0x08	; 8
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	bf 90       	pop	r11
     f4e:	af 90       	pop	r10
     f50:	9f 90       	pop	r9
     f52:	8f 90       	pop	r8
     f54:	7f 90       	pop	r7
     f56:	6f 90       	pop	r6
     f58:	5f 90       	pop	r5
     f5a:	4f 90       	pop	r4
     f5c:	3f 90       	pop	r3
     f5e:	2f 90       	pop	r2
     f60:	08 95       	ret

00000f62 <isWallLeft>:
	//If there is something less then 8 cm away from sensor 
	return (value < 14);
}

int isWallLeft()
{
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
	float value = getLeftIR();
     f66:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <getLeftIR>
     f6a:	c0 e0       	ldi	r28, 0x00	; 0
     f6c:	d0 e0       	ldi	r29, 0x00	; 0
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e6       	ldi	r20, 0x60	; 96
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	14 f4       	brge	.+4      	; 0xf82 <isWallLeft+0x20>
     f7e:	c1 e0       	ldi	r28, 0x01	; 1
     f80:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 8 cm away from sensor 
	return (value < 14);
}
     f82:	ce 01       	movw	r24, r28
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <isWallRight>:
	//If there is something less then 16 cm away from sensor
	return (value < 10);		
}

int isWallRight()
{
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
	float value = getRightIR();
     f8e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <getRightIR>
     f92:	c0 e0       	ldi	r28, 0x00	; 0
     f94:	d0 e0       	ldi	r29, 0x00	; 0
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e6       	ldi	r20, 0x60	; 96
     f9c:	51 e4       	ldi	r21, 0x41	; 65
     f9e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
     fa2:	88 23       	and	r24, r24
     fa4:	14 f4       	brge	.+4      	; 0xfaa <isWallRight+0x20>
     fa6:	c1 e0       	ldi	r28, 0x01	; 1
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 8 cm away from sensor 
	return (value < 14);
}
     faa:	ce 01       	movw	r24, r28
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	08 95       	ret

00000fb2 <isWallFront>:

//Create Mouse
volatile Mouse mouse;

int isWallFront()
{
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
    float value = getFrontLeftIR();
     fbe:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <getFrontLeftIR>
     fc2:	7b 01       	movw	r14, r22
     fc4:	8c 01       	movw	r16, r24
	float value2 = getFrontRightIR();
     fc6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <getFrontRightIR>
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
	
	//Average front sensors
	value = (value + value2)/2;
     fce:	c8 01       	movw	r24, r16
     fd0:	b7 01       	movw	r22, r14
     fd2:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
     fd6:	c0 e0       	ldi	r28, 0x00	; 0
     fd8:	d0 e0       	ldi	r29, 0x00	; 0
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	5f e3       	ldi	r21, 0x3F	; 63
     fe2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e2       	ldi	r20, 0x20	; 32
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	14 f4       	brge	.+4      	; 0xffa <isWallFront+0x48>
     ff6:	c1 e0       	ldi	r28, 0x01	; 1
     ff8:	d0 e0       	ldi	r29, 0x00	; 0
	
	//If there is something less then 16 cm away from sensor
	return (value < 10);		
}
     ffa:	ce 01       	movw	r24, r28
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	08 95       	ret

0000100a <startTimer>:


void startTimer()
{
	//Refresh Loop Timer1  
	TCCR0A = (1 << WGM01);//Set CTC
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00) | (1 << CS01);//prescalar to
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;//Compare Ticks 
    1012:	9a ef       	ldi	r25, 0xFA	; 250
    1014:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);//Enable Timer Interrupts
    1016:	80 93 6e 00 	sts	0x006E, r24
	
	milliseconds = 0;
    101a:	10 92 0a 01 	sts	0x010A, r1
    101e:	10 92 0b 01 	sts	0x010B, r1
    1022:	10 92 0c 01 	sts	0x010C, r1
    1026:	10 92 0d 01 	sts	0x010D, r1
}
    102a:	08 95       	ret

0000102c <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	8f 93       	push	r24
    1038:	9f 93       	push	r25
    103a:	af 93       	push	r26
    103c:	bf 93       	push	r27
	milliseconds++;		
    103e:	80 91 0a 01 	lds	r24, 0x010A
    1042:	90 91 0b 01 	lds	r25, 0x010B
    1046:	a0 91 0c 01 	lds	r26, 0x010C
    104a:	b0 91 0d 01 	lds	r27, 0x010D
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	a1 1d       	adc	r26, r1
    1052:	b1 1d       	adc	r27, r1
    1054:	80 93 0a 01 	sts	0x010A, r24
    1058:	90 93 0b 01 	sts	0x010B, r25
    105c:	a0 93 0c 01 	sts	0x010C, r26
    1060:	b0 93 0d 01 	sts	0x010D, r27
}
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <getLeftError>:
	return right - 5;
}

float getLeftError()
{
	float left = getLeftIR();
    1076:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <getLeftIR>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 ea       	ldi	r20, 0xA0	; 160
    1080:	50 e4       	ldi	r21, 0x40	; 64
    1082:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
	return left - 5;
}
    1086:	08 95       	ret

00001088 <getRightError>:
	return error;
}

float getRightError()
{
	float right = getRightIR();
    1088:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <getRightIR>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 ea       	ldi	r20, 0xA0	; 160
    1092:	50 e4       	ldi	r21, 0x40	; 64
    1094:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
	return right - 5;
}
    1098:	08 95       	ret

0000109a <getOffsetError>:
volatile float lPrevious;
volatile float rPrevious;
volatile int flag;

int getOffsetError()
{
    109a:	2f 92       	push	r2
    109c:	3f 92       	push	r3
    109e:	4f 92       	push	r4
    10a0:	5f 92       	push	r5
    10a2:	6f 92       	push	r6
    10a4:	7f 92       	push	r7
    10a6:	8f 92       	push	r8
    10a8:	9f 92       	push	r9
    10aa:	af 92       	push	r10
    10ac:	bf 92       	push	r11
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
	if(flag != 1)
    10be:	80 91 5a 01 	lds	r24, 0x015A
    10c2:	90 91 5b 01 	lds	r25, 0x015B
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <getOffsetError+0x64>
	{
		lPrevious = getLeftIR();
    10ca:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <getLeftIR>
    10ce:	60 93 60 01 	sts	0x0160, r22
    10d2:	70 93 61 01 	sts	0x0161, r23
    10d6:	80 93 62 01 	sts	0x0162, r24
    10da:	90 93 63 01 	sts	0x0163, r25
		rPrevious = getRightIR();
    10de:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <getRightIR>
    10e2:	60 93 5c 01 	sts	0x015C, r22
    10e6:	70 93 5d 01 	sts	0x015D, r23
    10ea:	80 93 5e 01 	sts	0x015E, r24
    10ee:	90 93 5f 01 	sts	0x015F, r25
		flag = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	90 93 5b 01 	sts	0x015B, r25
    10fa:	80 93 5a 01 	sts	0x015A, r24
	}
	
	float left = getLeftIR();
    10fe:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <getLeftIR>
    1102:	1b 01       	movw	r2, r22
    1104:	2c 01       	movw	r4, r24
	float right = getRightIR();
    1106:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <getRightIR>
    110a:	3b 01       	movw	r6, r22
    110c:	4c 01       	movw	r8, r24
			
	//If derivative of IR readings is greater then 1
	if(left-lPrevious > 1)
    110e:	20 91 60 01 	lds	r18, 0x0160
    1112:	30 91 61 01 	lds	r19, 0x0161
    1116:	40 91 62 01 	lds	r20, 0x0162
    111a:	50 91 63 01 	lds	r21, 0x0163
    111e:	c2 01       	movw	r24, r4
    1120:	b1 01       	movw	r22, r2
    1122:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e8       	ldi	r20, 0x80	; 128
    112c:	5f e3       	ldi	r21, 0x3F	; 63
    112e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
    1132:	18 16       	cp	r1, r24
    1134:	64 f4       	brge	.+24     	; 0x114e <getOffsetError+0xb4>
	{		
		mouse.IR_CORRECT = 0;
    1136:	10 92 55 01 	sts	0x0155, r1
    113a:	10 92 54 01 	sts	0x0154, r1
		mouse.IR_CORRECT_LEFT = 0;
    113e:	10 92 57 01 	sts	0x0157, r1
    1142:	10 92 56 01 	sts	0x0156, r1
		mouse.IR_CORRECT_RIGHT = 0;
    1146:	10 92 59 01 	sts	0x0159, r1
    114a:	10 92 58 01 	sts	0x0158, r1
	}
	if(right-rPrevious > 1)
    114e:	20 91 5c 01 	lds	r18, 0x015C
    1152:	30 91 5d 01 	lds	r19, 0x015D
    1156:	40 91 5e 01 	lds	r20, 0x015E
    115a:	50 91 5f 01 	lds	r21, 0x015F
    115e:	c4 01       	movw	r24, r8
    1160:	b3 01       	movw	r22, r6
    1162:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e8       	ldi	r20, 0x80	; 128
    116c:	5f e3       	ldi	r21, 0x3F	; 63
    116e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
    1172:	18 16       	cp	r1, r24
    1174:	64 f4       	brge	.+24     	; 0x118e <getOffsetError+0xf4>
	{
		mouse.IR_CORRECT = 0;
    1176:	10 92 55 01 	sts	0x0155, r1
    117a:	10 92 54 01 	sts	0x0154, r1
		mouse.IR_CORRECT_LEFT = 0;
    117e:	10 92 57 01 	sts	0x0157, r1
    1182:	10 92 56 01 	sts	0x0156, r1
		mouse.IR_CORRECT_RIGHT = 0;
    1186:	10 92 59 01 	sts	0x0159, r1
    118a:	10 92 58 01 	sts	0x0158, r1
	}
	
	float error = 0;
	
	if(mouse.IR_CORRECT != 0)
    118e:	80 91 54 01 	lds	r24, 0x0154
    1192:	90 91 55 01 	lds	r25, 0x0155
    1196:	89 2b       	or	r24, r25
    1198:	09 f4       	brne	.+2      	; 0x119c <getOffsetError+0x102>
    119a:	5b c0       	rjmp	.+182    	; 0x1252 <getOffsetError+0x1b8>
	{
		error = (right-5)*mouse.IR_CORRECT;
    119c:	c0 91 54 01 	lds	r28, 0x0154
    11a0:	d0 91 55 01 	lds	r29, 0x0155
	
		if(right-left > 10)
    11a4:	c4 01       	movw	r24, r8
    11a6:	b3 01       	movw	r22, r6
    11a8:	a2 01       	movw	r20, r4
    11aa:	91 01       	movw	r18, r2
    11ac:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
    11b0:	5b 01       	movw	r10, r22
    11b2:	6c 01       	movw	r12, r24
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	c4 f0       	brlt	.+48     	; 0x11f4 <getOffsetError+0x15a>
	
	float error = 0;
	
	if(mouse.IR_CORRECT != 0)
	{
		error = (right-5)*mouse.IR_CORRECT;
    11c4:	c4 01       	movw	r24, r8
    11c6:	b3 01       	movw	r22, r6
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 ea       	ldi	r20, 0xA0	; 160
    11ce:	50 e4       	ldi	r21, 0x40	; 64
    11d0:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
    11d4:	7b 01       	movw	r14, r22
    11d6:	8c 01       	movw	r16, r24
    11d8:	be 01       	movw	r22, r28
    11da:	88 27       	eor	r24, r24
    11dc:	77 fd       	sbrc	r23, 7
    11de:	80 95       	com	r24
    11e0:	98 2f       	mov	r25, r24
    11e2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    11e6:	9b 01       	movw	r18, r22
    11e8:	ac 01       	movw	r20, r24
    11ea:	c8 01       	movw	r24, r16
    11ec:	b7 01       	movw	r22, r14
    11ee:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    11f2:	0f c0       	rjmp	.+30     	; 0x1212 <getOffsetError+0x178>
	
		if(right-left > 10)
			error = 3*mouse.IR_CORRECT;
    11f4:	20 91 54 01 	lds	r18, 0x0154
    11f8:	30 91 55 01 	lds	r19, 0x0155
    11fc:	b9 01       	movw	r22, r18
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	62 0f       	add	r22, r18
    1204:	73 1f       	adc	r23, r19
    1206:	88 27       	eor	r24, r24
    1208:	77 fd       	sbrc	r23, 7
    120a:	80 95       	com	r24
    120c:	98 2f       	mov	r25, r24
    120e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1212:	7b 01       	movw	r14, r22
    1214:	8c 01       	movw	r16, r24
		if(right-left < -10)
    1216:	c6 01       	movw	r24, r12
    1218:	b5 01       	movw	r22, r10
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	51 ec       	ldi	r21, 0xC1	; 193
    1222:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1226:	88 23       	and	r24, r24
    1228:	0c f0       	brlt	.+2      	; 0x122c <getOffsetError+0x192>
    122a:	49 c0       	rjmp	.+146    	; 0x12be <getOffsetError+0x224>
			error = -3*mouse.IR_CORRECT;
    122c:	20 91 54 01 	lds	r18, 0x0154
    1230:	30 91 55 01 	lds	r19, 0x0155
    1234:	b9 01       	movw	r22, r18
    1236:	66 0f       	add	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	62 0f       	add	r22, r18
    123c:	73 1f       	adc	r23, r19
    123e:	70 95       	com	r23
    1240:	61 95       	neg	r22
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	88 27       	eor	r24, r24
    1246:	77 fd       	sbrc	r23, 7
    1248:	80 95       	com	r24
    124a:	98 2f       	mov	r25, r24
    124c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1250:	34 c0       	rjmp	.+104    	; 0x12ba <getOffsetError+0x220>
	}
	else if(mouse.IR_CORRECT_LEFT != 0)
    1252:	80 91 56 01 	lds	r24, 0x0156
    1256:	90 91 57 01 	lds	r25, 0x0157
    125a:	89 2b       	or	r24, r25
    125c:	49 f0       	breq	.+18     	; 0x1270 <getOffsetError+0x1d6>
	{
		error = getLeftError() * mouse.IR_CORRECT_LEFT;
    125e:	0e 94 3b 08 	call	0x1076	; 0x1076 <getLeftError>
    1262:	7b 01       	movw	r14, r22
    1264:	8c 01       	movw	r16, r24
    1266:	60 91 56 01 	lds	r22, 0x0156
    126a:	70 91 57 01 	lds	r23, 0x0157
    126e:	19 c0       	rjmp	.+50     	; 0x12a2 <getOffsetError+0x208>
	}
	else if(mouse.IR_CORRECT_RIGHT != 0)
    1270:	80 91 58 01 	lds	r24, 0x0158
    1274:	90 91 59 01 	lds	r25, 0x0159
    1278:	89 2b       	or	r24, r25
    127a:	59 f4       	brne	.+22     	; 0x1292 <getOffsetError+0x1f8>
    127c:	0f 2e       	mov	r0, r31
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	ef 2e       	mov	r14, r31
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	ff 2e       	mov	r15, r31
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	0f 2f       	mov	r16, r31
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	1f 2f       	mov	r17, r31
    128e:	f0 2d       	mov	r31, r0
    1290:	16 c0       	rjmp	.+44     	; 0x12be <getOffsetError+0x224>
	{
		error = getRightError() * mouse.IR_CORRECT_RIGHT;
    1292:	0e 94 44 08 	call	0x1088	; 0x1088 <getRightError>
    1296:	7b 01       	movw	r14, r22
    1298:	8c 01       	movw	r16, r24
    129a:	60 91 58 01 	lds	r22, 0x0158
    129e:	70 91 59 01 	lds	r23, 0x0159
    12a2:	88 27       	eor	r24, r24
    12a4:	77 fd       	sbrc	r23, 7
    12a6:	80 95       	com	r24
    12a8:	98 2f       	mov	r25, r24
    12aa:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    12ae:	9b 01       	movw	r18, r22
    12b0:	ac 01       	movw	r20, r24
    12b2:	c8 01       	movw	r24, r16
    12b4:	b7 01       	movw	r22, r14
    12b6:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    12ba:	7b 01       	movw	r14, r22
    12bc:	8c 01       	movw	r16, r24
	}
		
	lPrevious = left;
    12be:	20 92 60 01 	sts	0x0160, r2
    12c2:	30 92 61 01 	sts	0x0161, r3
    12c6:	40 92 62 01 	sts	0x0162, r4
    12ca:	50 92 63 01 	sts	0x0163, r5
	rPrevious = right;
    12ce:	60 92 5c 01 	sts	0x015C, r6
    12d2:	70 92 5d 01 	sts	0x015D, r7
    12d6:	80 92 5e 01 	sts	0x015E, r8
    12da:	90 92 5f 01 	sts	0x015F, r9
    12de:	c8 01       	movw	r24, r16
    12e0:	b7 01       	movw	r22, r14
    12e2:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
	
	return error;
}
    12e6:	cb 01       	movw	r24, r22
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	bf 90       	pop	r11
    12fa:	af 90       	pop	r10
    12fc:	9f 90       	pop	r9
    12fe:	8f 90       	pop	r8
    1300:	7f 90       	pop	r7
    1302:	6f 90       	pop	r6
    1304:	5f 90       	pop	r5
    1306:	4f 90       	pop	r4
    1308:	3f 90       	pop	r3
    130a:	2f 90       	pop	r2
    130c:	08 95       	ret

0000130e <straight>:
extern volatile long milliseconds;
extern volatile Mouse mouse;


void straight(long stepTarget, int inSpeed, int maxSpeed, int exitSpeed, int accel, int decel)
{
    130e:	2f 92       	push	r2
    1310:	3f 92       	push	r3
    1312:	4f 92       	push	r4
    1314:	5f 92       	push	r5
    1316:	6f 92       	push	r6
    1318:	7f 92       	push	r7
    131a:	8f 92       	push	r8
    131c:	9f 92       	push	r9
    131e:	af 92       	push	r10
    1320:	bf 92       	push	r11
    1322:	cf 92       	push	r12
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	ae 97       	sbiw	r28, 0x2e	; 46
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	69 87       	std	Y+9, r22	; 0x09
    1344:	7a 87       	std	Y+10, r23	; 0x0a
    1346:	8b 87       	std	Y+11, r24	; 0x0b
    1348:	9c 87       	std	Y+12, r25	; 0x0c
    134a:	3e a7       	std	Y+46, r19	; 0x2e
    134c:	2d a7       	std	Y+45, r18	; 0x2d
    134e:	1e 87       	std	Y+14, r17	; 0x0e
    1350:	0d 87       	std	Y+13, r16	; 0x0d
    1352:	d8 8a       	std	Y+16, r13	; 0x10
    1354:	cf 86       	std	Y+15, r12	; 0x0f
	unsigned long startTime = milliseconds;
    1356:	80 91 0a 01 	lds	r24, 0x010A
    135a:	90 91 0b 01 	lds	r25, 0x010B
    135e:	a0 91 0c 01 	lds	r26, 0x010C
    1362:	b0 91 0d 01 	lds	r27, 0x010D
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	af 83       	std	Y+7, r26	; 0x07
    136c:	b8 87       	std	Y+8, r27	; 0x08
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
    136e:	10 92 14 01 	sts	0x0114, r1
    1372:	10 92 15 01 	sts	0x0115, r1
    1376:	10 92 16 01 	sts	0x0116, r1
    137a:	10 92 17 01 	sts	0x0117, r1
    137e:	80 91 14 01 	lds	r24, 0x0114
    1382:	90 91 15 01 	lds	r25, 0x0115
    1386:	a0 91 16 01 	lds	r26, 0x0116
    138a:	b0 91 17 01 	lds	r27, 0x0117
    138e:	80 93 2c 01 	sts	0x012C, r24
    1392:	90 93 2d 01 	sts	0x012D, r25
    1396:	a0 93 2e 01 	sts	0x012E, r26
    139a:	b0 93 2f 01 	sts	0x012F, r27
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
    139e:	ca 01       	movw	r24, r20
    13a0:	aa 27       	eor	r26, r26
    13a2:	97 fd       	sbrc	r25, 7
    13a4:	a0 95       	com	r26
    13a6:	ba 2f       	mov	r27, r26
    13a8:	89 8f       	std	Y+25, r24	; 0x19
    13aa:	9a 8f       	std	Y+26, r25	; 0x1a
    13ac:	ab 8f       	std	Y+27, r26	; 0x1b
    13ae:	bc 8f       	std	Y+28, r27	; 0x1c
    13b0:	97 01       	movw	r18, r14
    13b2:	44 27       	eor	r20, r20
    13b4:	37 fd       	sbrc	r19, 7
    13b6:	40 95       	com	r20
    13b8:	54 2f       	mov	r21, r20
    13ba:	2d 8f       	std	Y+29, r18	; 0x1d
    13bc:	3e 8f       	std	Y+30, r19	; 0x1e
    13be:	4f 8f       	std	Y+31, r20	; 0x1f
    13c0:	58 a3       	std	Y+32, r21	; 0x20
    13c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c6:	aa 27       	eor	r26, r26
    13c8:	97 fd       	sbrc	r25, 7
    13ca:	a0 95       	com	r26
    13cc:	ba 2f       	mov	r27, r26
    13ce:	89 a3       	std	Y+33, r24	; 0x21
    13d0:	9a a3       	std	Y+34, r25	; 0x22
    13d2:	ab a3       	std	Y+35, r26	; 0x23
    13d4:	bc a3       	std	Y+36, r27	; 0x24
		
		mouse.velocity = curSpeed;
		mouse.leftMotor.currentStepDelay = getDelayFromVelocity(curSpeed - error);
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed + error);
		
		float decelStepsUntilStop = curSpeed * curSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
    13d6:	96 01       	movw	r18, r12
    13d8:	44 27       	eor	r20, r20
    13da:	37 fd       	sbrc	r19, 7
    13dc:	40 95       	com	r20
    13de:	54 2f       	mov	r21, r20
    13e0:	2d a3       	std	Y+37, r18	; 0x25
    13e2:	3e a3       	std	Y+38, r19	; 0x26
    13e4:	4f a3       	std	Y+39, r20	; 0x27
    13e6:	58 a7       	std	Y+40, r21	; 0x28
    13e8:	c8 01       	movw	r24, r16
    13ea:	aa 27       	eor	r26, r26
    13ec:	97 fd       	sbrc	r25, 7
    13ee:	a0 95       	com	r26
    13f0:	ba 2f       	mov	r27, r26
    13f2:	89 a7       	std	Y+41, r24	; 0x29
    13f4:	9a a7       	std	Y+42, r25	; 0x2a
    13f6:	ab a7       	std	Y+43, r26	; 0x2b
    13f8:	bc a7       	std	Y+44, r27	; 0x2c
    13fa:	05 c1       	rjmp	.+522    	; 0x1606 <straight+0x2f8>
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
	{
		
		float curSpeed = inSpeed + accel*(float)((milliseconds-startTime)/1000.0);
    13fc:	60 91 0a 01 	lds	r22, 0x010A
    1400:	70 91 0b 01 	lds	r23, 0x010B
    1404:	80 91 0c 01 	lds	r24, 0x010C
    1408:	90 91 0d 01 	lds	r25, 0x010D
    140c:	2d 81       	ldd	r18, Y+5	; 0x05
    140e:	3e 81       	ldd	r19, Y+6	; 0x06
    1410:	4f 81       	ldd	r20, Y+7	; 0x07
    1412:	58 85       	ldd	r21, Y+8	; 0x08
    1414:	62 1b       	sub	r22, r18
    1416:	73 0b       	sbc	r23, r19
    1418:	84 0b       	sbc	r24, r20
    141a:	95 0b       	sbc	r25, r21
    141c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatunsisf>
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	4a e7       	ldi	r20, 0x7A	; 122
    1426:	54 e4       	ldi	r21, 0x44	; 68
    1428:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__divsf3>
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	c6 01       	movw	r24, r12
    1432:	b5 01       	movw	r22, r10
    1434:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	c4 01       	movw	r24, r8
    143e:	b3 01       	movw	r22, r6
    1440:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    1444:	69 8b       	std	Y+17, r22	; 0x11
    1446:	7a 8b       	std	Y+18, r23	; 0x12
    1448:	8b 8b       	std	Y+19, r24	; 0x13
    144a:	9c 8b       	std	Y+20, r25	; 0x14
		
		int error = getOffsetError();
    144c:	0e 94 4d 08 	call	0x109a	; 0x109a <getOffsetError>
		
		mouse.velocity = curSpeed;
    1450:	29 89       	ldd	r18, Y+17	; 0x11
    1452:	3a 89       	ldd	r19, Y+18	; 0x12
    1454:	4b 89       	ldd	r20, Y+19	; 0x13
    1456:	5c 89       	ldd	r21, Y+20	; 0x14
    1458:	20 93 50 01 	sts	0x0150, r18
    145c:	30 93 51 01 	sts	0x0151, r19
    1460:	40 93 52 01 	sts	0x0152, r20
    1464:	50 93 53 01 	sts	0x0153, r21
		mouse.leftMotor.currentStepDelay = getDelayFromVelocity(curSpeed - error);
    1468:	aa 27       	eor	r26, r26
    146a:	97 fd       	sbrc	r25, 7
    146c:	a0 95       	com	r26
    146e:	ba 2f       	mov	r27, r26
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1478:	7b 01       	movw	r14, r22
    147a:	8c 01       	movw	r16, r24
    147c:	69 89       	ldd	r22, Y+17	; 0x11
    147e:	7a 89       	ldd	r23, Y+18	; 0x12
    1480:	8b 89       	ldd	r24, Y+19	; 0x13
    1482:	9c 89       	ldd	r25, Y+20	; 0x14
    1484:	a8 01       	movw	r20, r16
    1486:	97 01       	movw	r18, r14
    1488:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
    148c:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <getDelayFromVelocity>
    1498:	aa 27       	eor	r26, r26
    149a:	97 fd       	sbrc	r25, 7
    149c:	a0 95       	com	r26
    149e:	ba 2f       	mov	r27, r26
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    14a8:	60 93 18 01 	sts	0x0118, r22
    14ac:	70 93 19 01 	sts	0x0119, r23
    14b0:	80 93 1a 01 	sts	0x011A, r24
    14b4:	90 93 1b 01 	sts	0x011B, r25
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed + error);
    14b8:	69 89       	ldd	r22, Y+17	; 0x11
    14ba:	7a 89       	ldd	r23, Y+18	; 0x12
    14bc:	8b 89       	ldd	r24, Y+19	; 0x13
    14be:	9c 89       	ldd	r25, Y+20	; 0x14
    14c0:	a8 01       	movw	r20, r16
    14c2:	97 01       	movw	r18, r14
    14c4:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    14c8:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <getDelayFromVelocity>
    14d4:	aa 27       	eor	r26, r26
    14d6:	97 fd       	sbrc	r25, 7
    14d8:	a0 95       	com	r26
    14da:	ba 2f       	mov	r27, r26
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    14e4:	60 93 30 01 	sts	0x0130, r22
    14e8:	70 93 31 01 	sts	0x0131, r23
    14ec:	80 93 32 01 	sts	0x0132, r24
    14f0:	90 93 33 01 	sts	0x0133, r25
		
		float decelStepsUntilStop = curSpeed * curSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
    14f4:	6d a1       	ldd	r22, Y+37	; 0x25
    14f6:	7e a1       	ldd	r23, Y+38	; 0x26
    14f8:	8f a1       	ldd	r24, Y+39	; 0x27
    14fa:	98 a5       	ldd	r25, Y+40	; 0x28
    14fc:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1500:	5b 01       	movw	r10, r22
    1502:	6c 01       	movw	r12, r24
    1504:	69 a5       	ldd	r22, Y+41	; 0x29
    1506:	7a a5       	ldd	r23, Y+42	; 0x2a
    1508:	8b a5       	ldd	r24, Y+43	; 0x2b
    150a:	9c a5       	ldd	r25, Y+44	; 0x2c
    150c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1510:	3b 01       	movw	r6, r22
    1512:	4c 01       	movw	r8, r24
		
		//If we need to start deceleratings
		if(mouse.leftMotor.stepCount + decelStepsUntilStop >= stepTarget)
    1514:	60 91 14 01 	lds	r22, 0x0114
    1518:	70 91 15 01 	lds	r23, 0x0115
    151c:	80 91 16 01 	lds	r24, 0x0116
    1520:	90 91 17 01 	lds	r25, 0x0117
    1524:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1528:	6d 8b       	std	Y+21, r22	; 0x15
    152a:	7e 8b       	std	Y+22, r23	; 0x16
    152c:	8f 8b       	std	Y+23, r24	; 0x17
    152e:	98 8f       	std	Y+24, r25	; 0x18
    1530:	69 89       	ldd	r22, Y+17	; 0x11
    1532:	7a 89       	ldd	r23, Y+18	; 0x12
    1534:	8b 89       	ldd	r24, Y+19	; 0x13
    1536:	9c 89       	ldd	r25, Y+20	; 0x14
    1538:	9b 01       	movw	r18, r22
    153a:	ac 01       	movw	r20, r24
    153c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1540:	7b 01       	movw	r14, r22
    1542:	8c 01       	movw	r16, r24
    1544:	c6 01       	movw	r24, r12
    1546:	b5 01       	movw	r22, r10
    1548:	a6 01       	movw	r20, r12
    154a:	95 01       	movw	r18, r10
    154c:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    1550:	9b 01       	movw	r18, r22
    1552:	ac 01       	movw	r20, r24
    1554:	c8 01       	movw	r24, r16
    1556:	b7 01       	movw	r22, r14
    1558:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__divsf3>
    155c:	1b 01       	movw	r2, r22
    155e:	2c 01       	movw	r4, r24
    1560:	c4 01       	movw	r24, r8
    1562:	b3 01       	movw	r22, r6
    1564:	a4 01       	movw	r20, r8
    1566:	93 01       	movw	r18, r6
    1568:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    156c:	7b 01       	movw	r14, r22
    156e:	8c 01       	movw	r16, r24
    1570:	c6 01       	movw	r24, r12
    1572:	b5 01       	movw	r22, r10
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 ec       	ldi	r21, 0xC0	; 192
    157c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	c8 01       	movw	r24, r16
    1586:	b7 01       	movw	r22, r14
    1588:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__divsf3>
    158c:	9b 01       	movw	r18, r22
    158e:	ac 01       	movw	r20, r24
    1590:	c2 01       	movw	r24, r4
    1592:	b1 01       	movw	r22, r2
    1594:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    1598:	9b 01       	movw	r18, r22
    159a:	ac 01       	movw	r20, r24
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    15a8:	7b 01       	movw	r14, r22
    15aa:	8c 01       	movw	r16, r24
    15ac:	69 85       	ldd	r22, Y+9	; 0x09
    15ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    15b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	c8 01       	movw	r24, r16
    15be:	b7 01       	movw	r22, r14
    15c0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
    15c4:	88 23       	and	r24, r24
    15c6:	4c f0       	brlt	.+18     	; 0x15da <straight+0x2cc>
		{
			maxSpeed = curSpeed;
    15c8:	69 89       	ldd	r22, Y+17	; 0x11
    15ca:	7a 89       	ldd	r23, Y+18	; 0x12
    15cc:	8b 89       	ldd	r24, Y+19	; 0x13
    15ce:	9c 89       	ldd	r25, Y+20	; 0x14
    15d0:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
    15d4:	7e a7       	std	Y+46, r23	; 0x2e
    15d6:	6d a7       	std	Y+45, r22	; 0x2d
    15d8:	5a c0       	rjmp	.+180    	; 0x168e <straight+0x380>
			break;
		}
		
		//If we're accelerating past our stepTarget;
		if(mouse.leftMotor.stepCount >= stepTarget)
    15da:	80 91 14 01 	lds	r24, 0x0114
    15de:	90 91 15 01 	lds	r25, 0x0115
    15e2:	a0 91 16 01 	lds	r26, 0x0116
    15e6:	b0 91 17 01 	lds	r27, 0x0117
    15ea:	29 85       	ldd	r18, Y+9	; 0x09
    15ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    15ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    15f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    15f2:	82 17       	cp	r24, r18
    15f4:	93 07       	cpc	r25, r19
    15f6:	a4 07       	cpc	r26, r20
    15f8:	b5 07       	cpc	r27, r21
    15fa:	0c f0       	brlt	.+2      	; 0x15fe <straight+0x2f0>
    15fc:	47 c1       	rjmp	.+654    	; 0x188c <straight+0x57e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15fe:	80 ea       	ldi	r24, 0xA0	; 160
    1600:	9f e0       	ldi	r25, 0x0F	; 15
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <straight+0x2f4>
void straight(long stepTarget, int inSpeed, int maxSpeed, int exitSpeed, int accel, int decel)
{
	unsigned long startTime = milliseconds;
	mouse.rightMotor.stepCount = mouse.leftMotor.stepCount = 0;	
	
	while(inSpeed + accel*(float)((milliseconds-startTime)/1000.0) < maxSpeed)
    1606:	69 8d       	ldd	r22, Y+25	; 0x19
    1608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    160e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1612:	3b 01       	movw	r6, r22
    1614:	4c 01       	movw	r8, r24
    1616:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1618:	7e 8d       	ldd	r23, Y+30	; 0x1e
    161a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    161c:	98 a1       	ldd	r25, Y+32	; 0x20
    161e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1622:	5b 01       	movw	r10, r22
    1624:	6c 01       	movw	r12, r24
    1626:	60 91 0a 01 	lds	r22, 0x010A
    162a:	70 91 0b 01 	lds	r23, 0x010B
    162e:	80 91 0c 01 	lds	r24, 0x010C
    1632:	90 91 0d 01 	lds	r25, 0x010D
    1636:	2d 81       	ldd	r18, Y+5	; 0x05
    1638:	3e 81       	ldd	r19, Y+6	; 0x06
    163a:	4f 81       	ldd	r20, Y+7	; 0x07
    163c:	58 85       	ldd	r21, Y+8	; 0x08
    163e:	62 1b       	sub	r22, r18
    1640:	73 0b       	sbc	r23, r19
    1642:	84 0b       	sbc	r24, r20
    1644:	95 0b       	sbc	r25, r21
    1646:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatunsisf>
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a e7       	ldi	r20, 0x7A	; 122
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__divsf3>
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	c6 01       	movw	r24, r12
    165c:	b5 01       	movw	r22, r10
    165e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
    1666:	c4 01       	movw	r24, r8
    1668:	b3 01       	movw	r22, r6
    166a:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    166e:	7b 01       	movw	r14, r22
    1670:	8c 01       	movw	r16, r24
    1672:	69 a1       	ldd	r22, Y+33	; 0x21
    1674:	7a a1       	ldd	r23, Y+34	; 0x22
    1676:	8b a1       	ldd	r24, Y+35	; 0x23
    1678:	9c a1       	ldd	r25, Y+36	; 0x24
    167a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    167e:	9b 01       	movw	r18, r22
    1680:	ac 01       	movw	r20, r24
    1682:	c8 01       	movw	r24, r16
    1684:	b7 01       	movw	r22, r14
    1686:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    168a:	87 fd       	sbrc	r24, 7
    168c:	b7 ce       	rjmp	.-658    	; 0x13fc <straight+0xee>
		}
		_delay_ms(1);
	}	
	
	//Calculate when to start decelerating
	float decelSteps = (float)maxSpeed * (float)maxSpeed / (2.0 * decel) - (float)exitSpeed * (float)exitSpeed / (2.0 * decel);
    168e:	4d a5       	ldd	r20, Y+45	; 0x2d
    1690:	5e a5       	ldd	r21, Y+46	; 0x2e
    1692:	ba 01       	movw	r22, r20
    1694:	88 27       	eor	r24, r24
    1696:	77 fd       	sbrc	r23, 7
    1698:	80 95       	com	r24
    169a:	98 2f       	mov	r25, r24
    169c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    16a0:	1b 01       	movw	r2, r22
    16a2:	2c 01       	movw	r4, r24
    16a4:	af 85       	ldd	r26, Y+15	; 0x0f
    16a6:	b8 89       	ldd	r27, Y+16	; 0x10
    16a8:	bd 01       	movw	r22, r26
    16aa:	88 27       	eor	r24, r24
    16ac:	77 fd       	sbrc	r23, 7
    16ae:	80 95       	com	r24
    16b0:	98 2f       	mov	r25, r24
    16b2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    16b6:	3b 01       	movw	r6, r22
    16b8:	4c 01       	movw	r8, r24
    16ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    16bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    16be:	bf 01       	movw	r22, r30
    16c0:	88 27       	eor	r24, r24
    16c2:	77 fd       	sbrc	r23, 7
    16c4:	80 95       	com	r24
    16c6:	98 2f       	mov	r25, r24
    16c8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    16cc:	69 83       	std	Y+1, r22	; 0x01
    16ce:	7a 83       	std	Y+2, r23	; 0x02
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	c2 01       	movw	r24, r4
    16d6:	b1 01       	movw	r22, r2
    16d8:	a2 01       	movw	r20, r4
    16da:	91 01       	movw	r18, r2
    16dc:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    16e0:	7b 01       	movw	r14, r22
    16e2:	8c 01       	movw	r16, r24
    16e4:	c4 01       	movw	r24, r8
    16e6:	b3 01       	movw	r22, r6
    16e8:	a4 01       	movw	r20, r8
    16ea:	93 01       	movw	r18, r6
    16ec:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	c8 01       	movw	r24, r16
    16f6:	b7 01       	movw	r22, r14
    16f8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__divsf3>
    16fc:	5b 01       	movw	r10, r22
    16fe:	6c 01       	movw	r12, r24
    1700:	69 81       	ldd	r22, Y+1	; 0x01
    1702:	7a 81       	ldd	r23, Y+2	; 0x02
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1710:	7b 01       	movw	r14, r22
    1712:	8c 01       	movw	r16, r24
    1714:	c4 01       	movw	r24, r8
    1716:	b3 01       	movw	r22, r6
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 ec       	ldi	r21, 0xC0	; 192
    1720:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
    1728:	c8 01       	movw	r24, r16
    172a:	b7 01       	movw	r22, r14
    172c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__divsf3>
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	c6 01       	movw	r24, r12
    1736:	b5 01       	movw	r22, r10
    1738:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    173c:	5b 01       	movw	r10, r22
    173e:	6c 01       	movw	r12, r24

	//Decelerate n stuff
	while(mouse.leftMotor.stepCount + decelSteps < stepTarget);
    1740:	60 91 14 01 	lds	r22, 0x0114
    1744:	70 91 15 01 	lds	r23, 0x0115
    1748:	80 91 16 01 	lds	r24, 0x0116
    174c:	90 91 17 01 	lds	r25, 0x0117
    1750:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1754:	a6 01       	movw	r20, r12
    1756:	95 01       	movw	r18, r10
    1758:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    175c:	7b 01       	movw	r14, r22
    175e:	8c 01       	movw	r16, r24
    1760:	69 85       	ldd	r22, Y+9	; 0x09
    1762:	7a 85       	ldd	r23, Y+10	; 0x0a
    1764:	8b 85       	ldd	r24, Y+11	; 0x0b
    1766:	9c 85       	ldd	r25, Y+12	; 0x0c
    1768:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	c8 01       	movw	r24, r16
    1772:	b7 01       	movw	r22, r14
    1774:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1778:	87 fd       	sbrc	r24, 7
    177a:	e2 cf       	rjmp	.-60     	; 0x1740 <straight+0x432>
	
	startTime = milliseconds;
    177c:	a0 90 0a 01 	lds	r10, 0x010A
    1780:	b0 90 0b 01 	lds	r11, 0x010B
    1784:	c0 90 0c 01 	lds	r12, 0x010C
    1788:	d0 90 0d 01 	lds	r13, 0x010D
    178c:	56 c0       	rjmp	.+172    	; 0x183a <straight+0x52c>
		
	while(maxSpeed - decel*(float)((milliseconds-startTime)/1000.0) > exitSpeed)
	{		
		float curSpeed = maxSpeed - decel*(float)((milliseconds-startTime)/1000.0);
    178e:	60 91 0a 01 	lds	r22, 0x010A
    1792:	70 91 0b 01 	lds	r23, 0x010B
    1796:	80 91 0c 01 	lds	r24, 0x010C
    179a:	90 91 0d 01 	lds	r25, 0x010D
    179e:	6a 19       	sub	r22, r10
    17a0:	7b 09       	sbc	r23, r11
    17a2:	8c 09       	sbc	r24, r12
    17a4:	9d 09       	sbc	r25, r13
    17a6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatunsisf>
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4a e7       	ldi	r20, 0x7A	; 122
    17b0:	54 ec       	ldi	r21, 0xC4	; 196
    17b2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__divsf3>
    17b6:	9b 01       	movw	r18, r22
    17b8:	ac 01       	movw	r20, r24
    17ba:	c4 01       	movw	r24, r8
    17bc:	b3 01       	movw	r22, r6
    17be:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    17c2:	9b 01       	movw	r18, r22
    17c4:	ac 01       	movw	r20, r24
    17c6:	c2 01       	movw	r24, r4
    17c8:	b1 01       	movw	r22, r2
    17ca:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
		
		mouse.velocity = curSpeed;
    17ce:	60 93 50 01 	sts	0x0150, r22
    17d2:	70 93 51 01 	sts	0x0151, r23
    17d6:	80 93 52 01 	sts	0x0152, r24
    17da:	90 93 53 01 	sts	0x0153, r25
		mouse.leftMotor.currentStepDelay =  getDelayFromVelocity(curSpeed);
    17de:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
    17e2:	7b 01       	movw	r14, r22
    17e4:	8c 01       	movw	r16, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <getDelayFromVelocity>
    17ec:	aa 27       	eor	r26, r26
    17ee:	97 fd       	sbrc	r25, 7
    17f0:	a0 95       	com	r26
    17f2:	ba 2f       	mov	r27, r26
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    17fc:	60 93 18 01 	sts	0x0118, r22
    1800:	70 93 19 01 	sts	0x0119, r23
    1804:	80 93 1a 01 	sts	0x011A, r24
    1808:	90 93 1b 01 	sts	0x011B, r25
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed);
    180c:	c7 01       	movw	r24, r14
    180e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <getDelayFromVelocity>
    1812:	aa 27       	eor	r26, r26
    1814:	97 fd       	sbrc	r25, 7
    1816:	a0 95       	com	r26
    1818:	ba 2f       	mov	r27, r26
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1822:	60 93 30 01 	sts	0x0130, r22
    1826:	70 93 31 01 	sts	0x0131, r23
    182a:	80 93 32 01 	sts	0x0132, r24
    182e:	90 93 33 01 	sts	0x0133, r25
    1832:	80 ea       	ldi	r24, 0xA0	; 160
    1834:	9f e0       	ldi	r25, 0x0F	; 15
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <straight+0x528>
	//Decelerate n stuff
	while(mouse.leftMotor.stepCount + decelSteps < stepTarget);
	
	startTime = milliseconds;
		
	while(maxSpeed - decel*(float)((milliseconds-startTime)/1000.0) > exitSpeed)
    183a:	60 91 0a 01 	lds	r22, 0x010A
    183e:	70 91 0b 01 	lds	r23, 0x010B
    1842:	80 91 0c 01 	lds	r24, 0x010C
    1846:	90 91 0d 01 	lds	r25, 0x010D
    184a:	6a 19       	sub	r22, r10
    184c:	7b 09       	sbc	r23, r11
    184e:	8c 09       	sbc	r24, r12
    1850:	9d 09       	sbc	r25, r13
    1852:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatunsisf>
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a e7       	ldi	r20, 0x7A	; 122
    185c:	54 ec       	ldi	r21, 0xC4	; 196
    185e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__divsf3>
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	c4 01       	movw	r24, r8
    1868:	b3 01       	movw	r22, r6
    186a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	c2 01       	movw	r24, r4
    1874:	b1 01       	movw	r22, r2
    1876:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    187a:	29 81       	ldd	r18, Y+1	; 0x01
    187c:	3a 81       	ldd	r19, Y+2	; 0x02
    187e:	4b 81       	ldd	r20, Y+3	; 0x03
    1880:	5c 81       	ldd	r21, Y+4	; 0x04
    1882:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
    1886:	18 16       	cp	r1, r24
    1888:	0c f4       	brge	.+2      	; 0x188c <straight+0x57e>
    188a:	81 cf       	rjmp	.-254    	; 0x178e <straight+0x480>
		mouse.rightMotor.currentStepDelay = getDelayFromVelocity(curSpeed);
		
		_delay_ms(1);
	}

}
    188c:	ae 96       	adiw	r28, 0x2e	; 46
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	bf 90       	pop	r11
    18aa:	af 90       	pop	r10
    18ac:	9f 90       	pop	r9
    18ae:	8f 90       	pop	r8
    18b0:	7f 90       	pop	r7
    18b2:	6f 90       	pop	r6
    18b4:	5f 90       	pop	r5
    18b6:	4f 90       	pop	r4
    18b8:	3f 90       	pop	r3
    18ba:	2f 90       	pop	r2
    18bc:	08 95       	ret

000018be <setupStepperMotor>:
}

void setupStepperMotor()
{
	//Motor Pins are D2 and D4 on arduino nano
	DDRD |= (1 << PORTD1) | (1 << PORTD2) | (1 << PORTD3);
    18be:	8a b1       	in	r24, 0x0a	; 10
    18c0:	8e 60       	ori	r24, 0x0E	; 14
    18c2:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB1) | (1 << PORTB0) | (1 << PORTB6) | (1 << PORTB7);
    18c4:	84 b1       	in	r24, 0x04	; 4
    18c6:	83 6c       	ori	r24, 0xC3	; 195
    18c8:	84 b9       	out	0x04, r24	; 4
	
	//Set to CTC
	TCCR1B = (1 << WGM12);
    18ca:	88 e0       	ldi	r24, 0x08	; 8
    18cc:	80 93 81 00 	sts	0x0081, r24
	TCCR3B = (1 << WGM32);
    18d0:	80 93 91 00 	sts	0x0091, r24
	
	//Compare Ticks
	OCR1A = 0;
    18d4:	10 92 89 00 	sts	0x0089, r1
    18d8:	10 92 88 00 	sts	0x0088, r1
	OCR3A = 0;
    18dc:	10 92 99 00 	sts	0x0099, r1
    18e0:	10 92 98 00 	sts	0x0098, r1
	
	//Enable Interrupts
	TIMSK1 = (1 << OCIE1A);
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	80 93 6f 00 	sts	0x006F, r24
	TIMSK3 = (1 << OCIE3A);
    18ea:	80 93 71 00 	sts	0x0071, r24
	
	//Set Prescalar to 0
	OCR1B = 0;
    18ee:	10 92 8b 00 	sts	0x008B, r1
    18f2:	10 92 8a 00 	sts	0x008A, r1
	OCR3B = 0;
    18f6:	10 92 9b 00 	sts	0x009B, r1
    18fa:	10 92 9a 00 	sts	0x009A, r1
	
	//Enable Interrupts
	sei(); 
    18fe:	78 94       	sei
{
	
	if(left)
		PORTB &= ~(1 << PB6);
	else
		PORTB |= (1 << PB6);
    1900:	2e 9a       	sbi	0x05, 6	; 5
	
	//Enable Interrupts
	sei(); 
	
	enableDrive(0);	
}
    1902:	08 95       	ret

00001904 <enableDrive>:

void enableDrive(int left)
{
	
	if(left)
    1904:	89 2b       	or	r24, r25
    1906:	11 f0       	breq	.+4      	; 0x190c <enableDrive+0x8>
		PORTB &= ~(1 << PB6);
    1908:	2e 98       	cbi	0x05, 6	; 5
    190a:	08 95       	ret
	else
		PORTB |= (1 << PB6);
    190c:	2e 9a       	sbi	0x05, 6	; 5
    190e:	08 95       	ret

00001910 <pulseMotor>:
}

/* Pulse port and pin for 10 microseconds */
void pulseMotor(volatile uint8_t *port, uint8_t pin)
{
    1910:	fc 01       	movw	r30, r24
	//Send Pulse to Motor
	(*port) |= (1 << pin);
    1912:	20 81       	ld	r18, Z
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <pulseMotor+0xe>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	6a 95       	dec	r22
    1920:	e2 f7       	brpl	.-8      	; 0x191a <pulseMotor+0xa>
    1922:	28 2b       	or	r18, r24
    1924:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1926:	9a e1       	ldi	r25, 0x1A	; 26
    1928:	9a 95       	dec	r25
    192a:	f1 f7       	brne	.-4      	; 0x1928 <pulseMotor+0x18>
	_delay_us(5);
	(*port) &= ~(1 << pin);
    192c:	20 81       	ld	r18, Z
    192e:	80 95       	com	r24
    1930:	82 23       	and	r24, r18
    1932:	80 83       	st	Z, r24
}
    1934:	08 95       	ret

00001936 <__vector_32>:
	OCR1A = mouse.leftMotor.currentStepDelay;
}

/* RIGHT MOTOR CONTROL */
ISR(TIMER3_COMPA_vect)
{	
    1936:	1f 92       	push	r1
    1938:	0f 92       	push	r0
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	0f 92       	push	r0
    193e:	11 24       	eor	r1, r1
    1940:	2f 93       	push	r18
    1942:	3f 93       	push	r19
    1944:	4f 93       	push	r20
    1946:	5f 93       	push	r21
    1948:	6f 93       	push	r22
    194a:	7f 93       	push	r23
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	af 93       	push	r26
    1952:	bf 93       	push	r27
    1954:	ef 93       	push	r30
    1956:	ff 93       	push	r31
	//Pulse and increment motor
	pulseMotor(&PORTB, PB7);
    1958:	85 e2       	ldi	r24, 0x25	; 37
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	67 e0       	ldi	r22, 0x07	; 7
    195e:	0e 94 88 0c 	call	0x1910	; 0x1910 <pulseMotor>
	mouse.rightMotor.stepCount++;
    1962:	80 91 2c 01 	lds	r24, 0x012C
    1966:	90 91 2d 01 	lds	r25, 0x012D
    196a:	a0 91 2e 01 	lds	r26, 0x012E
    196e:	b0 91 2f 01 	lds	r27, 0x012F
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	a1 1d       	adc	r26, r1
    1976:	b1 1d       	adc	r27, r1
    1978:	80 93 2c 01 	sts	0x012C, r24
    197c:	90 93 2d 01 	sts	0x012D, r25
    1980:	a0 93 2e 01 	sts	0x012E, r26
    1984:	b0 93 2f 01 	sts	0x012F, r27

	OCR3A = mouse.rightMotor.currentStepDelay;
    1988:	60 91 30 01 	lds	r22, 0x0130
    198c:	70 91 31 01 	lds	r23, 0x0131
    1990:	80 91 32 01 	lds	r24, 0x0132
    1994:	90 91 33 01 	lds	r25, 0x0133
    1998:	0e 94 46 14 	call	0x288c	; 0x288c <__fixunssfsi>
    199c:	70 93 99 00 	sts	0x0099, r23
    19a0:	60 93 98 00 	sts	0x0098, r22
}
    19a4:	ff 91       	pop	r31
    19a6:	ef 91       	pop	r30
    19a8:	bf 91       	pop	r27
    19aa:	af 91       	pop	r26
    19ac:	9f 91       	pop	r25
    19ae:	8f 91       	pop	r24
    19b0:	7f 91       	pop	r23
    19b2:	6f 91       	pop	r22
    19b4:	5f 91       	pop	r21
    19b6:	4f 91       	pop	r20
    19b8:	3f 91       	pop	r19
    19ba:	2f 91       	pop	r18
    19bc:	0f 90       	pop	r0
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	0f 90       	pop	r0
    19c2:	1f 90       	pop	r1
    19c4:	18 95       	reti

000019c6 <__vector_17>:

extern volatile Mouse mouse;

/* LEFT MOTOR CONTROL */
ISR(TIMER1_COMPA_vect)
{
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	0f 92       	push	r0
    19ce:	11 24       	eor	r1, r1
    19d0:	2f 93       	push	r18
    19d2:	3f 93       	push	r19
    19d4:	4f 93       	push	r20
    19d6:	5f 93       	push	r21
    19d8:	6f 93       	push	r22
    19da:	7f 93       	push	r23
    19dc:	8f 93       	push	r24
    19de:	9f 93       	push	r25
    19e0:	af 93       	push	r26
    19e2:	bf 93       	push	r27
    19e4:	ef 93       	push	r30
    19e6:	ff 93       	push	r31
	pulseMotor(&PORTD, PD1);
    19e8:	8b e2       	ldi	r24, 0x2B	; 43
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	0e 94 88 0c 	call	0x1910	; 0x1910 <pulseMotor>
	mouse.leftMotor.stepCount++;		
    19f2:	80 91 14 01 	lds	r24, 0x0114
    19f6:	90 91 15 01 	lds	r25, 0x0115
    19fa:	a0 91 16 01 	lds	r26, 0x0116
    19fe:	b0 91 17 01 	lds	r27, 0x0117
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	a1 1d       	adc	r26, r1
    1a06:	b1 1d       	adc	r27, r1
    1a08:	80 93 14 01 	sts	0x0114, r24
    1a0c:	90 93 15 01 	sts	0x0115, r25
    1a10:	a0 93 16 01 	sts	0x0116, r26
    1a14:	b0 93 17 01 	sts	0x0117, r27

	OCR1A = mouse.leftMotor.currentStepDelay;
    1a18:	60 91 18 01 	lds	r22, 0x0118
    1a1c:	70 91 19 01 	lds	r23, 0x0119
    1a20:	80 91 1a 01 	lds	r24, 0x011A
    1a24:	90 91 1b 01 	lds	r25, 0x011B
    1a28:	0e 94 46 14 	call	0x288c	; 0x288c <__fixunssfsi>
    1a2c:	70 93 89 00 	sts	0x0089, r23
    1a30:	60 93 88 00 	sts	0x0088, r22
}
    1a34:	ff 91       	pop	r31
    1a36:	ef 91       	pop	r30
    1a38:	bf 91       	pop	r27
    1a3a:	af 91       	pop	r26
    1a3c:	9f 91       	pop	r25
    1a3e:	8f 91       	pop	r24
    1a40:	7f 91       	pop	r23
    1a42:	6f 91       	pop	r22
    1a44:	5f 91       	pop	r21
    1a46:	4f 91       	pop	r20
    1a48:	3f 91       	pop	r19
    1a4a:	2f 91       	pop	r18
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <setDirection>:
	(*port) &= ~(1 << pin);
}

void setDirection(int left, int right)
{
	if(left)
    1a56:	89 2b       	or	r24, r25
    1a58:	11 f0       	breq	.+4      	; 0x1a5e <setDirection+0x8>
		PORTD &= ~(1 << PD0);
    1a5a:	58 98       	cbi	0x0b, 0	; 11
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <setDirection+0xa>
	else
		PORTD |= (1 << PD0);
    1a5e:	58 9a       	sbi	0x0b, 0	; 11
		
	if(right)
    1a60:	67 2b       	or	r22, r23
    1a62:	11 f0       	breq	.+4      	; 0x1a68 <setDirection+0x12>
		PORTD |= (1 << PD6);
    1a64:	5e 9a       	sbi	0x0b, 6	; 11
    1a66:	08 95       	ret
	else
		PORTD &= ~(1 << PD6);
    1a68:	5e 98       	cbi	0x0b, 6	; 11
    1a6a:	08 95       	ret

00001a6c <eightBitTimerFix>:
}


int eightBitTimerFix(struct StepperMotor *motor)
{
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	ec 01       	movw	r28, r24
	
	int returnNum;

	if(motor->delayCounter <= 255)
    1a72:	68 85       	ldd	r22, Y+8	; 0x08
    1a74:	79 85       	ldd	r23, Y+9	; 0x09
    1a76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	53 e4       	ldi	r21, 0x43	; 67
    1a82:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__cmpsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	7c f0       	brlt	.+30     	; 0x1aa8 <eightBitTimerFix+0x3c>
	{
		returnNum = motor->delayCounter;
    1a8a:	68 85       	ldd	r22, Y+8	; 0x08
    1a8c:	79 85       	ldd	r23, Y+9	; 0x09
    1a8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a90:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a92:	0e 94 41 14 	call	0x2882	; 0x2882 <__fixsfsi>
		motor->delayCounter = 0;	
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e0       	ldi	r26, 0x00	; 0
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	88 87       	std	Y+8, r24	; 0x08
    1aa0:	99 87       	std	Y+9, r25	; 0x09
    1aa2:	aa 87       	std	Y+10, r26	; 0x0a
    1aa4:	bb 87       	std	Y+11, r27	; 0x0b
    1aa6:	10 c0       	rjmp	.+32     	; 0x1ac8 <eightBitTimerFix+0x5c>
	}
	else
	{
		motor->delayCounter -= 255;
    1aa8:	68 85       	ldd	r22, Y+8	; 0x08
    1aaa:	79 85       	ldd	r23, Y+9	; 0x09
    1aac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	53 e4       	ldi	r21, 0x43	; 67
    1ab8:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
    1abc:	68 87       	std	Y+8, r22	; 0x08
    1abe:	79 87       	std	Y+9, r23	; 0x09
    1ac0:	8a 87       	std	Y+10, r24	; 0x0a
    1ac2:	9b 87       	std	Y+11, r25	; 0x0b
    1ac4:	6f ef       	ldi	r22, 0xFF	; 255
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
		returnNum = 255;
	}
	return returnNum;
}
    1ac8:	cb 01       	movw	r24, r22
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <turnOnTimers>:

void turnOnTimers(int one, int two)
{
	if(one)
    1ad0:	89 2b       	or	r24, r25
    1ad2:	21 f0       	breq	.+8      	; 0x1adc <turnOnTimers+0xc>
		TCCR1B |= (1 << CS11) | (1 << CS10);
    1ad4:	80 91 81 00 	lds	r24, 0x0081
    1ad8:	83 60       	ori	r24, 0x03	; 3
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <turnOnTimers+0x12>
	else
		TCCR1B &= ~((1 << CS11) | (1 << CS10));
    1adc:	80 91 81 00 	lds	r24, 0x0081
    1ae0:	8c 7f       	andi	r24, 0xFC	; 252
    1ae2:	80 93 81 00 	sts	0x0081, r24
		
	if(two)
    1ae6:	67 2b       	or	r22, r23
    1ae8:	21 f0       	breq	.+8      	; 0x1af2 <turnOnTimers+0x22>
		TCCR3B |= (1 << CS31) | (1 << CS30);
    1aea:	80 91 91 00 	lds	r24, 0x0091
    1aee:	83 60       	ori	r24, 0x03	; 3
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <turnOnTimers+0x28>
	else	
		TCCR3B &= ~((1 << CS31) | (1 << CS30));
    1af2:	80 91 91 00 	lds	r24, 0x0091
    1af6:	8c 7f       	andi	r24, 0xFC	; 252
    1af8:	80 93 91 00 	sts	0x0091, r24
    1afc:	08 95       	ret

00001afe <getDelayFromVelocity>:
}

int getDelayFromVelocity(int stepsPerSecond)
{
	if(stepsPerSecond < 10)
    1afe:	8a 30       	cpi	r24, 0x0A	; 10
    1b00:	91 05       	cpc	r25, r1
    1b02:	1c f4       	brge	.+6      	; 0x1b0a <getDelayFromVelocity+0xc>
    1b04:	28 ea       	ldi	r18, 0xA8	; 168
    1b06:	31 e6       	ldi	r19, 0x61	; 97
    1b08:	0b c0       	rjmp	.+22     	; 0x1b20 <getDelayFromVelocity+0x22>
		return 25000;
	else
		return TIMER_FREQUENCY / stepsPerSecond;
    1b0a:	9c 01       	movw	r18, r24
    1b0c:	44 27       	eor	r20, r20
    1b0e:	37 fd       	sbrc	r19, 7
    1b10:	40 95       	com	r20
    1b12:	54 2f       	mov	r21, r20
    1b14:	60 e9       	ldi	r22, 0x90	; 144
    1b16:	70 ed       	ldi	r23, 0xD0	; 208
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__divmodsi4>
}
    1b20:	c9 01       	movw	r24, r18
    1b22:	08 95       	ret

00001b24 <turnOnLeds>:
	return !(ReadADC(analogChannel) > 512);
}

void turnOnLeds(int num)
{
	if((num & 4) == 4)	
    1b24:	82 ff       	sbrs	r24, 2
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <turnOnLeds+0x8>
		PORTE |= (1 << PE6);
    1b28:	76 9a       	sbi	0x0e, 6	; 14
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <turnOnLeds+0xa>
	
	else
		PORTE &= ~(1 << PE6);
    1b2c:	76 98       	cbi	0x0e, 6	; 14
		
	if((num & 2) == 2)
    1b2e:	81 ff       	sbrs	r24, 1
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <turnOnLeds+0x12>
		PORTB |= (1 << PB5);
    1b32:	2d 9a       	sbi	0x05, 5	; 5
    1b34:	08 95       	ret
		
	else
		PORTB &= ~(1 << PB5);
    1b36:	2d 98       	cbi	0x05, 5	; 5
    1b38:	08 95       	ret

00001b3a <setupADC>:

/* Setup Analog To Digital Converter */
void setupADC()
{
	//Setup Registers
	ADMUX = (1 << REFS0);// | (1 << MUX0) | (1 << MUX1) | (1 << MUX2);
    1b3a:	80 e4       	ldi	r24, 0x40	; 64
    1b3c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);	
    1b40:	87 e8       	ldi	r24, 0x87	; 135
    1b42:	80 93 7a 00 	sts	0x007A, r24
	
	//IR Triggers
	DDRD |= (1 << PORTD4) | (1 << PORTD7);
    1b46:	8a b1       	in	r24, 0x0a	; 10
    1b48:	80 69       	ori	r24, 0x90	; 144
    1b4a:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << PORTC6);
    1b4c:	3e 9a       	sbi	0x07, 6	; 7
	
	//LED's
	DDRB |= (1 << PORTB4);
    1b4e:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1 << PORTB5);
    1b50:	25 9a       	sbi	0x04, 5	; 4
	DDRE |= (1 << PORTE6);	
    1b52:	6e 9a       	sbi	0x0d, 6	; 13
}
    1b54:	08 95       	ret

00001b56 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX= (1 << REFS0) | ch;
    1b56:	87 70       	andi	r24, 0x07	; 7
    1b58:	80 64       	ori	r24, 0x40	; 64
    1b5a:	80 93 7c 00 	sts	0x007C, r24

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
    1b5e:	80 91 7a 00 	lds	r24, 0x007A
    1b62:	80 64       	ori	r24, 0x40	; 64
    1b64:	80 93 7a 00 	sts	0x007A, r24
	
   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
    1b68:	80 91 7a 00 	lds	r24, 0x007A
    1b6c:	84 ff       	sbrs	r24, 4
    1b6e:	fc cf       	rjmp	.-8      	; 0x1b68 <ReadADC+0x12>

   ADCSRA|=(1<<ADIF);
    1b70:	80 91 7a 00 	lds	r24, 0x007A
    1b74:	80 61       	ori	r24, 0x10	; 16
    1b76:	80 93 7a 00 	sts	0x007A, r24

   return(ADC);
    1b7a:	20 91 78 00 	lds	r18, 0x0078
    1b7e:	30 91 79 00 	lds	r19, 0x0079
}
    1b82:	c9 01       	movw	r24, r18
    1b84:	08 95       	ret

00001b86 <isButtonPushed>:
	gyroComp = ReadADC(7);
}

int isButtonPushed(int analogChannel)
{
	return !(ReadADC(analogChannel) > 512);
    1b86:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <ReadADC>
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	81 50       	subi	r24, 0x01	; 1
    1b90:	92 40       	sbci	r25, 0x02	; 2
    1b92:	10 f4       	brcc	.+4      	; 0x1b98 <isButtonPushed+0x12>
    1b94:	21 e0       	ldi	r18, 0x01	; 1
    1b96:	30 e0       	ldi	r19, 0x00	; 0
}
    1b98:	c9 01       	movw	r24, r18
    1b9a:	08 95       	ret

00001b9c <calibrateGyro>:
	return gyroSum; 
}

void calibrateGyro()
{
	gyroComp = ReadADC(7);
    1b9c:	87 e0       	ldi	r24, 0x07	; 7
    1b9e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <ReadADC>
    1ba2:	90 93 65 01 	sts	0x0165, r25
    1ba6:	80 93 64 01 	sts	0x0164, r24
}
    1baa:	08 95       	ret

00001bac <updateGyroValue>:
volatile int gyroSum = 0;
volatile int gyroComp;

int updateGyroValue()
{
	int dif = ReadADC(7) - gyroComp;
    1bac:	87 e0       	ldi	r24, 0x07	; 7
    1bae:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <ReadADC>
    1bb2:	20 91 64 01 	lds	r18, 0x0164
    1bb6:	30 91 65 01 	lds	r19, 0x0165
    1bba:	82 1b       	sub	r24, r18
    1bbc:	93 0b       	sbc	r25, r19
    1bbe:	9c 01       	movw	r18, r24
	
	if(dif > 2 || dif < -2)
    1bc0:	02 96       	adiw	r24, 0x02	; 2
    1bc2:	05 97       	sbiw	r24, 0x05	; 5
    1bc4:	50 f0       	brcs	.+20     	; 0x1bda <updateGyroValue+0x2e>
		gyroSum += dif;
    1bc6:	80 91 08 01 	lds	r24, 0x0108
    1bca:	90 91 09 01 	lds	r25, 0x0109
    1bce:	82 0f       	add	r24, r18
    1bd0:	93 1f       	adc	r25, r19
    1bd2:	90 93 09 01 	sts	0x0109, r25
    1bd6:	80 93 08 01 	sts	0x0108, r24
		
	return gyroSum; 
    1bda:	20 91 08 01 	lds	r18, 0x0108
    1bde:	30 91 09 01 	lds	r19, 0x0109
}
    1be2:	c9 01       	movw	r24, r18
    1be4:	08 95       	ret

00001be6 <getPotSensorValue>:
	return emit;	
}

int getPotSensorValue(int analogChannel)
{ 
	return ReadADC(analogChannel);
    1be6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <ReadADC>
}
    1bea:	08 95       	ret

00001bec <getIRSensorValue>:
		
	return 90.0 - atan2(5,value2-value) * 57.2957795; 
}

int getIRSensorValue(volatile uint8_t *port, uint8_t pin, int analogChannel)
{
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	7c 01       	movw	r14, r24
    1bfa:	84 2f       	mov	r24, r20
	//Turn on Emitter
	(*port) |= (1 << pin);
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	90 81       	ld	r25, Z
    1c00:	01 e0       	ldi	r16, 0x01	; 1
    1c02:	10 e0       	ldi	r17, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <getIRSensorValue+0x1e>
    1c06:	00 0f       	add	r16, r16
    1c08:	11 1f       	adc	r17, r17
    1c0a:	6a 95       	dec	r22
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <getIRSensorValue+0x1a>
    1c0e:	90 2b       	or	r25, r16
    1c10:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c12:	90 e4       	ldi	r25, 0x40	; 64
    1c14:	c9 2e       	mov	r12, r25
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	d9 2e       	mov	r13, r25
    1c1a:	f6 01       	movw	r30, r12
    1c1c:	31 97       	sbiw	r30, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <getIRSensorValue+0x30>
	
	_delay_us(80);
	
	int emit = ReadADC(analogChannel);
    1c20:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <ReadADC>
	
	//Turn off Emitter
	(*port) &= ~(1 << pin);
    1c24:	f7 01       	movw	r30, r14
    1c26:	20 81       	ld	r18, Z
    1c28:	00 95       	com	r16
    1c2a:	02 23       	and	r16, r18
    1c2c:	00 83       	st	Z, r16
    1c2e:	f6 01       	movw	r30, r12
    1c30:	31 97       	sbiw	r30, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <getIRSensorValue+0x44>
	
	_delay_us(80);
	
	return emit;	
}
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <linearizeIRSensorValues_Front>:
{
	return -6.0220498115*log( input ) + 43.5411429577;
}

float linearizeIRSensorValues_Front(float input)
{
    1c42:	ef 92       	push	r14
    1c44:	ff 92       	push	r15
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	7b 01       	movw	r14, r22
    1c4c:	8c 01       	movw	r16, r24
	if(input > 978)
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e8       	ldi	r19, 0x80	; 128
    1c52:	44 e7       	ldi	r20, 0x74	; 116
    1c54:	54 e4       	ldi	r21, 0x44	; 68
    1c56:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	6c f4       	brge	.+26     	; 0x1c78 <linearizeIRSensorValues_Front+0x36>
		return -0.17272727272*input + 173.6636363636;
    1c5e:	c8 01       	movw	r24, r16
    1c60:	b7 01       	movw	r22, r14
    1c62:	2b e6       	ldi	r18, 0x6B	; 107
    1c64:	3f ed       	ldi	r19, 0xDF	; 223
    1c66:	40 e3       	ldi	r20, 0x30	; 48
    1c68:	5e eb       	ldi	r21, 0xBE	; 190
    1c6a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1c6e:	24 ee       	ldi	r18, 0xE4	; 228
    1c70:	39 ea       	ldi	r19, 0xA9	; 169
    1c72:	4d e2       	ldi	r20, 0x2D	; 45
    1c74:	53 e4       	ldi	r21, 0x43	; 67
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <linearizeIRSensorValues_Front+0x52>
	
	else
		return -3.8522217222*log( input ) + 31.2529127395;
    1c78:	c8 01       	movw	r24, r16
    1c7a:	b7 01       	movw	r22, r14
    1c7c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <log>
    1c80:	2d ec       	ldi	r18, 0xCD	; 205
    1c82:	3a e8       	ldi	r19, 0x8A	; 138
    1c84:	46 e7       	ldi	r20, 0x76	; 118
    1c86:	50 ec       	ldi	r21, 0xC0	; 192
    1c88:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1c8c:	27 ef       	ldi	r18, 0xF7	; 247
    1c8e:	35 e0       	ldi	r19, 0x05	; 5
    1c90:	4a ef       	ldi	r20, 0xFA	; 250
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
    1c98:	e6 2f       	mov	r30, r22
}
    1c9a:	2e 2f       	mov	r18, r30
    1c9c:	37 2f       	mov	r19, r23
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	59 2f       	mov	r21, r25
    1ca2:	b9 01       	movw	r22, r18
    1ca4:	ca 01       	movw	r24, r20
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	08 95       	ret

00001cb0 <getFrontRightIR>:
	return linearizeIRSensorValues_Front( getIRSensorValue(&PORTB, PB4, 5) );
}

float getFrontRightIR()
{
	return linearizeIRSensorValues_Front( getIRSensorValue(&PORTD, PD4, 7) );
    1cb0:	8b e2       	ldi	r24, 0x2B	; 43
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	64 e0       	ldi	r22, 0x04	; 4
    1cb6:	47 e0       	ldi	r20, 0x07	; 7
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <getIRSensorValue>
    1cbe:	aa 27       	eor	r26, r26
    1cc0:	97 fd       	sbrc	r25, 7
    1cc2:	a0 95       	com	r26
    1cc4:	ba 2f       	mov	r27, r26
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1cce:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <linearizeIRSensorValues_Front>
}
    1cd2:	08 95       	ret

00001cd4 <getFrontLeftIR>:
	return linearizeIRSensorValues( getIRSensorValue(&PORTC, PC6, 4) );
}

float getFrontLeftIR()
{
	return linearizeIRSensorValues_Front( getIRSensorValue(&PORTB, PB4, 5) );
    1cd4:	85 e2       	ldi	r24, 0x25	; 37
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	64 e0       	ldi	r22, 0x04	; 4
    1cda:	45 e0       	ldi	r20, 0x05	; 5
    1cdc:	50 e0       	ldi	r21, 0x00	; 0
    1cde:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <getIRSensorValue>
    1ce2:	aa 27       	eor	r26, r26
    1ce4:	97 fd       	sbrc	r25, 7
    1ce6:	a0 95       	com	r26
    1ce8:	ba 2f       	mov	r27, r26
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1cf2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <linearizeIRSensorValues_Front>
}
    1cf6:	08 95       	ret

00001cf8 <linearizeIRSensorValues>:
   return(ADC);
}

float linearizeIRSensorValues(float input)
{
	return -6.0220498115*log( input ) + 43.5411429577;
    1cf8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <log>
    1cfc:	22 ea       	ldi	r18, 0xA2	; 162
    1cfe:	34 eb       	ldi	r19, 0xB4	; 180
    1d00:	40 ec       	ldi	r20, 0xC0	; 192
    1d02:	50 ec       	ldi	r21, 0xC0	; 192
    1d04:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1d08:	21 e2       	ldi	r18, 0x21	; 33
    1d0a:	3a e2       	ldi	r19, 0x2A	; 42
    1d0c:	4e e2       	ldi	r20, 0x2E	; 46
    1d0e:	52 e4       	ldi	r21, 0x42	; 66
    1d10:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
}
    1d14:	08 95       	ret

00001d16 <getFrontRightIRLong>:
	return linearizeIRSensorValues( getIRSensorValue(&PORTB, PB4, 5) );
}

float getFrontRightIRLong()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD4, 7) );
    1d16:	8b e2       	ldi	r24, 0x2B	; 43
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	64 e0       	ldi	r22, 0x04	; 4
    1d1c:	47 e0       	ldi	r20, 0x07	; 7
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <getIRSensorValue>
    1d24:	aa 27       	eor	r26, r26
    1d26:	97 fd       	sbrc	r25, 7
    1d28:	a0 95       	com	r26
    1d2a:	ba 2f       	mov	r27, r26
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1d34:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <linearizeIRSensorValues>
}
    1d38:	08 95       	ret

00001d3a <getFrontLeftIRLong>:
	return linearizeIRSensorValues_Front( getIRSensorValue(&PORTD, PD4, 7) );
}

float getFrontLeftIRLong()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTB, PB4, 5) );
    1d3a:	85 e2       	ldi	r24, 0x25	; 37
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	64 e0       	ldi	r22, 0x04	; 4
    1d40:	45 e0       	ldi	r20, 0x05	; 5
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <getIRSensorValue>
    1d48:	aa 27       	eor	r26, r26
    1d4a:	97 fd       	sbrc	r25, 7
    1d4c:	a0 95       	com	r26
    1d4e:	ba 2f       	mov	r27, r26
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1d58:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <linearizeIRSensorValues>
}
    1d5c:	08 95       	ret

00001d5e <getRightIR>:
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD7, 6) );
}

float getRightIR()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTC, PC6, 4) );
    1d5e:	88 e2       	ldi	r24, 0x28	; 40
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	66 e0       	ldi	r22, 0x06	; 6
    1d64:	44 e0       	ldi	r20, 0x04	; 4
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <getIRSensorValue>
    1d6c:	aa 27       	eor	r26, r26
    1d6e:	97 fd       	sbrc	r25, 7
    1d70:	a0 95       	com	r26
    1d72:	ba 2f       	mov	r27, r26
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1d7c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <linearizeIRSensorValues>
}
    1d80:	08 95       	ret

00001d82 <getLeftIR>:

#include "RobotModel_Sensors.h"

float getLeftIR()
{
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD7, 6) );
    1d82:	8b e2       	ldi	r24, 0x2B	; 43
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	67 e0       	ldi	r22, 0x07	; 7
    1d88:	46 e0       	ldi	r20, 0x06	; 6
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <getIRSensorValue>
    1d90:	aa 27       	eor	r26, r26
    1d92:	97 fd       	sbrc	r25, 7
    1d94:	a0 95       	com	r26
    1d96:	ba 2f       	mov	r27, r26
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__floatsisf>
    1da0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <linearizeIRSensorValues>
}
    1da4:	08 95       	ret

00001da6 <getFrontAngle>:
	return linearizeIRSensorValues( getIRSensorValue(&PORTD, PD4, 7) );
}


float getFrontAngle()
{
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
	float value = getFrontLeftIR();
    1dae:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <getFrontLeftIR>
    1db2:	7b 01       	movw	r14, r22
    1db4:	8c 01       	movw	r16, r24
	float value2 = getFrontRightIR();
    1db6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <getFrontRightIR>
		
	return 90.0 - atan2(5,value2-value) * 57.2957795; 
    1dba:	a8 01       	movw	r20, r16
    1dbc:	97 01       	movw	r18, r14
    1dbe:	0e 94 0e 13 	call	0x261c	; 0x261c <__subsf3>
    1dc2:	9b 01       	movw	r18, r22
    1dc4:	ac 01       	movw	r20, r24
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	80 ea       	ldi	r24, 0xA0	; 160
    1dcc:	90 e4       	ldi	r25, 0x40	; 64
    1dce:	0e 94 82 13 	call	0x2704	; 0x2704 <atan2>
    1dd2:	21 ee       	ldi	r18, 0xE1	; 225
    1dd4:	3e e2       	ldi	r19, 0x2E	; 46
    1dd6:	45 e6       	ldi	r20, 0x65	; 101
    1dd8:	52 ec       	ldi	r21, 0xC2	; 194
    1dda:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	44 eb       	ldi	r20, 0xB4	; 180
    1de4:	52 e4       	ldi	r21, 0x42	; 66
    1de6:	0e 94 0f 13 	call	0x261e	; 0x261e <__addsf3>
}
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	08 95       	ret

00001df4 <USART_init>:
void USART_putstring(char* StringPtr);
 
 
void USART_init(void){
 
 UBRR1H = (uint8_t)(BAUD_PRESCALLER>>8);
    1df4:	10 92 cd 00 	sts	0x00CD, r1
 UBRR1L = (uint8_t)(BAUD_PRESCALLER);
    1df8:	87 e6       	ldi	r24, 0x67	; 103
    1dfa:	80 93 cc 00 	sts	0x00CC, r24
 UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    1dfe:	88 e1       	ldi	r24, 0x18	; 24
    1e00:	80 93 c9 00 	sts	0x00C9, r24
 UCSR1C = (3<<UCSZ10);
    1e04:	86 e0       	ldi	r24, 0x06	; 6
    1e06:	80 93 ca 00 	sts	0x00CA, r24
}
    1e0a:	08 95       	ret

00001e0c <USART_receive>:
 
unsigned char USART_receive(void){
 
 while(!(UCSR1A & (1<<RXC1)));
    1e0c:	80 91 c8 00 	lds	r24, 0x00C8
    1e10:	87 ff       	sbrs	r24, 7
    1e12:	fc cf       	rjmp	.-8      	; 0x1e0c <USART_receive>
 return UDR1;
    1e14:	80 91 ce 00 	lds	r24, 0x00CE
 
}
    1e18:	08 95       	ret

00001e1a <USART_send>:
 
void USART_send( unsigned char data){
    1e1a:	98 2f       	mov	r25, r24
 
 while(!(UCSR1A & (1<<UDRE1)));
    1e1c:	80 91 c8 00 	lds	r24, 0x00C8
    1e20:	85 ff       	sbrs	r24, 5
    1e22:	fc cf       	rjmp	.-8      	; 0x1e1c <USART_send+0x2>
 UDR1 = data;
    1e24:	90 93 ce 00 	sts	0x00CE, r25
 
}
    1e28:	08 95       	ret

00001e2a <USART_putstring>:
 
void USART_putstring(char* StringPtr){
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	07 c0       	rjmp	.+14     	; 0x1e3c <USART_putstring+0x12>
 
}
 
void USART_send( unsigned char data){
 
 while(!(UCSR1A & (1<<UDRE1)));
    1e2e:	80 91 c8 00 	lds	r24, 0x00C8
    1e32:	85 ff       	sbrs	r24, 5
    1e34:	fc cf       	rjmp	.-8      	; 0x1e2e <USART_putstring+0x4>
 UDR1 = data;
    1e36:	90 93 ce 00 	sts	0x00CE, r25
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
 USART_send(*StringPtr);
 StringPtr++;}
    1e3a:	31 96       	adiw	r30, 0x01	; 1
 
}
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
    1e3c:	90 81       	ld	r25, Z
    1e3e:	99 23       	and	r25, r25
    1e40:	b1 f7       	brne	.-20     	; 0x1e2e <USART_putstring+0x4>
 USART_send(*StringPtr);
 StringPtr++;}
 
}
    1e42:	08 95       	ret

00001e44 <print>:
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial
}

void print(char* string)
{
	USART_putstring(string);
    1e44:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <USART_putstring>
    1e48:	08 95       	ret

00001e4a <printNum>:
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial  
	USART_putstring("\n\r");
}

void printNum(float value)
{
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
	sprintf(str,"%f",value);
    1e4e:	2d b7       	in	r18, 0x3d	; 61
    1e50:	3e b7       	in	r19, 0x3e	; 62
    1e52:	28 50       	subi	r18, 0x08	; 8
    1e54:	30 40       	sbci	r19, 0x00	; 0
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	3e bf       	out	0x3e, r19	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	2d bf       	out	0x3d, r18	; 61
    1e60:	ed b7       	in	r30, 0x3d	; 61
    1e62:	fe b7       	in	r31, 0x3e	; 62
    1e64:	31 96       	adiw	r30, 0x01	; 1
    1e66:	06 e6       	ldi	r16, 0x66	; 102
    1e68:	11 e0       	ldi	r17, 0x01	; 1
    1e6a:	ad b7       	in	r26, 0x3d	; 61
    1e6c:	be b7       	in	r27, 0x3e	; 62
    1e6e:	12 96       	adiw	r26, 0x02	; 2
    1e70:	1c 93       	st	X, r17
    1e72:	0e 93       	st	-X, r16
    1e74:	11 97       	sbiw	r26, 0x01	; 1
    1e76:	22 e0       	ldi	r18, 0x02	; 2
    1e78:	31 e0       	ldi	r19, 0x01	; 1
    1e7a:	33 83       	std	Z+3, r19	; 0x03
    1e7c:	22 83       	std	Z+2, r18	; 0x02
    1e7e:	64 83       	std	Z+4, r22	; 0x04
    1e80:	75 83       	std	Z+5, r23	; 0x05
    1e82:	86 83       	std	Z+6, r24	; 0x06
    1e84:	97 83       	std	Z+7, r25	; 0x07
    1e86:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <sprintf>
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial
    1e8a:	2d b7       	in	r18, 0x3d	; 61
    1e8c:	3e b7       	in	r19, 0x3e	; 62
    1e8e:	28 5f       	subi	r18, 0xF8	; 248
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	3e bf       	out	0x3e, r19	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	2d bf       	out	0x3d, r18	; 61
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <USART_putstring>
}
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	08 95       	ret

00001ea8 <printlnNum>:
 
}

char str[16];
void printlnNum(double value)
{
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
	sprintf(str,"%f",value);
    1eac:	2d b7       	in	r18, 0x3d	; 61
    1eae:	3e b7       	in	r19, 0x3e	; 62
    1eb0:	28 50       	subi	r18, 0x08	; 8
    1eb2:	30 40       	sbci	r19, 0x00	; 0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	3e bf       	out	0x3e, r19	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	2d bf       	out	0x3d, r18	; 61
    1ebe:	ed b7       	in	r30, 0x3d	; 61
    1ec0:	fe b7       	in	r31, 0x3e	; 62
    1ec2:	31 96       	adiw	r30, 0x01	; 1
    1ec4:	06 e6       	ldi	r16, 0x66	; 102
    1ec6:	11 e0       	ldi	r17, 0x01	; 1
    1ec8:	ad b7       	in	r26, 0x3d	; 61
    1eca:	be b7       	in	r27, 0x3e	; 62
    1ecc:	12 96       	adiw	r26, 0x02	; 2
    1ece:	1c 93       	st	X, r17
    1ed0:	0e 93       	st	-X, r16
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	22 e0       	ldi	r18, 0x02	; 2
    1ed6:	31 e0       	ldi	r19, 0x01	; 1
    1ed8:	33 83       	std	Z+3, r19	; 0x03
    1eda:	22 83       	std	Z+2, r18	; 0x02
    1edc:	64 83       	std	Z+4, r22	; 0x04
    1ede:	75 83       	std	Z+5, r23	; 0x05
    1ee0:	86 83       	std	Z+6, r24	; 0x06
    1ee2:	97 83       	std	Z+7, r25	; 0x07
    1ee4:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <sprintf>
	USART_putstring(str);    //Pass the string to the USART_putstring function and sends it over the serial  
    1ee8:	2d b7       	in	r18, 0x3d	; 61
    1eea:	3e b7       	in	r19, 0x3e	; 62
    1eec:	28 5f       	subi	r18, 0xF8	; 248
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	3e bf       	out	0x3e, r19	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	2d bf       	out	0x3d, r18	; 61
    1efa:	c8 01       	movw	r24, r16
    1efc:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <USART_putstring>
	USART_putstring("\n\r");
    1f00:	85 e0       	ldi	r24, 0x05	; 5
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <USART_putstring>
}
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	08 95       	ret

00001f0e <vfprintf>:
    1f0e:	a1 e1       	ldi	r26, 0x11	; 17
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	ed e8       	ldi	r30, 0x8D	; 141
    1f14:	ff e0       	ldi	r31, 0x0F	; 15
    1f16:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__>
    1f1a:	3c 01       	movw	r6, r24
    1f1c:	7f 87       	std	Y+15, r23	; 0x0f
    1f1e:	6e 87       	std	Y+14, r22	; 0x0e
    1f20:	6a 01       	movw	r12, r20
    1f22:	fc 01       	movw	r30, r24
    1f24:	17 82       	std	Z+7, r1	; 0x07
    1f26:	16 82       	std	Z+6, r1	; 0x06
    1f28:	83 81       	ldd	r24, Z+3	; 0x03
    1f2a:	81 fd       	sbrc	r24, 1
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <vfprintf+0x26>
    1f2e:	6f ef       	ldi	r22, 0xFF	; 255
    1f30:	7f ef       	ldi	r23, 0xFF	; 255
    1f32:	6f c3       	rjmp	.+1758   	; 0x2612 <vfprintf+0x704>
    1f34:	9e 01       	movw	r18, r28
    1f36:	2f 5f       	subi	r18, 0xFF	; 255
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	39 8b       	std	Y+17, r19	; 0x11
    1f3c:	28 8b       	std	Y+16, r18	; 0x10
    1f3e:	f3 01       	movw	r30, r6
    1f40:	23 81       	ldd	r18, Z+3	; 0x03
    1f42:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f44:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f46:	23 fd       	sbrc	r18, 3
    1f48:	85 91       	lpm	r24, Z+
    1f4a:	23 ff       	sbrs	r18, 3
    1f4c:	81 91       	ld	r24, Z+
    1f4e:	ff 87       	std	Y+15, r31	; 0x0f
    1f50:	ee 87       	std	Y+14, r30	; 0x0e
    1f52:	88 23       	and	r24, r24
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <vfprintf+0x4a>
    1f56:	5a c3       	rjmp	.+1716   	; 0x260c <vfprintf+0x6fe>
    1f58:	85 32       	cpi	r24, 0x25	; 37
    1f5a:	51 f4       	brne	.+20     	; 0x1f70 <vfprintf+0x62>
    1f5c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f5e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f60:	23 fd       	sbrc	r18, 3
    1f62:	85 91       	lpm	r24, Z+
    1f64:	23 ff       	sbrs	r18, 3
    1f66:	81 91       	ld	r24, Z+
    1f68:	ff 87       	std	Y+15, r31	; 0x0f
    1f6a:	ee 87       	std	Y+14, r30	; 0x0e
    1f6c:	85 32       	cpi	r24, 0x25	; 37
    1f6e:	29 f4       	brne	.+10     	; 0x1f7a <vfprintf+0x6c>
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	b3 01       	movw	r22, r6
    1f74:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    1f78:	e2 cf       	rjmp	.-60     	; 0x1f3e <vfprintf+0x30>
    1f7a:	98 2f       	mov	r25, r24
    1f7c:	10 e0       	ldi	r17, 0x00	; 0
    1f7e:	88 24       	eor	r8, r8
    1f80:	99 24       	eor	r9, r9
    1f82:	10 32       	cpi	r17, 0x20	; 32
    1f84:	b0 f4       	brcc	.+44     	; 0x1fb2 <vfprintf+0xa4>
    1f86:	9b 32       	cpi	r25, 0x2B	; 43
    1f88:	69 f0       	breq	.+26     	; 0x1fa4 <vfprintf+0x96>
    1f8a:	9c 32       	cpi	r25, 0x2C	; 44
    1f8c:	28 f4       	brcc	.+10     	; 0x1f98 <vfprintf+0x8a>
    1f8e:	90 32       	cpi	r25, 0x20	; 32
    1f90:	51 f0       	breq	.+20     	; 0x1fa6 <vfprintf+0x98>
    1f92:	93 32       	cpi	r25, 0x23	; 35
    1f94:	71 f4       	brne	.+28     	; 0x1fb2 <vfprintf+0xa4>
    1f96:	0b c0       	rjmp	.+22     	; 0x1fae <vfprintf+0xa0>
    1f98:	9d 32       	cpi	r25, 0x2D	; 45
    1f9a:	39 f0       	breq	.+14     	; 0x1faa <vfprintf+0x9c>
    1f9c:	90 33       	cpi	r25, 0x30	; 48
    1f9e:	49 f4       	brne	.+18     	; 0x1fb2 <vfprintf+0xa4>
    1fa0:	11 60       	ori	r17, 0x01	; 1
    1fa2:	28 c0       	rjmp	.+80     	; 0x1ff4 <vfprintf+0xe6>
    1fa4:	12 60       	ori	r17, 0x02	; 2
    1fa6:	14 60       	ori	r17, 0x04	; 4
    1fa8:	25 c0       	rjmp	.+74     	; 0x1ff4 <vfprintf+0xe6>
    1faa:	18 60       	ori	r17, 0x08	; 8
    1fac:	23 c0       	rjmp	.+70     	; 0x1ff4 <vfprintf+0xe6>
    1fae:	10 61       	ori	r17, 0x10	; 16
    1fb0:	21 c0       	rjmp	.+66     	; 0x1ff4 <vfprintf+0xe6>
    1fb2:	17 fd       	sbrc	r17, 7
    1fb4:	2a c0       	rjmp	.+84     	; 0x200a <vfprintf+0xfc>
    1fb6:	89 2f       	mov	r24, r25
    1fb8:	80 53       	subi	r24, 0x30	; 48
    1fba:	8a 30       	cpi	r24, 0x0A	; 10
    1fbc:	78 f4       	brcc	.+30     	; 0x1fdc <vfprintf+0xce>
    1fbe:	16 ff       	sbrs	r17, 6
    1fc0:	06 c0       	rjmp	.+12     	; 0x1fce <vfprintf+0xc0>
    1fc2:	fa e0       	ldi	r31, 0x0A	; 10
    1fc4:	9f 9e       	mul	r9, r31
    1fc6:	90 2c       	mov	r9, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	98 0e       	add	r9, r24
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <vfprintf+0xe6>
    1fce:	3a e0       	ldi	r19, 0x0A	; 10
    1fd0:	83 9e       	mul	r8, r19
    1fd2:	80 2c       	mov	r8, r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	88 0e       	add	r8, r24
    1fd8:	10 62       	ori	r17, 0x20	; 32
    1fda:	0c c0       	rjmp	.+24     	; 0x1ff4 <vfprintf+0xe6>
    1fdc:	9e 32       	cpi	r25, 0x2E	; 46
    1fde:	21 f4       	brne	.+8      	; 0x1fe8 <vfprintf+0xda>
    1fe0:	16 fd       	sbrc	r17, 6
    1fe2:	14 c3       	rjmp	.+1576   	; 0x260c <vfprintf+0x6fe>
    1fe4:	10 64       	ori	r17, 0x40	; 64
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <vfprintf+0xe6>
    1fe8:	9c 36       	cpi	r25, 0x6C	; 108
    1fea:	11 f4       	brne	.+4      	; 0x1ff0 <vfprintf+0xe2>
    1fec:	10 68       	ori	r17, 0x80	; 128
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <vfprintf+0xe6>
    1ff0:	98 36       	cpi	r25, 0x68	; 104
    1ff2:	59 f4       	brne	.+22     	; 0x200a <vfprintf+0xfc>
    1ff4:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ff6:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ff8:	23 fd       	sbrc	r18, 3
    1ffa:	95 91       	lpm	r25, Z+
    1ffc:	23 ff       	sbrs	r18, 3
    1ffe:	91 91       	ld	r25, Z+
    2000:	ff 87       	std	Y+15, r31	; 0x0f
    2002:	ee 87       	std	Y+14, r30	; 0x0e
    2004:	99 23       	and	r25, r25
    2006:	09 f0       	breq	.+2      	; 0x200a <vfprintf+0xfc>
    2008:	bc cf       	rjmp	.-136    	; 0x1f82 <vfprintf+0x74>
    200a:	89 2f       	mov	r24, r25
    200c:	85 54       	subi	r24, 0x45	; 69
    200e:	83 30       	cpi	r24, 0x03	; 3
    2010:	20 f4       	brcc	.+8      	; 0x201a <vfprintf+0x10c>
    2012:	81 2f       	mov	r24, r17
    2014:	80 61       	ori	r24, 0x10	; 16
    2016:	90 5e       	subi	r25, 0xE0	; 224
    2018:	07 c0       	rjmp	.+14     	; 0x2028 <vfprintf+0x11a>
    201a:	89 2f       	mov	r24, r25
    201c:	85 56       	subi	r24, 0x65	; 101
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	08 f0       	brcs	.+2      	; 0x2024 <vfprintf+0x116>
    2022:	9f c1       	rjmp	.+830    	; 0x2362 <vfprintf+0x454>
    2024:	81 2f       	mov	r24, r17
    2026:	8f 7e       	andi	r24, 0xEF	; 239
    2028:	86 fd       	sbrc	r24, 6
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <vfprintf+0x122>
    202c:	76 e0       	ldi	r23, 0x06	; 6
    202e:	97 2e       	mov	r9, r23
    2030:	6f e3       	ldi	r22, 0x3F	; 63
    2032:	f6 2e       	mov	r15, r22
    2034:	f8 22       	and	r15, r24
    2036:	95 36       	cpi	r25, 0x65	; 101
    2038:	19 f4       	brne	.+6      	; 0x2040 <vfprintf+0x132>
    203a:	f0 e4       	ldi	r31, 0x40	; 64
    203c:	ff 2a       	or	r15, r31
    203e:	07 c0       	rjmp	.+14     	; 0x204e <vfprintf+0x140>
    2040:	96 36       	cpi	r25, 0x66	; 102
    2042:	19 f4       	brne	.+6      	; 0x204a <vfprintf+0x13c>
    2044:	20 e8       	ldi	r18, 0x80	; 128
    2046:	f2 2a       	or	r15, r18
    2048:	02 c0       	rjmp	.+4      	; 0x204e <vfprintf+0x140>
    204a:	91 10       	cpse	r9, r1
    204c:	9a 94       	dec	r9
    204e:	f7 fe       	sbrs	r15, 7
    2050:	0a c0       	rjmp	.+20     	; 0x2066 <vfprintf+0x158>
    2052:	3b e3       	ldi	r19, 0x3B	; 59
    2054:	39 15       	cp	r19, r9
    2056:	18 f4       	brcc	.+6      	; 0x205e <vfprintf+0x150>
    2058:	5c e3       	ldi	r21, 0x3C	; 60
    205a:	b5 2e       	mov	r11, r21
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <vfprintf+0x154>
    205e:	b9 2c       	mov	r11, r9
    2060:	b3 94       	inc	r11
    2062:	27 e0       	ldi	r18, 0x07	; 7
    2064:	09 c0       	rjmp	.+18     	; 0x2078 <vfprintf+0x16a>
    2066:	47 e0       	ldi	r20, 0x07	; 7
    2068:	49 15       	cp	r20, r9
    206a:	20 f4       	brcc	.+8      	; 0x2074 <vfprintf+0x166>
    206c:	bb 24       	eor	r11, r11
    206e:	47 e0       	ldi	r20, 0x07	; 7
    2070:	94 2e       	mov	r9, r20
    2072:	f7 cf       	rjmp	.-18     	; 0x2062 <vfprintf+0x154>
    2074:	29 2d       	mov	r18, r9
    2076:	bb 24       	eor	r11, r11
    2078:	c6 01       	movw	r24, r12
    207a:	04 96       	adiw	r24, 0x04	; 4
    207c:	9d 87       	std	Y+13, r25	; 0x0d
    207e:	8c 87       	std	Y+12, r24	; 0x0c
    2080:	f6 01       	movw	r30, r12
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	ae 01       	movw	r20, r28
    208c:	4f 5f       	subi	r20, 0xFF	; 255
    208e:	5f 4f       	sbci	r21, 0xFF	; 255
    2090:	0b 2d       	mov	r16, r11
    2092:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__ftoa_engine>
    2096:	6c 01       	movw	r12, r24
    2098:	09 81       	ldd	r16, Y+1	; 0x01
    209a:	20 2e       	mov	r2, r16
    209c:	33 24       	eor	r3, r3
    209e:	00 ff       	sbrs	r16, 0
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <vfprintf+0x19c>
    20a2:	03 fd       	sbrc	r16, 3
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <vfprintf+0x19c>
    20a6:	1d e2       	ldi	r17, 0x2D	; 45
    20a8:	09 c0       	rjmp	.+18     	; 0x20bc <vfprintf+0x1ae>
    20aa:	f1 fe       	sbrs	r15, 1
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <vfprintf+0x1a4>
    20ae:	1b e2       	ldi	r17, 0x2B	; 43
    20b0:	05 c0       	rjmp	.+10     	; 0x20bc <vfprintf+0x1ae>
    20b2:	f2 fc       	sbrc	r15, 2
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <vfprintf+0x1ac>
    20b6:	10 e0       	ldi	r17, 0x00	; 0
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <vfprintf+0x1ae>
    20ba:	10 e2       	ldi	r17, 0x20	; 32
    20bc:	c1 01       	movw	r24, r2
    20be:	8c 70       	andi	r24, 0x0C	; 12
    20c0:	90 70       	andi	r25, 0x00	; 0
    20c2:	89 2b       	or	r24, r25
    20c4:	b9 f1       	breq	.+110    	; 0x2134 <vfprintf+0x226>
    20c6:	11 23       	and	r17, r17
    20c8:	11 f4       	brne	.+4      	; 0x20ce <vfprintf+0x1c0>
    20ca:	83 e0       	ldi	r24, 0x03	; 3
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <vfprintf+0x1c2>
    20ce:	84 e0       	ldi	r24, 0x04	; 4
    20d0:	88 15       	cp	r24, r8
    20d2:	10 f0       	brcs	.+4      	; 0x20d8 <vfprintf+0x1ca>
    20d4:	88 24       	eor	r8, r8
    20d6:	0a c0       	rjmp	.+20     	; 0x20ec <vfprintf+0x1de>
    20d8:	88 1a       	sub	r8, r24
    20da:	f3 fc       	sbrc	r15, 3
    20dc:	07 c0       	rjmp	.+14     	; 0x20ec <vfprintf+0x1de>
    20de:	80 e2       	ldi	r24, 0x20	; 32
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	b3 01       	movw	r22, r6
    20e4:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    20e8:	8a 94       	dec	r8
    20ea:	c9 f7       	brne	.-14     	; 0x20de <vfprintf+0x1d0>
    20ec:	11 23       	and	r17, r17
    20ee:	29 f0       	breq	.+10     	; 0x20fa <vfprintf+0x1ec>
    20f0:	81 2f       	mov	r24, r17
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	b3 01       	movw	r22, r6
    20f6:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    20fa:	23 fe       	sbrs	r2, 3
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <vfprintf+0x1f6>
    20fe:	03 e3       	ldi	r16, 0x33	; 51
    2100:	11 e0       	ldi	r17, 0x01	; 1
    2102:	0e c0       	rjmp	.+28     	; 0x2120 <vfprintf+0x212>
    2104:	07 e3       	ldi	r16, 0x37	; 55
    2106:	11 e0       	ldi	r17, 0x01	; 1
    2108:	0b c0       	rjmp	.+22     	; 0x2120 <vfprintf+0x212>
    210a:	e1 14       	cp	r14, r1
    210c:	f1 04       	cpc	r15, r1
    210e:	09 f0       	breq	.+2      	; 0x2112 <vfprintf+0x204>
    2110:	80 52       	subi	r24, 0x20	; 32
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	b3 01       	movw	r22, r6
    2116:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    211a:	0f 5f       	subi	r16, 0xFF	; 255
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	05 c0       	rjmp	.+10     	; 0x212a <vfprintf+0x21c>
    2120:	ef 2c       	mov	r14, r15
    2122:	ff 24       	eor	r15, r15
    2124:	f0 e1       	ldi	r31, 0x10	; 16
    2126:	ef 22       	and	r14, r31
    2128:	ff 24       	eor	r15, r15
    212a:	f8 01       	movw	r30, r16
    212c:	84 91       	lpm	r24, Z+
    212e:	88 23       	and	r24, r24
    2130:	61 f7       	brne	.-40     	; 0x210a <vfprintf+0x1fc>
    2132:	14 c1       	rjmp	.+552    	; 0x235c <vfprintf+0x44e>
    2134:	f7 fe       	sbrs	r15, 7
    2136:	12 c0       	rjmp	.+36     	; 0x215c <vfprintf+0x24e>
    2138:	bc 0c       	add	r11, r12
    213a:	24 fe       	sbrs	r2, 4
    213c:	04 c0       	rjmp	.+8      	; 0x2146 <vfprintf+0x238>
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	81 33       	cpi	r24, 0x31	; 49
    2142:	09 f4       	brne	.+2      	; 0x2146 <vfprintf+0x238>
    2144:	ba 94       	dec	r11
    2146:	1b 14       	cp	r1, r11
    2148:	1c f0       	brlt	.+6      	; 0x2150 <vfprintf+0x242>
    214a:	bb 24       	eor	r11, r11
    214c:	b3 94       	inc	r11
    214e:	2d c0       	rjmp	.+90     	; 0x21aa <vfprintf+0x29c>
    2150:	f8 e0       	ldi	r31, 0x08	; 8
    2152:	fb 15       	cp	r31, r11
    2154:	50 f5       	brcc	.+84     	; 0x21aa <vfprintf+0x29c>
    2156:	38 e0       	ldi	r19, 0x08	; 8
    2158:	b3 2e       	mov	r11, r19
    215a:	27 c0       	rjmp	.+78     	; 0x21aa <vfprintf+0x29c>
    215c:	f6 fc       	sbrc	r15, 6
    215e:	25 c0       	rjmp	.+74     	; 0x21aa <vfprintf+0x29c>
    2160:	89 2d       	mov	r24, r9
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	8c 15       	cp	r24, r12
    2166:	9d 05       	cpc	r25, r13
    2168:	4c f0       	brlt	.+18     	; 0x217c <vfprintf+0x26e>
    216a:	2c ef       	ldi	r18, 0xFC	; 252
    216c:	c2 16       	cp	r12, r18
    216e:	2f ef       	ldi	r18, 0xFF	; 255
    2170:	d2 06       	cpc	r13, r18
    2172:	24 f0       	brlt	.+8      	; 0x217c <vfprintf+0x26e>
    2174:	30 e8       	ldi	r19, 0x80	; 128
    2176:	f3 2a       	or	r15, r19
    2178:	01 c0       	rjmp	.+2      	; 0x217c <vfprintf+0x26e>
    217a:	9a 94       	dec	r9
    217c:	99 20       	and	r9, r9
    217e:	49 f0       	breq	.+18     	; 0x2192 <vfprintf+0x284>
    2180:	e2 e0       	ldi	r30, 0x02	; 2
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	ec 0f       	add	r30, r28
    2186:	fd 1f       	adc	r31, r29
    2188:	e9 0d       	add	r30, r9
    218a:	f1 1d       	adc	r31, r1
    218c:	80 81       	ld	r24, Z
    218e:	80 33       	cpi	r24, 0x30	; 48
    2190:	a1 f3       	breq	.-24     	; 0x217a <vfprintf+0x26c>
    2192:	f7 fe       	sbrs	r15, 7
    2194:	0a c0       	rjmp	.+20     	; 0x21aa <vfprintf+0x29c>
    2196:	b9 2c       	mov	r11, r9
    2198:	b3 94       	inc	r11
    219a:	89 2d       	mov	r24, r9
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	c8 16       	cp	r12, r24
    21a0:	d9 06       	cpc	r13, r25
    21a2:	14 f0       	brlt	.+4      	; 0x21a8 <vfprintf+0x29a>
    21a4:	99 24       	eor	r9, r9
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <vfprintf+0x29c>
    21a8:	9c 18       	sub	r9, r12
    21aa:	f7 fc       	sbrc	r15, 7
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <vfprintf+0x2a6>
    21ae:	25 e0       	ldi	r18, 0x05	; 5
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	09 c0       	rjmp	.+18     	; 0x21c6 <vfprintf+0x2b8>
    21b4:	1c 14       	cp	r1, r12
    21b6:	1d 04       	cpc	r1, r13
    21b8:	1c f0       	brlt	.+6      	; 0x21c0 <vfprintf+0x2b2>
    21ba:	21 e0       	ldi	r18, 0x01	; 1
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	03 c0       	rjmp	.+6      	; 0x21c6 <vfprintf+0x2b8>
    21c0:	96 01       	movw	r18, r12
    21c2:	2f 5f       	subi	r18, 0xFF	; 255
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	11 23       	and	r17, r17
    21c8:	11 f0       	breq	.+4      	; 0x21ce <vfprintf+0x2c0>
    21ca:	2f 5f       	subi	r18, 0xFF	; 255
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	99 20       	and	r9, r9
    21d0:	29 f0       	breq	.+10     	; 0x21dc <vfprintf+0x2ce>
    21d2:	89 2d       	mov	r24, r9
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	01 96       	adiw	r24, 0x01	; 1
    21d8:	28 0f       	add	r18, r24
    21da:	39 1f       	adc	r19, r25
    21dc:	88 2d       	mov	r24, r8
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	28 17       	cp	r18, r24
    21e2:	39 07       	cpc	r19, r25
    21e4:	14 f0       	brlt	.+4      	; 0x21ea <vfprintf+0x2dc>
    21e6:	88 24       	eor	r8, r8
    21e8:	01 c0       	rjmp	.+2      	; 0x21ec <vfprintf+0x2de>
    21ea:	82 1a       	sub	r8, r18
    21ec:	4f 2c       	mov	r4, r15
    21ee:	55 24       	eor	r5, r5
    21f0:	c2 01       	movw	r24, r4
    21f2:	89 70       	andi	r24, 0x09	; 9
    21f4:	90 70       	andi	r25, 0x00	; 0
    21f6:	89 2b       	or	r24, r25
    21f8:	39 f0       	breq	.+14     	; 0x2208 <vfprintf+0x2fa>
    21fa:	08 c0       	rjmp	.+16     	; 0x220c <vfprintf+0x2fe>
    21fc:	80 e2       	ldi	r24, 0x20	; 32
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	b3 01       	movw	r22, r6
    2202:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    2206:	8a 94       	dec	r8
    2208:	88 20       	and	r8, r8
    220a:	c1 f7       	brne	.-16     	; 0x21fc <vfprintf+0x2ee>
    220c:	11 23       	and	r17, r17
    220e:	29 f0       	breq	.+10     	; 0x221a <vfprintf+0x30c>
    2210:	81 2f       	mov	r24, r17
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	b3 01       	movw	r22, r6
    2216:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    221a:	43 fe       	sbrs	r4, 3
    221c:	07 c0       	rjmp	.+14     	; 0x222c <vfprintf+0x31e>
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <vfprintf+0x322>
    2220:	80 e3       	ldi	r24, 0x30	; 48
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	b3 01       	movw	r22, r6
    2226:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    222a:	8a 94       	dec	r8
    222c:	88 20       	and	r8, r8
    222e:	c1 f7       	brne	.-16     	; 0x2220 <vfprintf+0x312>
    2230:	f7 fe       	sbrs	r15, 7
    2232:	46 c0       	rjmp	.+140    	; 0x22c0 <vfprintf+0x3b2>
    2234:	86 01       	movw	r16, r12
    2236:	d7 fe       	sbrs	r13, 7
    2238:	02 c0       	rjmp	.+4      	; 0x223e <vfprintf+0x330>
    223a:	00 e0       	ldi	r16, 0x00	; 0
    223c:	10 e0       	ldi	r17, 0x00	; 0
    223e:	76 01       	movw	r14, r12
    2240:	08 94       	sec
    2242:	e1 1c       	adc	r14, r1
    2244:	f1 1c       	adc	r15, r1
    2246:	e0 1a       	sub	r14, r16
    2248:	f1 0a       	sbc	r15, r17
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	4c 0f       	add	r20, r28
    2250:	5d 1f       	adc	r21, r29
    2252:	e4 0e       	add	r14, r20
    2254:	f5 1e       	adc	r15, r21
    2256:	26 01       	movw	r4, r12
    2258:	4b 18       	sub	r4, r11
    225a:	51 08       	sbc	r5, r1
    225c:	89 2d       	mov	r24, r9
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	aa 24       	eor	r10, r10
    2262:	bb 24       	eor	r11, r11
    2264:	a8 1a       	sub	r10, r24
    2266:	b9 0a       	sbc	r11, r25
    2268:	5f ef       	ldi	r21, 0xFF	; 255
    226a:	0f 3f       	cpi	r16, 0xFF	; 255
    226c:	15 07       	cpc	r17, r21
    226e:	29 f4       	brne	.+10     	; 0x227a <vfprintf+0x36c>
    2270:	8e e2       	ldi	r24, 0x2E	; 46
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	b3 01       	movw	r22, r6
    2276:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    227a:	c0 16       	cp	r12, r16
    227c:	d1 06       	cpc	r13, r17
    227e:	34 f0       	brlt	.+12     	; 0x228c <vfprintf+0x37e>
    2280:	40 16       	cp	r4, r16
    2282:	51 06       	cpc	r5, r17
    2284:	1c f4       	brge	.+6      	; 0x228c <vfprintf+0x37e>
    2286:	f7 01       	movw	r30, r14
    2288:	80 81       	ld	r24, Z
    228a:	01 c0       	rjmp	.+2      	; 0x228e <vfprintf+0x380>
    228c:	80 e3       	ldi	r24, 0x30	; 48
    228e:	01 50       	subi	r16, 0x01	; 1
    2290:	10 40       	sbci	r17, 0x00	; 0
    2292:	08 94       	sec
    2294:	e1 1c       	adc	r14, r1
    2296:	f1 1c       	adc	r15, r1
    2298:	0a 15       	cp	r16, r10
    229a:	1b 05       	cpc	r17, r11
    229c:	2c f0       	brlt	.+10     	; 0x22a8 <vfprintf+0x39a>
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	b3 01       	movw	r22, r6
    22a2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    22a6:	e0 cf       	rjmp	.-64     	; 0x2268 <vfprintf+0x35a>
    22a8:	0c 15       	cp	r16, r12
    22aa:	1d 05       	cpc	r17, r13
    22ac:	39 f4       	brne	.+14     	; 0x22bc <vfprintf+0x3ae>
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	96 33       	cpi	r25, 0x36	; 54
    22b2:	18 f4       	brcc	.+6      	; 0x22ba <vfprintf+0x3ac>
    22b4:	95 33       	cpi	r25, 0x35	; 53
    22b6:	11 f4       	brne	.+4      	; 0x22bc <vfprintf+0x3ae>
    22b8:	24 fe       	sbrs	r2, 4
    22ba:	81 e3       	ldi	r24, 0x31	; 49
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	4b c0       	rjmp	.+150    	; 0x2356 <vfprintf+0x448>
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	81 33       	cpi	r24, 0x31	; 49
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <vfprintf+0x3ba>
    22c6:	0f 7e       	andi	r16, 0xEF	; 239
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	b3 01       	movw	r22, r6
    22cc:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    22d0:	99 20       	and	r9, r9
    22d2:	a1 f0       	breq	.+40     	; 0x22fc <vfprintf+0x3ee>
    22d4:	8e e2       	ldi	r24, 0x2E	; 46
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	b3 01       	movw	r22, r6
    22da:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    22de:	12 e0       	ldi	r17, 0x02	; 2
    22e0:	e1 e0       	ldi	r30, 0x01	; 1
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	ec 0f       	add	r30, r28
    22e6:	fd 1f       	adc	r31, r29
    22e8:	e1 0f       	add	r30, r17
    22ea:	f1 1d       	adc	r31, r1
    22ec:	1f 5f       	subi	r17, 0xFF	; 255
    22ee:	80 81       	ld	r24, Z
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	b3 01       	movw	r22, r6
    22f4:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    22f8:	9a 94       	dec	r9
    22fa:	91 f7       	brne	.-28     	; 0x22e0 <vfprintf+0x3d2>
    22fc:	44 fc       	sbrc	r4, 4
    22fe:	03 c0       	rjmp	.+6      	; 0x2306 <vfprintf+0x3f8>
    2300:	85 e6       	ldi	r24, 0x65	; 101
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 c0       	rjmp	.+4      	; 0x230a <vfprintf+0x3fc>
    2306:	85 e4       	ldi	r24, 0x45	; 69
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	b3 01       	movw	r22, r6
    230c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    2310:	d7 fc       	sbrc	r13, 7
    2312:	05 c0       	rjmp	.+10     	; 0x231e <vfprintf+0x410>
    2314:	c1 14       	cp	r12, r1
    2316:	d1 04       	cpc	r13, r1
    2318:	41 f4       	brne	.+16     	; 0x232a <vfprintf+0x41c>
    231a:	04 ff       	sbrs	r16, 4
    231c:	06 c0       	rjmp	.+12     	; 0x232a <vfprintf+0x41c>
    231e:	d0 94       	com	r13
    2320:	c1 94       	neg	r12
    2322:	d1 08       	sbc	r13, r1
    2324:	d3 94       	inc	r13
    2326:	8d e2       	ldi	r24, 0x2D	; 45
    2328:	01 c0       	rjmp	.+2      	; 0x232c <vfprintf+0x41e>
    232a:	8b e2       	ldi	r24, 0x2B	; 43
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	b3 01       	movw	r22, r6
    2330:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    2334:	80 e3       	ldi	r24, 0x30	; 48
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <vfprintf+0x434>
    2338:	8f 5f       	subi	r24, 0xFF	; 255
    233a:	26 ef       	ldi	r18, 0xF6	; 246
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	c2 0e       	add	r12, r18
    2340:	d3 1e       	adc	r13, r19
    2342:	3a e0       	ldi	r19, 0x0A	; 10
    2344:	c3 16       	cp	r12, r19
    2346:	d1 04       	cpc	r13, r1
    2348:	bc f7       	brge	.-18     	; 0x2338 <vfprintf+0x42a>
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	b3 01       	movw	r22, r6
    234e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    2352:	c6 01       	movw	r24, r12
    2354:	c0 96       	adiw	r24, 0x30	; 48
    2356:	b3 01       	movw	r22, r6
    2358:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    235c:	cc 84       	ldd	r12, Y+12	; 0x0c
    235e:	dd 84       	ldd	r13, Y+13	; 0x0d
    2360:	52 c1       	rjmp	.+676    	; 0x2606 <vfprintf+0x6f8>
    2362:	93 36       	cpi	r25, 0x63	; 99
    2364:	31 f0       	breq	.+12     	; 0x2372 <vfprintf+0x464>
    2366:	93 37       	cpi	r25, 0x73	; 115
    2368:	99 f0       	breq	.+38     	; 0x2390 <vfprintf+0x482>
    236a:	93 35       	cpi	r25, 0x53	; 83
    236c:	09 f0       	breq	.+2      	; 0x2370 <vfprintf+0x462>
    236e:	59 c0       	rjmp	.+178    	; 0x2422 <vfprintf+0x514>
    2370:	23 c0       	rjmp	.+70     	; 0x23b8 <vfprintf+0x4aa>
    2372:	f6 01       	movw	r30, r12
    2374:	80 81       	ld	r24, Z
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	5e 01       	movw	r10, r28
    237a:	08 94       	sec
    237c:	a1 1c       	adc	r10, r1
    237e:	b1 1c       	adc	r11, r1
    2380:	22 e0       	ldi	r18, 0x02	; 2
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	c2 0e       	add	r12, r18
    2386:	d3 1e       	adc	r13, r19
    2388:	21 e0       	ldi	r18, 0x01	; 1
    238a:	e2 2e       	mov	r14, r18
    238c:	f1 2c       	mov	r15, r1
    238e:	12 c0       	rjmp	.+36     	; 0x23b4 <vfprintf+0x4a6>
    2390:	f6 01       	movw	r30, r12
    2392:	a0 80       	ld	r10, Z
    2394:	b1 80       	ldd	r11, Z+1	; 0x01
    2396:	16 fd       	sbrc	r17, 6
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <vfprintf+0x492>
    239a:	6f ef       	ldi	r22, 0xFF	; 255
    239c:	7f ef       	ldi	r23, 0xFF	; 255
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <vfprintf+0x496>
    23a0:	69 2d       	mov	r22, r9
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	22 e0       	ldi	r18, 0x02	; 2
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	c2 0e       	add	r12, r18
    23aa:	d3 1e       	adc	r13, r19
    23ac:	c5 01       	movw	r24, r10
    23ae:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <strnlen>
    23b2:	7c 01       	movw	r14, r24
    23b4:	1f 77       	andi	r17, 0x7F	; 127
    23b6:	13 c0       	rjmp	.+38     	; 0x23de <vfprintf+0x4d0>
    23b8:	f6 01       	movw	r30, r12
    23ba:	a0 80       	ld	r10, Z
    23bc:	b1 80       	ldd	r11, Z+1	; 0x01
    23be:	16 fd       	sbrc	r17, 6
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <vfprintf+0x4ba>
    23c2:	6f ef       	ldi	r22, 0xFF	; 255
    23c4:	7f ef       	ldi	r23, 0xFF	; 255
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <vfprintf+0x4be>
    23c8:	69 2d       	mov	r22, r9
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	22 e0       	ldi	r18, 0x02	; 2
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	c2 0e       	add	r12, r18
    23d2:	d3 1e       	adc	r13, r19
    23d4:	c5 01       	movw	r24, r10
    23d6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <strnlen_P>
    23da:	7c 01       	movw	r14, r24
    23dc:	10 68       	ori	r17, 0x80	; 128
    23de:	13 ff       	sbrs	r17, 3
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <vfprintf+0x4e2>
    23e2:	1b c0       	rjmp	.+54     	; 0x241a <vfprintf+0x50c>
    23e4:	80 e2       	ldi	r24, 0x20	; 32
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	b3 01       	movw	r22, r6
    23ea:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    23ee:	8a 94       	dec	r8
    23f0:	88 2d       	mov	r24, r8
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	e8 16       	cp	r14, r24
    23f6:	f9 06       	cpc	r15, r25
    23f8:	a8 f3       	brcs	.-22     	; 0x23e4 <vfprintf+0x4d6>
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <vfprintf+0x50c>
    23fc:	f5 01       	movw	r30, r10
    23fe:	17 fd       	sbrc	r17, 7
    2400:	85 91       	lpm	r24, Z+
    2402:	17 ff       	sbrs	r17, 7
    2404:	81 91       	ld	r24, Z+
    2406:	5f 01       	movw	r10, r30
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	b3 01       	movw	r22, r6
    240c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    2410:	81 10       	cpse	r8, r1
    2412:	8a 94       	dec	r8
    2414:	08 94       	sec
    2416:	e1 08       	sbc	r14, r1
    2418:	f1 08       	sbc	r15, r1
    241a:	e1 14       	cp	r14, r1
    241c:	f1 04       	cpc	r15, r1
    241e:	71 f7       	brne	.-36     	; 0x23fc <vfprintf+0x4ee>
    2420:	f2 c0       	rjmp	.+484    	; 0x2606 <vfprintf+0x6f8>
    2422:	94 36       	cpi	r25, 0x64	; 100
    2424:	11 f0       	breq	.+4      	; 0x242a <vfprintf+0x51c>
    2426:	99 36       	cpi	r25, 0x69	; 105
    2428:	89 f5       	brne	.+98     	; 0x248c <vfprintf+0x57e>
    242a:	17 ff       	sbrs	r17, 7
    242c:	08 c0       	rjmp	.+16     	; 0x243e <vfprintf+0x530>
    242e:	f6 01       	movw	r30, r12
    2430:	20 81       	ld	r18, Z
    2432:	31 81       	ldd	r19, Z+1	; 0x01
    2434:	42 81       	ldd	r20, Z+2	; 0x02
    2436:	53 81       	ldd	r21, Z+3	; 0x03
    2438:	84 e0       	ldi	r24, 0x04	; 4
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0a c0       	rjmp	.+20     	; 0x2452 <vfprintf+0x544>
    243e:	f6 01       	movw	r30, r12
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	9c 01       	movw	r18, r24
    2446:	44 27       	eor	r20, r20
    2448:	37 fd       	sbrc	r19, 7
    244a:	40 95       	com	r20
    244c:	54 2f       	mov	r21, r20
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	c8 0e       	add	r12, r24
    2454:	d9 1e       	adc	r13, r25
    2456:	9f e6       	ldi	r25, 0x6F	; 111
    2458:	f9 2e       	mov	r15, r25
    245a:	f1 22       	and	r15, r17
    245c:	57 ff       	sbrs	r21, 7
    245e:	09 c0       	rjmp	.+18     	; 0x2472 <vfprintf+0x564>
    2460:	50 95       	com	r21
    2462:	40 95       	com	r20
    2464:	30 95       	com	r19
    2466:	21 95       	neg	r18
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	4f 4f       	sbci	r20, 0xFF	; 255
    246c:	5f 4f       	sbci	r21, 0xFF	; 255
    246e:	90 e8       	ldi	r25, 0x80	; 128
    2470:	f9 2a       	or	r15, r25
    2472:	ca 01       	movw	r24, r20
    2474:	b9 01       	movw	r22, r18
    2476:	ae 01       	movw	r20, r28
    2478:	4f 5f       	subi	r20, 0xFF	; 255
    247a:	5f 4f       	sbci	r21, 0xFF	; 255
    247c:	2a e0       	ldi	r18, 0x0A	; 10
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__ultoa_invert>
    2484:	e8 2e       	mov	r14, r24
    2486:	e8 89       	ldd	r30, Y+16	; 0x10
    2488:	ee 1a       	sub	r14, r30
    248a:	41 c0       	rjmp	.+130    	; 0x250e <vfprintf+0x600>
    248c:	95 37       	cpi	r25, 0x75	; 117
    248e:	21 f4       	brne	.+8      	; 0x2498 <vfprintf+0x58a>
    2490:	1f 7e       	andi	r17, 0xEF	; 239
    2492:	2a e0       	ldi	r18, 0x0A	; 10
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	1c c0       	rjmp	.+56     	; 0x24d0 <vfprintf+0x5c2>
    2498:	19 7f       	andi	r17, 0xF9	; 249
    249a:	9f 36       	cpi	r25, 0x6F	; 111
    249c:	61 f0       	breq	.+24     	; 0x24b6 <vfprintf+0x5a8>
    249e:	90 37       	cpi	r25, 0x70	; 112
    24a0:	20 f4       	brcc	.+8      	; 0x24aa <vfprintf+0x59c>
    24a2:	98 35       	cpi	r25, 0x58	; 88
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <vfprintf+0x59a>
    24a6:	b2 c0       	rjmp	.+356    	; 0x260c <vfprintf+0x6fe>
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <vfprintf+0x5ba>
    24aa:	90 37       	cpi	r25, 0x70	; 112
    24ac:	39 f0       	breq	.+14     	; 0x24bc <vfprintf+0x5ae>
    24ae:	98 37       	cpi	r25, 0x78	; 120
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <vfprintf+0x5a6>
    24b2:	ac c0       	rjmp	.+344    	; 0x260c <vfprintf+0x6fe>
    24b4:	04 c0       	rjmp	.+8      	; 0x24be <vfprintf+0x5b0>
    24b6:	28 e0       	ldi	r18, 0x08	; 8
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	0a c0       	rjmp	.+20     	; 0x24d0 <vfprintf+0x5c2>
    24bc:	10 61       	ori	r17, 0x10	; 16
    24be:	14 fd       	sbrc	r17, 4
    24c0:	14 60       	ori	r17, 0x04	; 4
    24c2:	20 e1       	ldi	r18, 0x10	; 16
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	04 c0       	rjmp	.+8      	; 0x24d0 <vfprintf+0x5c2>
    24c8:	14 fd       	sbrc	r17, 4
    24ca:	16 60       	ori	r17, 0x06	; 6
    24cc:	20 e1       	ldi	r18, 0x10	; 16
    24ce:	32 e0       	ldi	r19, 0x02	; 2
    24d0:	17 ff       	sbrs	r17, 7
    24d2:	08 c0       	rjmp	.+16     	; 0x24e4 <vfprintf+0x5d6>
    24d4:	f6 01       	movw	r30, r12
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	44 e0       	ldi	r20, 0x04	; 4
    24e0:	50 e0       	ldi	r21, 0x00	; 0
    24e2:	08 c0       	rjmp	.+16     	; 0x24f4 <vfprintf+0x5e6>
    24e4:	f6 01       	movw	r30, r12
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	bc 01       	movw	r22, r24
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	42 e0       	ldi	r20, 0x02	; 2
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	c4 0e       	add	r12, r20
    24f6:	d5 1e       	adc	r13, r21
    24f8:	ae 01       	movw	r20, r28
    24fa:	4f 5f       	subi	r20, 0xFF	; 255
    24fc:	5f 4f       	sbci	r21, 0xFF	; 255
    24fe:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__ultoa_invert>
    2502:	e8 2e       	mov	r14, r24
    2504:	58 89       	ldd	r21, Y+16	; 0x10
    2506:	e5 1a       	sub	r14, r21
    2508:	8f e7       	ldi	r24, 0x7F	; 127
    250a:	f8 2e       	mov	r15, r24
    250c:	f1 22       	and	r15, r17
    250e:	f6 fe       	sbrs	r15, 6
    2510:	0b c0       	rjmp	.+22     	; 0x2528 <vfprintf+0x61a>
    2512:	8e ef       	ldi	r24, 0xFE	; 254
    2514:	f8 22       	and	r15, r24
    2516:	e9 14       	cp	r14, r9
    2518:	38 f4       	brcc	.+14     	; 0x2528 <vfprintf+0x61a>
    251a:	f4 fe       	sbrs	r15, 4
    251c:	07 c0       	rjmp	.+14     	; 0x252c <vfprintf+0x61e>
    251e:	f2 fc       	sbrc	r15, 2
    2520:	05 c0       	rjmp	.+10     	; 0x252c <vfprintf+0x61e>
    2522:	9f ee       	ldi	r25, 0xEF	; 239
    2524:	f9 22       	and	r15, r25
    2526:	02 c0       	rjmp	.+4      	; 0x252c <vfprintf+0x61e>
    2528:	1e 2d       	mov	r17, r14
    252a:	01 c0       	rjmp	.+2      	; 0x252e <vfprintf+0x620>
    252c:	19 2d       	mov	r17, r9
    252e:	f4 fe       	sbrs	r15, 4
    2530:	0d c0       	rjmp	.+26     	; 0x254c <vfprintf+0x63e>
    2532:	fe 01       	movw	r30, r28
    2534:	ee 0d       	add	r30, r14
    2536:	f1 1d       	adc	r31, r1
    2538:	80 81       	ld	r24, Z
    253a:	80 33       	cpi	r24, 0x30	; 48
    253c:	19 f4       	brne	.+6      	; 0x2544 <vfprintf+0x636>
    253e:	e9 ee       	ldi	r30, 0xE9	; 233
    2540:	fe 22       	and	r15, r30
    2542:	08 c0       	rjmp	.+16     	; 0x2554 <vfprintf+0x646>
    2544:	1f 5f       	subi	r17, 0xFF	; 255
    2546:	f2 fe       	sbrs	r15, 2
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <vfprintf+0x646>
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <vfprintf+0x644>
    254c:	8f 2d       	mov	r24, r15
    254e:	86 78       	andi	r24, 0x86	; 134
    2550:	09 f0       	breq	.+2      	; 0x2554 <vfprintf+0x646>
    2552:	1f 5f       	subi	r17, 0xFF	; 255
    2554:	0f 2d       	mov	r16, r15
    2556:	f3 fc       	sbrc	r15, 3
    2558:	14 c0       	rjmp	.+40     	; 0x2582 <vfprintf+0x674>
    255a:	f0 fe       	sbrs	r15, 0
    255c:	0f c0       	rjmp	.+30     	; 0x257c <vfprintf+0x66e>
    255e:	18 15       	cp	r17, r8
    2560:	10 f0       	brcs	.+4      	; 0x2566 <vfprintf+0x658>
    2562:	9e 2c       	mov	r9, r14
    2564:	0b c0       	rjmp	.+22     	; 0x257c <vfprintf+0x66e>
    2566:	9e 2c       	mov	r9, r14
    2568:	98 0c       	add	r9, r8
    256a:	91 1a       	sub	r9, r17
    256c:	18 2d       	mov	r17, r8
    256e:	06 c0       	rjmp	.+12     	; 0x257c <vfprintf+0x66e>
    2570:	80 e2       	ldi	r24, 0x20	; 32
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	b3 01       	movw	r22, r6
    2576:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    257a:	1f 5f       	subi	r17, 0xFF	; 255
    257c:	18 15       	cp	r17, r8
    257e:	c0 f3       	brcs	.-16     	; 0x2570 <vfprintf+0x662>
    2580:	04 c0       	rjmp	.+8      	; 0x258a <vfprintf+0x67c>
    2582:	18 15       	cp	r17, r8
    2584:	10 f4       	brcc	.+4      	; 0x258a <vfprintf+0x67c>
    2586:	81 1a       	sub	r8, r17
    2588:	01 c0       	rjmp	.+2      	; 0x258c <vfprintf+0x67e>
    258a:	88 24       	eor	r8, r8
    258c:	04 ff       	sbrs	r16, 4
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <vfprintf+0x6a0>
    2590:	80 e3       	ldi	r24, 0x30	; 48
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	b3 01       	movw	r22, r6
    2596:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    259a:	02 ff       	sbrs	r16, 2
    259c:	1d c0       	rjmp	.+58     	; 0x25d8 <vfprintf+0x6ca>
    259e:	01 fd       	sbrc	r16, 1
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <vfprintf+0x69a>
    25a2:	88 e7       	ldi	r24, 0x78	; 120
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e c0       	rjmp	.+28     	; 0x25c4 <vfprintf+0x6b6>
    25a8:	88 e5       	ldi	r24, 0x58	; 88
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	0b c0       	rjmp	.+22     	; 0x25c4 <vfprintf+0x6b6>
    25ae:	80 2f       	mov	r24, r16
    25b0:	86 78       	andi	r24, 0x86	; 134
    25b2:	91 f0       	breq	.+36     	; 0x25d8 <vfprintf+0x6ca>
    25b4:	01 ff       	sbrs	r16, 1
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <vfprintf+0x6ae>
    25b8:	8b e2       	ldi	r24, 0x2B	; 43
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <vfprintf+0x6b0>
    25bc:	80 e2       	ldi	r24, 0x20	; 32
    25be:	f7 fc       	sbrc	r15, 7
    25c0:	8d e2       	ldi	r24, 0x2D	; 45
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	b3 01       	movw	r22, r6
    25c6:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    25ca:	06 c0       	rjmp	.+12     	; 0x25d8 <vfprintf+0x6ca>
    25cc:	80 e3       	ldi	r24, 0x30	; 48
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	b3 01       	movw	r22, r6
    25d2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    25d6:	9a 94       	dec	r9
    25d8:	e9 14       	cp	r14, r9
    25da:	c0 f3       	brcs	.-16     	; 0x25cc <vfprintf+0x6be>
    25dc:	ea 94       	dec	r14
    25de:	e1 e0       	ldi	r30, 0x01	; 1
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	ec 0f       	add	r30, r28
    25e4:	fd 1f       	adc	r31, r29
    25e6:	ee 0d       	add	r30, r14
    25e8:	f1 1d       	adc	r31, r1
    25ea:	80 81       	ld	r24, Z
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	b3 01       	movw	r22, r6
    25f0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    25f4:	ee 20       	and	r14, r14
    25f6:	91 f7       	brne	.-28     	; 0x25dc <vfprintf+0x6ce>
    25f8:	06 c0       	rjmp	.+12     	; 0x2606 <vfprintf+0x6f8>
    25fa:	80 e2       	ldi	r24, 0x20	; 32
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	b3 01       	movw	r22, r6
    2600:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fputc>
    2604:	8a 94       	dec	r8
    2606:	88 20       	and	r8, r8
    2608:	c1 f7       	brne	.-16     	; 0x25fa <vfprintf+0x6ec>
    260a:	99 cc       	rjmp	.-1742   	; 0x1f3e <vfprintf+0x30>
    260c:	f3 01       	movw	r30, r6
    260e:	66 81       	ldd	r22, Z+6	; 0x06
    2610:	77 81       	ldd	r23, Z+7	; 0x07
    2612:	cb 01       	movw	r24, r22
    2614:	61 96       	adiw	r28, 0x11	; 17
    2616:	e2 e1       	ldi	r30, 0x12	; 18
    2618:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__>

0000261c <__subsf3>:
    261c:	50 58       	subi	r21, 0x80	; 128

0000261e <__addsf3>:
    261e:	bb 27       	eor	r27, r27
    2620:	aa 27       	eor	r26, r26
    2622:	0e d0       	rcall	.+28     	; 0x2640 <__addsf3x>
    2624:	fc c1       	rjmp	.+1016   	; 0x2a1e <__fp_round>
    2626:	ed d1       	rcall	.+986    	; 0x2a02 <__fp_pscA>
    2628:	30 f0       	brcs	.+12     	; 0x2636 <__addsf3+0x18>
    262a:	f2 d1       	rcall	.+996    	; 0x2a10 <__fp_pscB>
    262c:	20 f0       	brcs	.+8      	; 0x2636 <__addsf3+0x18>
    262e:	31 f4       	brne	.+12     	; 0x263c <__addsf3+0x1e>
    2630:	9f 3f       	cpi	r25, 0xFF	; 255
    2632:	11 f4       	brne	.+4      	; 0x2638 <__addsf3+0x1a>
    2634:	1e f4       	brtc	.+6      	; 0x263c <__addsf3+0x1e>
    2636:	bd c1       	rjmp	.+890    	; 0x29b2 <__fp_nan>
    2638:	0e f4       	brtc	.+2      	; 0x263c <__addsf3+0x1e>
    263a:	e0 95       	com	r30
    263c:	e7 fb       	bst	r30, 7
    263e:	b3 c1       	rjmp	.+870    	; 0x29a6 <__fp_inf>

00002640 <__addsf3x>:
    2640:	e9 2f       	mov	r30, r25
    2642:	fe d1       	rcall	.+1020   	; 0x2a40 <__fp_split3>
    2644:	80 f3       	brcs	.-32     	; 0x2626 <__addsf3+0x8>
    2646:	ba 17       	cp	r27, r26
    2648:	62 07       	cpc	r22, r18
    264a:	73 07       	cpc	r23, r19
    264c:	84 07       	cpc	r24, r20
    264e:	95 07       	cpc	r25, r21
    2650:	18 f0       	brcs	.+6      	; 0x2658 <__addsf3x+0x18>
    2652:	71 f4       	brne	.+28     	; 0x2670 <__addsf3x+0x30>
    2654:	9e f5       	brtc	.+102    	; 0x26bc <__addsf3x+0x7c>
    2656:	16 c2       	rjmp	.+1068   	; 0x2a84 <__fp_zero>
    2658:	0e f4       	brtc	.+2      	; 0x265c <__addsf3x+0x1c>
    265a:	e0 95       	com	r30
    265c:	0b 2e       	mov	r0, r27
    265e:	ba 2f       	mov	r27, r26
    2660:	a0 2d       	mov	r26, r0
    2662:	0b 01       	movw	r0, r22
    2664:	b9 01       	movw	r22, r18
    2666:	90 01       	movw	r18, r0
    2668:	0c 01       	movw	r0, r24
    266a:	ca 01       	movw	r24, r20
    266c:	a0 01       	movw	r20, r0
    266e:	11 24       	eor	r1, r1
    2670:	ff 27       	eor	r31, r31
    2672:	59 1b       	sub	r21, r25
    2674:	99 f0       	breq	.+38     	; 0x269c <__addsf3x+0x5c>
    2676:	59 3f       	cpi	r21, 0xF9	; 249
    2678:	50 f4       	brcc	.+20     	; 0x268e <__addsf3x+0x4e>
    267a:	50 3e       	cpi	r21, 0xE0	; 224
    267c:	68 f1       	brcs	.+90     	; 0x26d8 <__addsf3x+0x98>
    267e:	1a 16       	cp	r1, r26
    2680:	f0 40       	sbci	r31, 0x00	; 0
    2682:	a2 2f       	mov	r26, r18
    2684:	23 2f       	mov	r18, r19
    2686:	34 2f       	mov	r19, r20
    2688:	44 27       	eor	r20, r20
    268a:	58 5f       	subi	r21, 0xF8	; 248
    268c:	f3 cf       	rjmp	.-26     	; 0x2674 <__addsf3x+0x34>
    268e:	46 95       	lsr	r20
    2690:	37 95       	ror	r19
    2692:	27 95       	ror	r18
    2694:	a7 95       	ror	r26
    2696:	f0 40       	sbci	r31, 0x00	; 0
    2698:	53 95       	inc	r21
    269a:	c9 f7       	brne	.-14     	; 0x268e <__addsf3x+0x4e>
    269c:	7e f4       	brtc	.+30     	; 0x26bc <__addsf3x+0x7c>
    269e:	1f 16       	cp	r1, r31
    26a0:	ba 0b       	sbc	r27, r26
    26a2:	62 0b       	sbc	r22, r18
    26a4:	73 0b       	sbc	r23, r19
    26a6:	84 0b       	sbc	r24, r20
    26a8:	ba f0       	brmi	.+46     	; 0x26d8 <__addsf3x+0x98>
    26aa:	91 50       	subi	r25, 0x01	; 1
    26ac:	a1 f0       	breq	.+40     	; 0x26d6 <__addsf3x+0x96>
    26ae:	ff 0f       	add	r31, r31
    26b0:	bb 1f       	adc	r27, r27
    26b2:	66 1f       	adc	r22, r22
    26b4:	77 1f       	adc	r23, r23
    26b6:	88 1f       	adc	r24, r24
    26b8:	c2 f7       	brpl	.-16     	; 0x26aa <__addsf3x+0x6a>
    26ba:	0e c0       	rjmp	.+28     	; 0x26d8 <__addsf3x+0x98>
    26bc:	ba 0f       	add	r27, r26
    26be:	62 1f       	adc	r22, r18
    26c0:	73 1f       	adc	r23, r19
    26c2:	84 1f       	adc	r24, r20
    26c4:	48 f4       	brcc	.+18     	; 0x26d8 <__addsf3x+0x98>
    26c6:	87 95       	ror	r24
    26c8:	77 95       	ror	r23
    26ca:	67 95       	ror	r22
    26cc:	b7 95       	ror	r27
    26ce:	f7 95       	ror	r31
    26d0:	9e 3f       	cpi	r25, 0xFE	; 254
    26d2:	08 f0       	brcs	.+2      	; 0x26d6 <__addsf3x+0x96>
    26d4:	b3 cf       	rjmp	.-154    	; 0x263c <__addsf3+0x1e>
    26d6:	93 95       	inc	r25
    26d8:	88 0f       	add	r24, r24
    26da:	08 f0       	brcs	.+2      	; 0x26de <__addsf3x+0x9e>
    26dc:	99 27       	eor	r25, r25
    26de:	ee 0f       	add	r30, r30
    26e0:	97 95       	ror	r25
    26e2:	87 95       	ror	r24
    26e4:	08 95       	ret
    26e6:	8d d1       	rcall	.+794    	; 0x2a02 <__fp_pscA>
    26e8:	58 f0       	brcs	.+22     	; 0x2700 <__addsf3x+0xc0>
    26ea:	80 e8       	ldi	r24, 0x80	; 128
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <__addsf3x+0xb2>
    26f0:	9e ef       	ldi	r25, 0xFE	; 254
    26f2:	8e d1       	rcall	.+796    	; 0x2a10 <__fp_pscB>
    26f4:	28 f0       	brcs	.+10     	; 0x2700 <__addsf3x+0xc0>
    26f6:	40 e8       	ldi	r20, 0x80	; 128
    26f8:	51 e0       	ldi	r21, 0x01	; 1
    26fa:	59 f4       	brne	.+22     	; 0x2712 <atan2+0xe>
    26fc:	5e ef       	ldi	r21, 0xFE	; 254
    26fe:	09 c0       	rjmp	.+18     	; 0x2712 <atan2+0xe>
    2700:	58 c1       	rjmp	.+688    	; 0x29b2 <__fp_nan>
    2702:	c0 c1       	rjmp	.+896    	; 0x2a84 <__fp_zero>

00002704 <atan2>:
    2704:	e9 2f       	mov	r30, r25
    2706:	e0 78       	andi	r30, 0x80	; 128
    2708:	9b d1       	rcall	.+822    	; 0x2a40 <__fp_split3>
    270a:	68 f3       	brcs	.-38     	; 0x26e6 <__addsf3x+0xa6>
    270c:	09 2e       	mov	r0, r25
    270e:	05 2a       	or	r0, r21
    2710:	c1 f3       	breq	.-16     	; 0x2702 <__addsf3x+0xc2>
    2712:	26 17       	cp	r18, r22
    2714:	37 07       	cpc	r19, r23
    2716:	48 07       	cpc	r20, r24
    2718:	59 07       	cpc	r21, r25
    271a:	38 f0       	brcs	.+14     	; 0x272a <atan2+0x26>
    271c:	0e 2e       	mov	r0, r30
    271e:	07 f8       	bld	r0, 7
    2720:	e0 25       	eor	r30, r0
    2722:	69 f0       	breq	.+26     	; 0x273e <atan2+0x3a>
    2724:	e0 25       	eor	r30, r0
    2726:	e0 64       	ori	r30, 0x40	; 64
    2728:	0a c0       	rjmp	.+20     	; 0x273e <atan2+0x3a>
    272a:	ef 63       	ori	r30, 0x3F	; 63
    272c:	07 f8       	bld	r0, 7
    272e:	00 94       	com	r0
    2730:	07 fa       	bst	r0, 7
    2732:	db 01       	movw	r26, r22
    2734:	b9 01       	movw	r22, r18
    2736:	9d 01       	movw	r18, r26
    2738:	dc 01       	movw	r26, r24
    273a:	ca 01       	movw	r24, r20
    273c:	ad 01       	movw	r20, r26
    273e:	ef 93       	push	r30
    2740:	47 d0       	rcall	.+142    	; 0x27d0 <__divsf3_pse>
    2742:	6d d1       	rcall	.+730    	; 0x2a1e <__fp_round>
    2744:	0a d0       	rcall	.+20     	; 0x275a <atan>
    2746:	5f 91       	pop	r21
    2748:	55 23       	and	r21, r21
    274a:	31 f0       	breq	.+12     	; 0x2758 <atan2+0x54>
    274c:	2b ed       	ldi	r18, 0xDB	; 219
    274e:	3f e0       	ldi	r19, 0x0F	; 15
    2750:	49 e4       	ldi	r20, 0x49	; 73
    2752:	50 fd       	sbrc	r21, 0
    2754:	49 ec       	ldi	r20, 0xC9	; 201
    2756:	63 cf       	rjmp	.-314    	; 0x261e <__addsf3>
    2758:	08 95       	ret

0000275a <atan>:
    275a:	df 93       	push	r29
    275c:	dd 27       	eor	r29, r29
    275e:	b9 2f       	mov	r27, r25
    2760:	bf 77       	andi	r27, 0x7F	; 127
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	16 16       	cp	r1, r22
    2768:	17 06       	cpc	r1, r23
    276a:	48 07       	cpc	r20, r24
    276c:	5b 07       	cpc	r21, r27
    276e:	10 f4       	brcc	.+4      	; 0x2774 <atan+0x1a>
    2770:	d9 2f       	mov	r29, r25
    2772:	93 d1       	rcall	.+806    	; 0x2a9a <inverse>
    2774:	9f 93       	push	r25
    2776:	8f 93       	push	r24
    2778:	7f 93       	push	r23
    277a:	6f 93       	push	r22
    277c:	3d d2       	rcall	.+1146   	; 0x2bf8 <square>
    277e:	ec ea       	ldi	r30, 0xAC	; 172
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	1a d1       	rcall	.+564    	; 0x29b8 <__fp_powser>
    2784:	4c d1       	rcall	.+664    	; 0x2a1e <__fp_round>
    2786:	2f 91       	pop	r18
    2788:	3f 91       	pop	r19
    278a:	4f 91       	pop	r20
    278c:	5f 91       	pop	r21
    278e:	dd d1       	rcall	.+954    	; 0x2b4a <__mulsf3x>
    2790:	dd 23       	and	r29, r29
    2792:	49 f0       	breq	.+18     	; 0x27a6 <atan+0x4c>
    2794:	90 58       	subi	r25, 0x80	; 128
    2796:	a2 ea       	ldi	r26, 0xA2	; 162
    2798:	2a ed       	ldi	r18, 0xDA	; 218
    279a:	3f e0       	ldi	r19, 0x0F	; 15
    279c:	49 ec       	ldi	r20, 0xC9	; 201
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	d0 78       	andi	r29, 0x80	; 128
    27a2:	5d 27       	eor	r21, r29
    27a4:	4d df       	rcall	.-358    	; 0x2640 <__addsf3x>
    27a6:	df 91       	pop	r29
    27a8:	3a c1       	rjmp	.+628    	; 0x2a1e <__fp_round>

000027aa <__cmpsf2>:
    27aa:	d9 d0       	rcall	.+434    	; 0x295e <__fp_cmp>
    27ac:	08 f4       	brcc	.+2      	; 0x27b0 <__cmpsf2+0x6>
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	08 95       	ret

000027b2 <__divsf3>:
    27b2:	0c d0       	rcall	.+24     	; 0x27cc <__divsf3x>
    27b4:	34 c1       	rjmp	.+616    	; 0x2a1e <__fp_round>
    27b6:	2c d1       	rcall	.+600    	; 0x2a10 <__fp_pscB>
    27b8:	40 f0       	brcs	.+16     	; 0x27ca <__divsf3+0x18>
    27ba:	23 d1       	rcall	.+582    	; 0x2a02 <__fp_pscA>
    27bc:	30 f0       	brcs	.+12     	; 0x27ca <__divsf3+0x18>
    27be:	21 f4       	brne	.+8      	; 0x27c8 <__divsf3+0x16>
    27c0:	5f 3f       	cpi	r21, 0xFF	; 255
    27c2:	19 f0       	breq	.+6      	; 0x27ca <__divsf3+0x18>
    27c4:	f0 c0       	rjmp	.+480    	; 0x29a6 <__fp_inf>
    27c6:	51 11       	cpse	r21, r1
    27c8:	5e c1       	rjmp	.+700    	; 0x2a86 <__fp_szero>
    27ca:	f3 c0       	rjmp	.+486    	; 0x29b2 <__fp_nan>

000027cc <__divsf3x>:
    27cc:	39 d1       	rcall	.+626    	; 0x2a40 <__fp_split3>
    27ce:	98 f3       	brcs	.-26     	; 0x27b6 <__divsf3+0x4>

000027d0 <__divsf3_pse>:
    27d0:	99 23       	and	r25, r25
    27d2:	c9 f3       	breq	.-14     	; 0x27c6 <__divsf3+0x14>
    27d4:	55 23       	and	r21, r21
    27d6:	b1 f3       	breq	.-20     	; 0x27c4 <__divsf3+0x12>
    27d8:	95 1b       	sub	r25, r21
    27da:	55 0b       	sbc	r21, r21
    27dc:	bb 27       	eor	r27, r27
    27de:	aa 27       	eor	r26, r26
    27e0:	62 17       	cp	r22, r18
    27e2:	73 07       	cpc	r23, r19
    27e4:	84 07       	cpc	r24, r20
    27e6:	38 f0       	brcs	.+14     	; 0x27f6 <__divsf3_pse+0x26>
    27e8:	9f 5f       	subi	r25, 0xFF	; 255
    27ea:	5f 4f       	sbci	r21, 0xFF	; 255
    27ec:	22 0f       	add	r18, r18
    27ee:	33 1f       	adc	r19, r19
    27f0:	44 1f       	adc	r20, r20
    27f2:	aa 1f       	adc	r26, r26
    27f4:	a9 f3       	breq	.-22     	; 0x27e0 <__divsf3_pse+0x10>
    27f6:	33 d0       	rcall	.+102    	; 0x285e <__divsf3_pse+0x8e>
    27f8:	0e 2e       	mov	r0, r30
    27fa:	3a f0       	brmi	.+14     	; 0x280a <__divsf3_pse+0x3a>
    27fc:	e0 e8       	ldi	r30, 0x80	; 128
    27fe:	30 d0       	rcall	.+96     	; 0x2860 <__divsf3_pse+0x90>
    2800:	91 50       	subi	r25, 0x01	; 1
    2802:	50 40       	sbci	r21, 0x00	; 0
    2804:	e6 95       	lsr	r30
    2806:	00 1c       	adc	r0, r0
    2808:	ca f7       	brpl	.-14     	; 0x27fc <__divsf3_pse+0x2c>
    280a:	29 d0       	rcall	.+82     	; 0x285e <__divsf3_pse+0x8e>
    280c:	fe 2f       	mov	r31, r30
    280e:	27 d0       	rcall	.+78     	; 0x285e <__divsf3_pse+0x8e>
    2810:	66 0f       	add	r22, r22
    2812:	77 1f       	adc	r23, r23
    2814:	88 1f       	adc	r24, r24
    2816:	bb 1f       	adc	r27, r27
    2818:	26 17       	cp	r18, r22
    281a:	37 07       	cpc	r19, r23
    281c:	48 07       	cpc	r20, r24
    281e:	ab 07       	cpc	r26, r27
    2820:	b0 e8       	ldi	r27, 0x80	; 128
    2822:	09 f0       	breq	.+2      	; 0x2826 <__divsf3_pse+0x56>
    2824:	bb 0b       	sbc	r27, r27
    2826:	80 2d       	mov	r24, r0
    2828:	bf 01       	movw	r22, r30
    282a:	ff 27       	eor	r31, r31
    282c:	93 58       	subi	r25, 0x83	; 131
    282e:	5f 4f       	sbci	r21, 0xFF	; 255
    2830:	2a f0       	brmi	.+10     	; 0x283c <__divsf3_pse+0x6c>
    2832:	9e 3f       	cpi	r25, 0xFE	; 254
    2834:	51 05       	cpc	r21, r1
    2836:	68 f0       	brcs	.+26     	; 0x2852 <__divsf3_pse+0x82>
    2838:	b6 c0       	rjmp	.+364    	; 0x29a6 <__fp_inf>
    283a:	25 c1       	rjmp	.+586    	; 0x2a86 <__fp_szero>
    283c:	5f 3f       	cpi	r21, 0xFF	; 255
    283e:	ec f3       	brlt	.-6      	; 0x283a <__divsf3_pse+0x6a>
    2840:	98 3e       	cpi	r25, 0xE8	; 232
    2842:	dc f3       	brlt	.-10     	; 0x283a <__divsf3_pse+0x6a>
    2844:	86 95       	lsr	r24
    2846:	77 95       	ror	r23
    2848:	67 95       	ror	r22
    284a:	b7 95       	ror	r27
    284c:	f7 95       	ror	r31
    284e:	9f 5f       	subi	r25, 0xFF	; 255
    2850:	c9 f7       	brne	.-14     	; 0x2844 <__divsf3_pse+0x74>
    2852:	88 0f       	add	r24, r24
    2854:	91 1d       	adc	r25, r1
    2856:	96 95       	lsr	r25
    2858:	87 95       	ror	r24
    285a:	97 f9       	bld	r25, 7
    285c:	08 95       	ret
    285e:	e1 e0       	ldi	r30, 0x01	; 1
    2860:	66 0f       	add	r22, r22
    2862:	77 1f       	adc	r23, r23
    2864:	88 1f       	adc	r24, r24
    2866:	bb 1f       	adc	r27, r27
    2868:	62 17       	cp	r22, r18
    286a:	73 07       	cpc	r23, r19
    286c:	84 07       	cpc	r24, r20
    286e:	ba 07       	cpc	r27, r26
    2870:	20 f0       	brcs	.+8      	; 0x287a <__divsf3_pse+0xaa>
    2872:	62 1b       	sub	r22, r18
    2874:	73 0b       	sbc	r23, r19
    2876:	84 0b       	sbc	r24, r20
    2878:	ba 0b       	sbc	r27, r26
    287a:	ee 1f       	adc	r30, r30
    287c:	88 f7       	brcc	.-30     	; 0x2860 <__divsf3_pse+0x90>
    287e:	e0 95       	com	r30
    2880:	08 95       	ret

00002882 <__fixsfsi>:
    2882:	04 d0       	rcall	.+8      	; 0x288c <__fixunssfsi>
    2884:	68 94       	set
    2886:	b1 11       	cpse	r27, r1
    2888:	fe c0       	rjmp	.+508    	; 0x2a86 <__fp_szero>
    288a:	08 95       	ret

0000288c <__fixunssfsi>:
    288c:	e1 d0       	rcall	.+450    	; 0x2a50 <__fp_splitA>
    288e:	88 f0       	brcs	.+34     	; 0x28b2 <__fixunssfsi+0x26>
    2890:	9f 57       	subi	r25, 0x7F	; 127
    2892:	90 f0       	brcs	.+36     	; 0x28b8 <__fixunssfsi+0x2c>
    2894:	b9 2f       	mov	r27, r25
    2896:	99 27       	eor	r25, r25
    2898:	b7 51       	subi	r27, 0x17	; 23
    289a:	a0 f0       	brcs	.+40     	; 0x28c4 <__fixunssfsi+0x38>
    289c:	d1 f0       	breq	.+52     	; 0x28d2 <__fixunssfsi+0x46>
    289e:	66 0f       	add	r22, r22
    28a0:	77 1f       	adc	r23, r23
    28a2:	88 1f       	adc	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	1a f0       	brmi	.+6      	; 0x28ae <__fixunssfsi+0x22>
    28a8:	ba 95       	dec	r27
    28aa:	c9 f7       	brne	.-14     	; 0x289e <__fixunssfsi+0x12>
    28ac:	12 c0       	rjmp	.+36     	; 0x28d2 <__fixunssfsi+0x46>
    28ae:	b1 30       	cpi	r27, 0x01	; 1
    28b0:	81 f0       	breq	.+32     	; 0x28d2 <__fixunssfsi+0x46>
    28b2:	e8 d0       	rcall	.+464    	; 0x2a84 <__fp_zero>
    28b4:	b1 e0       	ldi	r27, 0x01	; 1
    28b6:	08 95       	ret
    28b8:	e5 c0       	rjmp	.+458    	; 0x2a84 <__fp_zero>
    28ba:	67 2f       	mov	r22, r23
    28bc:	78 2f       	mov	r23, r24
    28be:	88 27       	eor	r24, r24
    28c0:	b8 5f       	subi	r27, 0xF8	; 248
    28c2:	39 f0       	breq	.+14     	; 0x28d2 <__fixunssfsi+0x46>
    28c4:	b9 3f       	cpi	r27, 0xF9	; 249
    28c6:	cc f3       	brlt	.-14     	; 0x28ba <__fixunssfsi+0x2e>
    28c8:	86 95       	lsr	r24
    28ca:	77 95       	ror	r23
    28cc:	67 95       	ror	r22
    28ce:	b3 95       	inc	r27
    28d0:	d9 f7       	brne	.-10     	; 0x28c8 <__fixunssfsi+0x3c>
    28d2:	3e f4       	brtc	.+14     	; 0x28e2 <__fixunssfsi+0x56>
    28d4:	90 95       	com	r25
    28d6:	80 95       	com	r24
    28d8:	70 95       	com	r23
    28da:	61 95       	neg	r22
    28dc:	7f 4f       	sbci	r23, 0xFF	; 255
    28de:	8f 4f       	sbci	r24, 0xFF	; 255
    28e0:	9f 4f       	sbci	r25, 0xFF	; 255
    28e2:	08 95       	ret

000028e4 <__floatunsisf>:
    28e4:	e8 94       	clt
    28e6:	09 c0       	rjmp	.+18     	; 0x28fa <__floatsisf+0x12>

000028e8 <__floatsisf>:
    28e8:	97 fb       	bst	r25, 7
    28ea:	3e f4       	brtc	.+14     	; 0x28fa <__floatsisf+0x12>
    28ec:	90 95       	com	r25
    28ee:	80 95       	com	r24
    28f0:	70 95       	com	r23
    28f2:	61 95       	neg	r22
    28f4:	7f 4f       	sbci	r23, 0xFF	; 255
    28f6:	8f 4f       	sbci	r24, 0xFF	; 255
    28f8:	9f 4f       	sbci	r25, 0xFF	; 255
    28fa:	99 23       	and	r25, r25
    28fc:	a9 f0       	breq	.+42     	; 0x2928 <__floatsisf+0x40>
    28fe:	f9 2f       	mov	r31, r25
    2900:	96 e9       	ldi	r25, 0x96	; 150
    2902:	bb 27       	eor	r27, r27
    2904:	93 95       	inc	r25
    2906:	f6 95       	lsr	r31
    2908:	87 95       	ror	r24
    290a:	77 95       	ror	r23
    290c:	67 95       	ror	r22
    290e:	b7 95       	ror	r27
    2910:	f1 11       	cpse	r31, r1
    2912:	f8 cf       	rjmp	.-16     	; 0x2904 <__floatsisf+0x1c>
    2914:	fa f4       	brpl	.+62     	; 0x2954 <__floatsisf+0x6c>
    2916:	bb 0f       	add	r27, r27
    2918:	11 f4       	brne	.+4      	; 0x291e <__floatsisf+0x36>
    291a:	60 ff       	sbrs	r22, 0
    291c:	1b c0       	rjmp	.+54     	; 0x2954 <__floatsisf+0x6c>
    291e:	6f 5f       	subi	r22, 0xFF	; 255
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	8f 4f       	sbci	r24, 0xFF	; 255
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	16 c0       	rjmp	.+44     	; 0x2954 <__floatsisf+0x6c>
    2928:	88 23       	and	r24, r24
    292a:	11 f0       	breq	.+4      	; 0x2930 <__floatsisf+0x48>
    292c:	96 e9       	ldi	r25, 0x96	; 150
    292e:	11 c0       	rjmp	.+34     	; 0x2952 <__floatsisf+0x6a>
    2930:	77 23       	and	r23, r23
    2932:	21 f0       	breq	.+8      	; 0x293c <__floatsisf+0x54>
    2934:	9e e8       	ldi	r25, 0x8E	; 142
    2936:	87 2f       	mov	r24, r23
    2938:	76 2f       	mov	r23, r22
    293a:	05 c0       	rjmp	.+10     	; 0x2946 <__floatsisf+0x5e>
    293c:	66 23       	and	r22, r22
    293e:	71 f0       	breq	.+28     	; 0x295c <__floatsisf+0x74>
    2940:	96 e8       	ldi	r25, 0x86	; 134
    2942:	86 2f       	mov	r24, r22
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	60 e0       	ldi	r22, 0x00	; 0
    2948:	2a f0       	brmi	.+10     	; 0x2954 <__floatsisf+0x6c>
    294a:	9a 95       	dec	r25
    294c:	66 0f       	add	r22, r22
    294e:	77 1f       	adc	r23, r23
    2950:	88 1f       	adc	r24, r24
    2952:	da f7       	brpl	.-10     	; 0x294a <__floatsisf+0x62>
    2954:	88 0f       	add	r24, r24
    2956:	96 95       	lsr	r25
    2958:	87 95       	ror	r24
    295a:	97 f9       	bld	r25, 7
    295c:	08 95       	ret

0000295e <__fp_cmp>:
    295e:	99 0f       	add	r25, r25
    2960:	00 08       	sbc	r0, r0
    2962:	55 0f       	add	r21, r21
    2964:	aa 0b       	sbc	r26, r26
    2966:	e0 e8       	ldi	r30, 0x80	; 128
    2968:	fe ef       	ldi	r31, 0xFE	; 254
    296a:	16 16       	cp	r1, r22
    296c:	17 06       	cpc	r1, r23
    296e:	e8 07       	cpc	r30, r24
    2970:	f9 07       	cpc	r31, r25
    2972:	c0 f0       	brcs	.+48     	; 0x29a4 <__fp_cmp+0x46>
    2974:	12 16       	cp	r1, r18
    2976:	13 06       	cpc	r1, r19
    2978:	e4 07       	cpc	r30, r20
    297a:	f5 07       	cpc	r31, r21
    297c:	98 f0       	brcs	.+38     	; 0x29a4 <__fp_cmp+0x46>
    297e:	62 1b       	sub	r22, r18
    2980:	73 0b       	sbc	r23, r19
    2982:	84 0b       	sbc	r24, r20
    2984:	95 0b       	sbc	r25, r21
    2986:	39 f4       	brne	.+14     	; 0x2996 <__fp_cmp+0x38>
    2988:	0a 26       	eor	r0, r26
    298a:	61 f0       	breq	.+24     	; 0x29a4 <__fp_cmp+0x46>
    298c:	23 2b       	or	r18, r19
    298e:	24 2b       	or	r18, r20
    2990:	25 2b       	or	r18, r21
    2992:	21 f4       	brne	.+8      	; 0x299c <__fp_cmp+0x3e>
    2994:	08 95       	ret
    2996:	0a 26       	eor	r0, r26
    2998:	09 f4       	brne	.+2      	; 0x299c <__fp_cmp+0x3e>
    299a:	a1 40       	sbci	r26, 0x01	; 1
    299c:	a6 95       	lsr	r26
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	81 1d       	adc	r24, r1
    29a2:	81 1d       	adc	r24, r1
    29a4:	08 95       	ret

000029a6 <__fp_inf>:
    29a6:	97 f9       	bld	r25, 7
    29a8:	9f 67       	ori	r25, 0x7F	; 127
    29aa:	80 e8       	ldi	r24, 0x80	; 128
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	08 95       	ret

000029b2 <__fp_nan>:
    29b2:	9f ef       	ldi	r25, 0xFF	; 255
    29b4:	80 ec       	ldi	r24, 0xC0	; 192
    29b6:	08 95       	ret

000029b8 <__fp_powser>:
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	1f 93       	push	r17
    29be:	0f 93       	push	r16
    29c0:	ff 92       	push	r15
    29c2:	ef 92       	push	r14
    29c4:	df 92       	push	r13
    29c6:	7b 01       	movw	r14, r22
    29c8:	8c 01       	movw	r16, r24
    29ca:	68 94       	set
    29cc:	05 c0       	rjmp	.+10     	; 0x29d8 <__fp_powser+0x20>
    29ce:	da 2e       	mov	r13, r26
    29d0:	ef 01       	movw	r28, r30
    29d2:	bb d0       	rcall	.+374    	; 0x2b4a <__mulsf3x>
    29d4:	fe 01       	movw	r30, r28
    29d6:	e8 94       	clt
    29d8:	a5 91       	lpm	r26, Z+
    29da:	25 91       	lpm	r18, Z+
    29dc:	35 91       	lpm	r19, Z+
    29de:	45 91       	lpm	r20, Z+
    29e0:	55 91       	lpm	r21, Z+
    29e2:	ae f3       	brts	.-22     	; 0x29ce <__fp_powser+0x16>
    29e4:	ef 01       	movw	r28, r30
    29e6:	2c de       	rcall	.-936    	; 0x2640 <__addsf3x>
    29e8:	fe 01       	movw	r30, r28
    29ea:	97 01       	movw	r18, r14
    29ec:	a8 01       	movw	r20, r16
    29ee:	da 94       	dec	r13
    29f0:	79 f7       	brne	.-34     	; 0x29d0 <__fp_powser+0x18>
    29f2:	df 90       	pop	r13
    29f4:	ef 90       	pop	r14
    29f6:	ff 90       	pop	r15
    29f8:	0f 91       	pop	r16
    29fa:	1f 91       	pop	r17
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <__fp_pscA>:
    2a02:	00 24       	eor	r0, r0
    2a04:	0a 94       	dec	r0
    2a06:	16 16       	cp	r1, r22
    2a08:	17 06       	cpc	r1, r23
    2a0a:	18 06       	cpc	r1, r24
    2a0c:	09 06       	cpc	r0, r25
    2a0e:	08 95       	ret

00002a10 <__fp_pscB>:
    2a10:	00 24       	eor	r0, r0
    2a12:	0a 94       	dec	r0
    2a14:	12 16       	cp	r1, r18
    2a16:	13 06       	cpc	r1, r19
    2a18:	14 06       	cpc	r1, r20
    2a1a:	05 06       	cpc	r0, r21
    2a1c:	08 95       	ret

00002a1e <__fp_round>:
    2a1e:	09 2e       	mov	r0, r25
    2a20:	03 94       	inc	r0
    2a22:	00 0c       	add	r0, r0
    2a24:	11 f4       	brne	.+4      	; 0x2a2a <__fp_round+0xc>
    2a26:	88 23       	and	r24, r24
    2a28:	52 f0       	brmi	.+20     	; 0x2a3e <__fp_round+0x20>
    2a2a:	bb 0f       	add	r27, r27
    2a2c:	40 f4       	brcc	.+16     	; 0x2a3e <__fp_round+0x20>
    2a2e:	bf 2b       	or	r27, r31
    2a30:	11 f4       	brne	.+4      	; 0x2a36 <__fp_round+0x18>
    2a32:	60 ff       	sbrs	r22, 0
    2a34:	04 c0       	rjmp	.+8      	; 0x2a3e <__fp_round+0x20>
    2a36:	6f 5f       	subi	r22, 0xFF	; 255
    2a38:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3e:	08 95       	ret

00002a40 <__fp_split3>:
    2a40:	57 fd       	sbrc	r21, 7
    2a42:	90 58       	subi	r25, 0x80	; 128
    2a44:	44 0f       	add	r20, r20
    2a46:	55 1f       	adc	r21, r21
    2a48:	59 f0       	breq	.+22     	; 0x2a60 <__fp_splitA+0x10>
    2a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a4c:	71 f0       	breq	.+28     	; 0x2a6a <__fp_splitA+0x1a>
    2a4e:	47 95       	ror	r20

00002a50 <__fp_splitA>:
    2a50:	88 0f       	add	r24, r24
    2a52:	97 fb       	bst	r25, 7
    2a54:	99 1f       	adc	r25, r25
    2a56:	61 f0       	breq	.+24     	; 0x2a70 <__fp_splitA+0x20>
    2a58:	9f 3f       	cpi	r25, 0xFF	; 255
    2a5a:	79 f0       	breq	.+30     	; 0x2a7a <__fp_splitA+0x2a>
    2a5c:	87 95       	ror	r24
    2a5e:	08 95       	ret
    2a60:	12 16       	cp	r1, r18
    2a62:	13 06       	cpc	r1, r19
    2a64:	14 06       	cpc	r1, r20
    2a66:	55 1f       	adc	r21, r21
    2a68:	f2 cf       	rjmp	.-28     	; 0x2a4e <__fp_split3+0xe>
    2a6a:	46 95       	lsr	r20
    2a6c:	f1 df       	rcall	.-30     	; 0x2a50 <__fp_splitA>
    2a6e:	08 c0       	rjmp	.+16     	; 0x2a80 <__fp_splitA+0x30>
    2a70:	16 16       	cp	r1, r22
    2a72:	17 06       	cpc	r1, r23
    2a74:	18 06       	cpc	r1, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	f1 cf       	rjmp	.-30     	; 0x2a5c <__fp_splitA+0xc>
    2a7a:	86 95       	lsr	r24
    2a7c:	71 05       	cpc	r23, r1
    2a7e:	61 05       	cpc	r22, r1
    2a80:	08 94       	sec
    2a82:	08 95       	ret

00002a84 <__fp_zero>:
    2a84:	e8 94       	clt

00002a86 <__fp_szero>:
    2a86:	bb 27       	eor	r27, r27
    2a88:	66 27       	eor	r22, r22
    2a8a:	77 27       	eor	r23, r23
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	97 f9       	bld	r25, 7
    2a90:	08 95       	ret

00002a92 <__gesf2>:
    2a92:	65 df       	rcall	.-310    	; 0x295e <__fp_cmp>
    2a94:	08 f4       	brcc	.+2      	; 0x2a98 <__gesf2+0x6>
    2a96:	8f ef       	ldi	r24, 0xFF	; 255
    2a98:	08 95       	ret

00002a9a <inverse>:
    2a9a:	9b 01       	movw	r18, r22
    2a9c:	ac 01       	movw	r20, r24
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	80 e8       	ldi	r24, 0x80	; 128
    2aa4:	9f e3       	ldi	r25, 0x3F	; 63
    2aa6:	85 ce       	rjmp	.-758    	; 0x27b2 <__divsf3>
    2aa8:	0e f0       	brts	.+2      	; 0x2aac <inverse+0x12>
    2aaa:	a9 c0       	rjmp	.+338    	; 0x2bfe <__fp_mpack>
    2aac:	82 cf       	rjmp	.-252    	; 0x29b2 <__fp_nan>
    2aae:	68 94       	set
    2ab0:	7a cf       	rjmp	.-268    	; 0x29a6 <__fp_inf>

00002ab2 <log>:
    2ab2:	ce df       	rcall	.-100    	; 0x2a50 <__fp_splitA>
    2ab4:	c8 f3       	brcs	.-14     	; 0x2aa8 <inverse+0xe>
    2ab6:	99 23       	and	r25, r25
    2ab8:	d1 f3       	breq	.-12     	; 0x2aae <inverse+0x14>
    2aba:	c6 f3       	brts	.-16     	; 0x2aac <inverse+0x12>
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	1f 93       	push	r17
    2ac2:	0f 93       	push	r16
    2ac4:	ff 92       	push	r15
    2ac6:	c9 2f       	mov	r28, r25
    2ac8:	dd 27       	eor	r29, r29
    2aca:	88 23       	and	r24, r24
    2acc:	2a f0       	brmi	.+10     	; 0x2ad8 <log+0x26>
    2ace:	21 97       	sbiw	r28, 0x01	; 1
    2ad0:	66 0f       	add	r22, r22
    2ad2:	77 1f       	adc	r23, r23
    2ad4:	88 1f       	adc	r24, r24
    2ad6:	da f7       	brpl	.-10     	; 0x2ace <log+0x1c>
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f eb       	ldi	r21, 0xBF	; 191
    2ae0:	9f e3       	ldi	r25, 0x3F	; 63
    2ae2:	88 39       	cpi	r24, 0x98	; 152
    2ae4:	20 f0       	brcs	.+8      	; 0x2aee <log+0x3c>
    2ae6:	80 3e       	cpi	r24, 0xE0	; 224
    2ae8:	30 f0       	brcs	.+12     	; 0x2af6 <log+0x44>
    2aea:	21 96       	adiw	r28, 0x01	; 1
    2aec:	8f 77       	andi	r24, 0x7F	; 127
    2aee:	97 dd       	rcall	.-1234   	; 0x261e <__addsf3>
    2af0:	e9 ed       	ldi	r30, 0xD9	; 217
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	03 c0       	rjmp	.+6      	; 0x2afc <log+0x4a>
    2af6:	93 dd       	rcall	.-1242   	; 0x261e <__addsf3>
    2af8:	e6 e0       	ldi	r30, 0x06	; 6
    2afa:	f1 e0       	ldi	r31, 0x01	; 1
    2afc:	5d df       	rcall	.-326    	; 0x29b8 <__fp_powser>
    2afe:	8b 01       	movw	r16, r22
    2b00:	be 01       	movw	r22, r28
    2b02:	ec 01       	movw	r28, r24
    2b04:	fb 2e       	mov	r15, r27
    2b06:	6f 57       	subi	r22, 0x7F	; 127
    2b08:	71 09       	sbc	r23, r1
    2b0a:	75 95       	asr	r23
    2b0c:	77 1f       	adc	r23, r23
    2b0e:	88 0b       	sbc	r24, r24
    2b10:	99 0b       	sbc	r25, r25
    2b12:	ea de       	rcall	.-556    	; 0x28e8 <__floatsisf>
    2b14:	28 e1       	ldi	r18, 0x18	; 24
    2b16:	32 e7       	ldi	r19, 0x72	; 114
    2b18:	41 e3       	ldi	r20, 0x31	; 49
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	16 d0       	rcall	.+44     	; 0x2b4a <__mulsf3x>
    2b1e:	af 2d       	mov	r26, r15
    2b20:	98 01       	movw	r18, r16
    2b22:	ae 01       	movw	r20, r28
    2b24:	ff 90       	pop	r15
    2b26:	0f 91       	pop	r16
    2b28:	1f 91       	pop	r17
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	88 dd       	rcall	.-1264   	; 0x2640 <__addsf3x>
    2b30:	76 cf       	rjmp	.-276    	; 0x2a1e <__fp_round>

00002b32 <__mulsf3>:
    2b32:	0b d0       	rcall	.+22     	; 0x2b4a <__mulsf3x>
    2b34:	74 cf       	rjmp	.-280    	; 0x2a1e <__fp_round>
    2b36:	65 df       	rcall	.-310    	; 0x2a02 <__fp_pscA>
    2b38:	28 f0       	brcs	.+10     	; 0x2b44 <__mulsf3+0x12>
    2b3a:	6a df       	rcall	.-300    	; 0x2a10 <__fp_pscB>
    2b3c:	18 f0       	brcs	.+6      	; 0x2b44 <__mulsf3+0x12>
    2b3e:	95 23       	and	r25, r21
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <__mulsf3+0x12>
    2b42:	31 cf       	rjmp	.-414    	; 0x29a6 <__fp_inf>
    2b44:	36 cf       	rjmp	.-404    	; 0x29b2 <__fp_nan>
    2b46:	11 24       	eor	r1, r1
    2b48:	9e cf       	rjmp	.-196    	; 0x2a86 <__fp_szero>

00002b4a <__mulsf3x>:
    2b4a:	7a df       	rcall	.-268    	; 0x2a40 <__fp_split3>
    2b4c:	a0 f3       	brcs	.-24     	; 0x2b36 <__mulsf3+0x4>

00002b4e <__mulsf3_pse>:
    2b4e:	95 9f       	mul	r25, r21
    2b50:	d1 f3       	breq	.-12     	; 0x2b46 <__mulsf3+0x14>
    2b52:	95 0f       	add	r25, r21
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	55 1f       	adc	r21, r21
    2b58:	62 9f       	mul	r22, r18
    2b5a:	f0 01       	movw	r30, r0
    2b5c:	72 9f       	mul	r23, r18
    2b5e:	bb 27       	eor	r27, r27
    2b60:	f0 0d       	add	r31, r0
    2b62:	b1 1d       	adc	r27, r1
    2b64:	63 9f       	mul	r22, r19
    2b66:	aa 27       	eor	r26, r26
    2b68:	f0 0d       	add	r31, r0
    2b6a:	b1 1d       	adc	r27, r1
    2b6c:	aa 1f       	adc	r26, r26
    2b6e:	64 9f       	mul	r22, r20
    2b70:	66 27       	eor	r22, r22
    2b72:	b0 0d       	add	r27, r0
    2b74:	a1 1d       	adc	r26, r1
    2b76:	66 1f       	adc	r22, r22
    2b78:	82 9f       	mul	r24, r18
    2b7a:	22 27       	eor	r18, r18
    2b7c:	b0 0d       	add	r27, r0
    2b7e:	a1 1d       	adc	r26, r1
    2b80:	62 1f       	adc	r22, r18
    2b82:	73 9f       	mul	r23, r19
    2b84:	b0 0d       	add	r27, r0
    2b86:	a1 1d       	adc	r26, r1
    2b88:	62 1f       	adc	r22, r18
    2b8a:	83 9f       	mul	r24, r19
    2b8c:	a0 0d       	add	r26, r0
    2b8e:	61 1d       	adc	r22, r1
    2b90:	22 1f       	adc	r18, r18
    2b92:	74 9f       	mul	r23, r20
    2b94:	33 27       	eor	r19, r19
    2b96:	a0 0d       	add	r26, r0
    2b98:	61 1d       	adc	r22, r1
    2b9a:	23 1f       	adc	r18, r19
    2b9c:	84 9f       	mul	r24, r20
    2b9e:	60 0d       	add	r22, r0
    2ba0:	21 1d       	adc	r18, r1
    2ba2:	82 2f       	mov	r24, r18
    2ba4:	76 2f       	mov	r23, r22
    2ba6:	6a 2f       	mov	r22, r26
    2ba8:	11 24       	eor	r1, r1
    2baa:	9f 57       	subi	r25, 0x7F	; 127
    2bac:	50 40       	sbci	r21, 0x00	; 0
    2bae:	8a f0       	brmi	.+34     	; 0x2bd2 <__mulsf3_pse+0x84>
    2bb0:	e1 f0       	breq	.+56     	; 0x2bea <__mulsf3_pse+0x9c>
    2bb2:	88 23       	and	r24, r24
    2bb4:	4a f0       	brmi	.+18     	; 0x2bc8 <__mulsf3_pse+0x7a>
    2bb6:	ee 0f       	add	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	bb 1f       	adc	r27, r27
    2bbc:	66 1f       	adc	r22, r22
    2bbe:	77 1f       	adc	r23, r23
    2bc0:	88 1f       	adc	r24, r24
    2bc2:	91 50       	subi	r25, 0x01	; 1
    2bc4:	50 40       	sbci	r21, 0x00	; 0
    2bc6:	a9 f7       	brne	.-22     	; 0x2bb2 <__mulsf3_pse+0x64>
    2bc8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bca:	51 05       	cpc	r21, r1
    2bcc:	70 f0       	brcs	.+28     	; 0x2bea <__mulsf3_pse+0x9c>
    2bce:	eb ce       	rjmp	.-554    	; 0x29a6 <__fp_inf>
    2bd0:	5a cf       	rjmp	.-332    	; 0x2a86 <__fp_szero>
    2bd2:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd4:	ec f3       	brlt	.-6      	; 0x2bd0 <__mulsf3_pse+0x82>
    2bd6:	98 3e       	cpi	r25, 0xE8	; 232
    2bd8:	dc f3       	brlt	.-10     	; 0x2bd0 <__mulsf3_pse+0x82>
    2bda:	86 95       	lsr	r24
    2bdc:	77 95       	ror	r23
    2bde:	67 95       	ror	r22
    2be0:	b7 95       	ror	r27
    2be2:	f7 95       	ror	r31
    2be4:	e7 95       	ror	r30
    2be6:	9f 5f       	subi	r25, 0xFF	; 255
    2be8:	c1 f7       	brne	.-16     	; 0x2bda <__mulsf3_pse+0x8c>
    2bea:	fe 2b       	or	r31, r30
    2bec:	88 0f       	add	r24, r24
    2bee:	91 1d       	adc	r25, r1
    2bf0:	96 95       	lsr	r25
    2bf2:	87 95       	ror	r24
    2bf4:	97 f9       	bld	r25, 7
    2bf6:	08 95       	ret

00002bf8 <square>:
    2bf8:	9b 01       	movw	r18, r22
    2bfa:	ac 01       	movw	r20, r24
    2bfc:	9a cf       	rjmp	.-204    	; 0x2b32 <__mulsf3>

00002bfe <__fp_mpack>:
    2bfe:	9f 3f       	cpi	r25, 0xFF	; 255
    2c00:	31 f0       	breq	.+12     	; 0x2c0e <__fp_mpack_finite+0xc>

00002c02 <__fp_mpack_finite>:
    2c02:	91 50       	subi	r25, 0x01	; 1
    2c04:	20 f4       	brcc	.+8      	; 0x2c0e <__fp_mpack_finite+0xc>
    2c06:	87 95       	ror	r24
    2c08:	77 95       	ror	r23
    2c0a:	67 95       	ror	r22
    2c0c:	b7 95       	ror	r27
    2c0e:	88 0f       	add	r24, r24
    2c10:	91 1d       	adc	r25, r1
    2c12:	96 95       	lsr	r25
    2c14:	87 95       	ror	r24
    2c16:	97 f9       	bld	r25, 7
    2c18:	08 95       	ret

00002c1a <__divmodsi4>:
    2c1a:	97 fb       	bst	r25, 7
    2c1c:	09 2e       	mov	r0, r25
    2c1e:	05 26       	eor	r0, r21
    2c20:	0e d0       	rcall	.+28     	; 0x2c3e <__divmodsi4_neg1>
    2c22:	57 fd       	sbrc	r21, 7
    2c24:	04 d0       	rcall	.+8      	; 0x2c2e <__divmodsi4_neg2>
    2c26:	4b d0       	rcall	.+150    	; 0x2cbe <__udivmodsi4>
    2c28:	0a d0       	rcall	.+20     	; 0x2c3e <__divmodsi4_neg1>
    2c2a:	00 1c       	adc	r0, r0
    2c2c:	38 f4       	brcc	.+14     	; 0x2c3c <__divmodsi4_exit>

00002c2e <__divmodsi4_neg2>:
    2c2e:	50 95       	com	r21
    2c30:	40 95       	com	r20
    2c32:	30 95       	com	r19
    2c34:	21 95       	neg	r18
    2c36:	3f 4f       	sbci	r19, 0xFF	; 255
    2c38:	4f 4f       	sbci	r20, 0xFF	; 255
    2c3a:	5f 4f       	sbci	r21, 0xFF	; 255

00002c3c <__divmodsi4_exit>:
    2c3c:	08 95       	ret

00002c3e <__divmodsi4_neg1>:
    2c3e:	f6 f7       	brtc	.-4      	; 0x2c3c <__divmodsi4_exit>
    2c40:	90 95       	com	r25
    2c42:	80 95       	com	r24
    2c44:	70 95       	com	r23
    2c46:	61 95       	neg	r22
    2c48:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4e:	08 95       	ret

00002c50 <__prologue_saves__>:
    2c50:	2f 92       	push	r2
    2c52:	3f 92       	push	r3
    2c54:	4f 92       	push	r4
    2c56:	5f 92       	push	r5
    2c58:	6f 92       	push	r6
    2c5a:	7f 92       	push	r7
    2c5c:	8f 92       	push	r8
    2c5e:	9f 92       	push	r9
    2c60:	af 92       	push	r10
    2c62:	bf 92       	push	r11
    2c64:	cf 92       	push	r12
    2c66:	df 92       	push	r13
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
    2c70:	cf 93       	push	r28
    2c72:	df 93       	push	r29
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	ca 1b       	sub	r28, r26
    2c7a:	db 0b       	sbc	r29, r27
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	09 94       	ijmp

00002c88 <__epilogue_restores__>:
    2c88:	2a 88       	ldd	r2, Y+18	; 0x12
    2c8a:	39 88       	ldd	r3, Y+17	; 0x11
    2c8c:	48 88       	ldd	r4, Y+16	; 0x10
    2c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c9e:	df 80       	ldd	r13, Y+7	; 0x07
    2ca0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ca2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ca6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    2caa:	b9 81       	ldd	r27, Y+1	; 0x01
    2cac:	ce 0f       	add	r28, r30
    2cae:	d1 1d       	adc	r29, r1
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	ed 01       	movw	r28, r26
    2cbc:	08 95       	ret

00002cbe <__udivmodsi4>:
    2cbe:	a1 e2       	ldi	r26, 0x21	; 33
    2cc0:	1a 2e       	mov	r1, r26
    2cc2:	aa 1b       	sub	r26, r26
    2cc4:	bb 1b       	sub	r27, r27
    2cc6:	fd 01       	movw	r30, r26
    2cc8:	0d c0       	rjmp	.+26     	; 0x2ce4 <__udivmodsi4_ep>

00002cca <__udivmodsi4_loop>:
    2cca:	aa 1f       	adc	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	ee 1f       	adc	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	a2 17       	cp	r26, r18
    2cd4:	b3 07       	cpc	r27, r19
    2cd6:	e4 07       	cpc	r30, r20
    2cd8:	f5 07       	cpc	r31, r21
    2cda:	20 f0       	brcs	.+8      	; 0x2ce4 <__udivmodsi4_ep>
    2cdc:	a2 1b       	sub	r26, r18
    2cde:	b3 0b       	sbc	r27, r19
    2ce0:	e4 0b       	sbc	r30, r20
    2ce2:	f5 0b       	sbc	r31, r21

00002ce4 <__udivmodsi4_ep>:
    2ce4:	66 1f       	adc	r22, r22
    2ce6:	77 1f       	adc	r23, r23
    2ce8:	88 1f       	adc	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	1a 94       	dec	r1
    2cee:	69 f7       	brne	.-38     	; 0x2cca <__udivmodsi4_loop>
    2cf0:	60 95       	com	r22
    2cf2:	70 95       	com	r23
    2cf4:	80 95       	com	r24
    2cf6:	90 95       	com	r25
    2cf8:	9b 01       	movw	r18, r22
    2cfa:	ac 01       	movw	r20, r24
    2cfc:	bd 01       	movw	r22, r26
    2cfe:	cf 01       	movw	r24, r30
    2d00:	08 95       	ret

00002d02 <__ftoa_engine>:
    2d02:	28 30       	cpi	r18, 0x08	; 8
    2d04:	08 f0       	brcs	.+2      	; 0x2d08 <__ftoa_engine+0x6>
    2d06:	27 e0       	ldi	r18, 0x07	; 7
    2d08:	33 27       	eor	r19, r19
    2d0a:	da 01       	movw	r26, r20
    2d0c:	99 0f       	add	r25, r25
    2d0e:	31 1d       	adc	r19, r1
    2d10:	87 fd       	sbrc	r24, 7
    2d12:	91 60       	ori	r25, 0x01	; 1
    2d14:	00 96       	adiw	r24, 0x00	; 0
    2d16:	61 05       	cpc	r22, r1
    2d18:	71 05       	cpc	r23, r1
    2d1a:	39 f4       	brne	.+14     	; 0x2d2a <__ftoa_engine+0x28>
    2d1c:	32 60       	ori	r19, 0x02	; 2
    2d1e:	2e 5f       	subi	r18, 0xFE	; 254
    2d20:	3d 93       	st	X+, r19
    2d22:	30 e3       	ldi	r19, 0x30	; 48
    2d24:	2a 95       	dec	r18
    2d26:	e1 f7       	brne	.-8      	; 0x2d20 <__ftoa_engine+0x1e>
    2d28:	08 95       	ret
    2d2a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d2c:	30 f0       	brcs	.+12     	; 0x2d3a <__ftoa_engine+0x38>
    2d2e:	80 38       	cpi	r24, 0x80	; 128
    2d30:	71 05       	cpc	r23, r1
    2d32:	61 05       	cpc	r22, r1
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <__ftoa_engine+0x36>
    2d36:	3c 5f       	subi	r19, 0xFC	; 252
    2d38:	3c 5f       	subi	r19, 0xFC	; 252
    2d3a:	3d 93       	st	X+, r19
    2d3c:	91 30       	cpi	r25, 0x01	; 1
    2d3e:	08 f0       	brcs	.+2      	; 0x2d42 <__ftoa_engine+0x40>
    2d40:	80 68       	ori	r24, 0x80	; 128
    2d42:	91 1d       	adc	r25, r1
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	1f 93       	push	r17
    2d4a:	0f 93       	push	r16
    2d4c:	ff 92       	push	r15
    2d4e:	ef 92       	push	r14
    2d50:	19 2f       	mov	r17, r25
    2d52:	98 7f       	andi	r25, 0xF8	; 248
    2d54:	96 95       	lsr	r25
    2d56:	e9 2f       	mov	r30, r25
    2d58:	96 95       	lsr	r25
    2d5a:	96 95       	lsr	r25
    2d5c:	e9 0f       	add	r30, r25
    2d5e:	ff 27       	eor	r31, r31
    2d60:	eb 56       	subi	r30, 0x6B	; 107
    2d62:	fe 4f       	sbci	r31, 0xFE	; 254
    2d64:	99 27       	eor	r25, r25
    2d66:	33 27       	eor	r19, r19
    2d68:	ee 24       	eor	r14, r14
    2d6a:	ff 24       	eor	r15, r15
    2d6c:	a7 01       	movw	r20, r14
    2d6e:	e7 01       	movw	r28, r14
    2d70:	05 90       	lpm	r0, Z+
    2d72:	08 94       	sec
    2d74:	07 94       	ror	r0
    2d76:	28 f4       	brcc	.+10     	; 0x2d82 <__ftoa_engine+0x80>
    2d78:	36 0f       	add	r19, r22
    2d7a:	e7 1e       	adc	r14, r23
    2d7c:	f8 1e       	adc	r15, r24
    2d7e:	49 1f       	adc	r20, r25
    2d80:	51 1d       	adc	r21, r1
    2d82:	66 0f       	add	r22, r22
    2d84:	77 1f       	adc	r23, r23
    2d86:	88 1f       	adc	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	06 94       	lsr	r0
    2d8c:	a1 f7       	brne	.-24     	; 0x2d76 <__ftoa_engine+0x74>
    2d8e:	05 90       	lpm	r0, Z+
    2d90:	07 94       	ror	r0
    2d92:	28 f4       	brcc	.+10     	; 0x2d9e <__ftoa_engine+0x9c>
    2d94:	e7 0e       	add	r14, r23
    2d96:	f8 1e       	adc	r15, r24
    2d98:	49 1f       	adc	r20, r25
    2d9a:	56 1f       	adc	r21, r22
    2d9c:	c1 1d       	adc	r28, r1
    2d9e:	77 0f       	add	r23, r23
    2da0:	88 1f       	adc	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	66 1f       	adc	r22, r22
    2da6:	06 94       	lsr	r0
    2da8:	a1 f7       	brne	.-24     	; 0x2d92 <__ftoa_engine+0x90>
    2daa:	05 90       	lpm	r0, Z+
    2dac:	07 94       	ror	r0
    2dae:	28 f4       	brcc	.+10     	; 0x2dba <__ftoa_engine+0xb8>
    2db0:	f8 0e       	add	r15, r24
    2db2:	49 1f       	adc	r20, r25
    2db4:	56 1f       	adc	r21, r22
    2db6:	c7 1f       	adc	r28, r23
    2db8:	d1 1d       	adc	r29, r1
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	66 1f       	adc	r22, r22
    2dc0:	77 1f       	adc	r23, r23
    2dc2:	06 94       	lsr	r0
    2dc4:	a1 f7       	brne	.-24     	; 0x2dae <__ftoa_engine+0xac>
    2dc6:	05 90       	lpm	r0, Z+
    2dc8:	07 94       	ror	r0
    2dca:	20 f4       	brcc	.+8      	; 0x2dd4 <__ftoa_engine+0xd2>
    2dcc:	49 0f       	add	r20, r25
    2dce:	56 1f       	adc	r21, r22
    2dd0:	c7 1f       	adc	r28, r23
    2dd2:	d8 1f       	adc	r29, r24
    2dd4:	99 0f       	add	r25, r25
    2dd6:	66 1f       	adc	r22, r22
    2dd8:	77 1f       	adc	r23, r23
    2dda:	88 1f       	adc	r24, r24
    2ddc:	06 94       	lsr	r0
    2dde:	a9 f7       	brne	.-22     	; 0x2dca <__ftoa_engine+0xc8>
    2de0:	84 91       	lpm	r24, Z+
    2de2:	10 95       	com	r17
    2de4:	17 70       	andi	r17, 0x07	; 7
    2de6:	41 f0       	breq	.+16     	; 0x2df8 <__ftoa_engine+0xf6>
    2de8:	d6 95       	lsr	r29
    2dea:	c7 95       	ror	r28
    2dec:	57 95       	ror	r21
    2dee:	47 95       	ror	r20
    2df0:	f7 94       	ror	r15
    2df2:	e7 94       	ror	r14
    2df4:	1a 95       	dec	r17
    2df6:	c1 f7       	brne	.-16     	; 0x2de8 <__ftoa_engine+0xe6>
    2df8:	eb e3       	ldi	r30, 0x3B	; 59
    2dfa:	f1 e0       	ldi	r31, 0x01	; 1
    2dfc:	68 94       	set
    2dfe:	15 90       	lpm	r1, Z+
    2e00:	15 91       	lpm	r17, Z+
    2e02:	35 91       	lpm	r19, Z+
    2e04:	65 91       	lpm	r22, Z+
    2e06:	95 91       	lpm	r25, Z+
    2e08:	05 90       	lpm	r0, Z+
    2e0a:	7f e2       	ldi	r23, 0x2F	; 47
    2e0c:	73 95       	inc	r23
    2e0e:	e1 18       	sub	r14, r1
    2e10:	f1 0a       	sbc	r15, r17
    2e12:	43 0b       	sbc	r20, r19
    2e14:	56 0b       	sbc	r21, r22
    2e16:	c9 0b       	sbc	r28, r25
    2e18:	d0 09       	sbc	r29, r0
    2e1a:	c0 f7       	brcc	.-16     	; 0x2e0c <__ftoa_engine+0x10a>
    2e1c:	e1 0c       	add	r14, r1
    2e1e:	f1 1e       	adc	r15, r17
    2e20:	43 1f       	adc	r20, r19
    2e22:	56 1f       	adc	r21, r22
    2e24:	c9 1f       	adc	r28, r25
    2e26:	d0 1d       	adc	r29, r0
    2e28:	7e f4       	brtc	.+30     	; 0x2e48 <__ftoa_engine+0x146>
    2e2a:	70 33       	cpi	r23, 0x30	; 48
    2e2c:	11 f4       	brne	.+4      	; 0x2e32 <__ftoa_engine+0x130>
    2e2e:	8a 95       	dec	r24
    2e30:	e6 cf       	rjmp	.-52     	; 0x2dfe <__ftoa_engine+0xfc>
    2e32:	e8 94       	clt
    2e34:	01 50       	subi	r16, 0x01	; 1
    2e36:	30 f0       	brcs	.+12     	; 0x2e44 <__ftoa_engine+0x142>
    2e38:	08 0f       	add	r16, r24
    2e3a:	0a f4       	brpl	.+2      	; 0x2e3e <__ftoa_engine+0x13c>
    2e3c:	00 27       	eor	r16, r16
    2e3e:	02 17       	cp	r16, r18
    2e40:	08 f4       	brcc	.+2      	; 0x2e44 <__ftoa_engine+0x142>
    2e42:	20 2f       	mov	r18, r16
    2e44:	23 95       	inc	r18
    2e46:	02 2f       	mov	r16, r18
    2e48:	7a 33       	cpi	r23, 0x3A	; 58
    2e4a:	28 f0       	brcs	.+10     	; 0x2e56 <__ftoa_engine+0x154>
    2e4c:	79 e3       	ldi	r23, 0x39	; 57
    2e4e:	7d 93       	st	X+, r23
    2e50:	2a 95       	dec	r18
    2e52:	e9 f7       	brne	.-6      	; 0x2e4e <__ftoa_engine+0x14c>
    2e54:	10 c0       	rjmp	.+32     	; 0x2e76 <__ftoa_engine+0x174>
    2e56:	7d 93       	st	X+, r23
    2e58:	2a 95       	dec	r18
    2e5a:	89 f6       	brne	.-94     	; 0x2dfe <__ftoa_engine+0xfc>
    2e5c:	06 94       	lsr	r0
    2e5e:	97 95       	ror	r25
    2e60:	67 95       	ror	r22
    2e62:	37 95       	ror	r19
    2e64:	17 95       	ror	r17
    2e66:	17 94       	ror	r1
    2e68:	e1 18       	sub	r14, r1
    2e6a:	f1 0a       	sbc	r15, r17
    2e6c:	43 0b       	sbc	r20, r19
    2e6e:	56 0b       	sbc	r21, r22
    2e70:	c9 0b       	sbc	r28, r25
    2e72:	d0 09       	sbc	r29, r0
    2e74:	98 f0       	brcs	.+38     	; 0x2e9c <__ftoa_engine+0x19a>
    2e76:	23 95       	inc	r18
    2e78:	7e 91       	ld	r23, -X
    2e7a:	73 95       	inc	r23
    2e7c:	7a 33       	cpi	r23, 0x3A	; 58
    2e7e:	08 f0       	brcs	.+2      	; 0x2e82 <__ftoa_engine+0x180>
    2e80:	70 e3       	ldi	r23, 0x30	; 48
    2e82:	7c 93       	st	X, r23
    2e84:	20 13       	cpse	r18, r16
    2e86:	b8 f7       	brcc	.-18     	; 0x2e76 <__ftoa_engine+0x174>
    2e88:	7e 91       	ld	r23, -X
    2e8a:	70 61       	ori	r23, 0x10	; 16
    2e8c:	7d 93       	st	X+, r23
    2e8e:	30 f0       	brcs	.+12     	; 0x2e9c <__ftoa_engine+0x19a>
    2e90:	83 95       	inc	r24
    2e92:	71 e3       	ldi	r23, 0x31	; 49
    2e94:	7d 93       	st	X+, r23
    2e96:	70 e3       	ldi	r23, 0x30	; 48
    2e98:	2a 95       	dec	r18
    2e9a:	e1 f7       	brne	.-8      	; 0x2e94 <__ftoa_engine+0x192>
    2e9c:	11 24       	eor	r1, r1
    2e9e:	ef 90       	pop	r14
    2ea0:	ff 90       	pop	r15
    2ea2:	0f 91       	pop	r16
    2ea4:	1f 91       	pop	r17
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	99 27       	eor	r25, r25
    2eac:	87 fd       	sbrc	r24, 7
    2eae:	90 95       	com	r25
    2eb0:	08 95       	ret

00002eb2 <strnlen_P>:
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	05 90       	lpm	r0, Z+
    2eb6:	61 50       	subi	r22, 0x01	; 1
    2eb8:	70 40       	sbci	r23, 0x00	; 0
    2eba:	01 10       	cpse	r0, r1
    2ebc:	d8 f7       	brcc	.-10     	; 0x2eb4 <strnlen_P+0x2>
    2ebe:	80 95       	com	r24
    2ec0:	90 95       	com	r25
    2ec2:	8e 0f       	add	r24, r30
    2ec4:	9f 1f       	adc	r25, r31
    2ec6:	08 95       	ret

00002ec8 <strnlen>:
    2ec8:	fc 01       	movw	r30, r24
    2eca:	61 50       	subi	r22, 0x01	; 1
    2ecc:	70 40       	sbci	r23, 0x00	; 0
    2ece:	01 90       	ld	r0, Z+
    2ed0:	01 10       	cpse	r0, r1
    2ed2:	d8 f7       	brcc	.-10     	; 0x2eca <strnlen+0x2>
    2ed4:	80 95       	com	r24
    2ed6:	90 95       	com	r25
    2ed8:	8e 0f       	add	r24, r30
    2eda:	9f 1f       	adc	r25, r31
    2edc:	08 95       	ret

00002ede <fputc>:
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	8c 01       	movw	r16, r24
    2ee8:	eb 01       	movw	r28, r22
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	81 ff       	sbrs	r24, 1
    2eee:	1b c0       	rjmp	.+54     	; 0x2f26 <fputc+0x48>
    2ef0:	82 ff       	sbrs	r24, 2
    2ef2:	0d c0       	rjmp	.+26     	; 0x2f0e <fputc+0x30>
    2ef4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ef6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    2efa:	9d 81       	ldd	r25, Y+5	; 0x05
    2efc:	28 17       	cp	r18, r24
    2efe:	39 07       	cpc	r19, r25
    2f00:	64 f4       	brge	.+24     	; 0x2f1a <fputc+0x3c>
    2f02:	e8 81       	ld	r30, Y
    2f04:	f9 81       	ldd	r31, Y+1	; 0x01
    2f06:	01 93       	st	Z+, r16
    2f08:	f9 83       	std	Y+1, r31	; 0x01
    2f0a:	e8 83       	st	Y, r30
    2f0c:	06 c0       	rjmp	.+12     	; 0x2f1a <fputc+0x3c>
    2f0e:	e8 85       	ldd	r30, Y+8	; 0x08
    2f10:	f9 85       	ldd	r31, Y+9	; 0x09
    2f12:	80 2f       	mov	r24, r16
    2f14:	09 95       	icall
    2f16:	89 2b       	or	r24, r25
    2f18:	31 f4       	brne	.+12     	; 0x2f26 <fputc+0x48>
    2f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	9f 83       	std	Y+7, r25	; 0x07
    2f22:	8e 83       	std	Y+6, r24	; 0x06
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <fputc+0x4c>
    2f26:	0f ef       	ldi	r16, 0xFF	; 255
    2f28:	1f ef       	ldi	r17, 0xFF	; 255
    2f2a:	c8 01       	movw	r24, r16
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	08 95       	ret

00002f36 <sprintf>:
    2f36:	ae e0       	ldi	r26, 0x0E	; 14
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	e1 ea       	ldi	r30, 0xA1	; 161
    2f3c:	f7 e1       	ldi	r31, 0x17	; 23
    2f3e:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__prologue_saves__+0x1c>
    2f42:	0d 89       	ldd	r16, Y+21	; 0x15
    2f44:	1e 89       	ldd	r17, Y+22	; 0x16
    2f46:	86 e0       	ldi	r24, 0x06	; 6
    2f48:	8c 83       	std	Y+4, r24	; 0x04
    2f4a:	1a 83       	std	Y+2, r17	; 0x02
    2f4c:	09 83       	std	Y+1, r16	; 0x01
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	9f e7       	ldi	r25, 0x7F	; 127
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	9e 01       	movw	r18, r28
    2f58:	27 5e       	subi	r18, 0xE7	; 231
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	6f 89       	ldd	r22, Y+23	; 0x17
    2f62:	78 8d       	ldd	r23, Y+24	; 0x18
    2f64:	a9 01       	movw	r20, r18
    2f66:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vfprintf>
    2f6a:	2f 81       	ldd	r18, Y+7	; 0x07
    2f6c:	38 85       	ldd	r19, Y+8	; 0x08
    2f6e:	02 0f       	add	r16, r18
    2f70:	13 1f       	adc	r17, r19
    2f72:	f8 01       	movw	r30, r16
    2f74:	10 82       	st	Z, r1
    2f76:	2e 96       	adiw	r28, 0x0e	; 14
    2f78:	e4 e0       	ldi	r30, 0x04	; 4
    2f7a:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__epilogue_restores__+0x1c>

00002f7e <__ultoa_invert>:
    2f7e:	fa 01       	movw	r30, r20
    2f80:	aa 27       	eor	r26, r26
    2f82:	28 30       	cpi	r18, 0x08	; 8
    2f84:	51 f1       	breq	.+84     	; 0x2fda <__ultoa_invert+0x5c>
    2f86:	20 31       	cpi	r18, 0x10	; 16
    2f88:	81 f1       	breq	.+96     	; 0x2fea <__ultoa_invert+0x6c>
    2f8a:	e8 94       	clt
    2f8c:	6f 93       	push	r22
    2f8e:	6e 7f       	andi	r22, 0xFE	; 254
    2f90:	6e 5f       	subi	r22, 0xFE	; 254
    2f92:	7f 4f       	sbci	r23, 0xFF	; 255
    2f94:	8f 4f       	sbci	r24, 0xFF	; 255
    2f96:	9f 4f       	sbci	r25, 0xFF	; 255
    2f98:	af 4f       	sbci	r26, 0xFF	; 255
    2f9a:	b1 e0       	ldi	r27, 0x01	; 1
    2f9c:	3e d0       	rcall	.+124    	; 0x301a <__ultoa_invert+0x9c>
    2f9e:	b4 e0       	ldi	r27, 0x04	; 4
    2fa0:	3c d0       	rcall	.+120    	; 0x301a <__ultoa_invert+0x9c>
    2fa2:	67 0f       	add	r22, r23
    2fa4:	78 1f       	adc	r23, r24
    2fa6:	89 1f       	adc	r24, r25
    2fa8:	9a 1f       	adc	r25, r26
    2faa:	a1 1d       	adc	r26, r1
    2fac:	68 0f       	add	r22, r24
    2fae:	79 1f       	adc	r23, r25
    2fb0:	8a 1f       	adc	r24, r26
    2fb2:	91 1d       	adc	r25, r1
    2fb4:	a1 1d       	adc	r26, r1
    2fb6:	6a 0f       	add	r22, r26
    2fb8:	71 1d       	adc	r23, r1
    2fba:	81 1d       	adc	r24, r1
    2fbc:	91 1d       	adc	r25, r1
    2fbe:	a1 1d       	adc	r26, r1
    2fc0:	20 d0       	rcall	.+64     	; 0x3002 <__ultoa_invert+0x84>
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <__ultoa_invert+0x48>
    2fc4:	68 94       	set
    2fc6:	3f 91       	pop	r19
    2fc8:	2a e0       	ldi	r18, 0x0A	; 10
    2fca:	26 9f       	mul	r18, r22
    2fcc:	11 24       	eor	r1, r1
    2fce:	30 19       	sub	r19, r0
    2fd0:	30 5d       	subi	r19, 0xD0	; 208
    2fd2:	31 93       	st	Z+, r19
    2fd4:	de f6       	brtc	.-74     	; 0x2f8c <__ultoa_invert+0xe>
    2fd6:	cf 01       	movw	r24, r30
    2fd8:	08 95       	ret
    2fda:	46 2f       	mov	r20, r22
    2fdc:	47 70       	andi	r20, 0x07	; 7
    2fde:	40 5d       	subi	r20, 0xD0	; 208
    2fe0:	41 93       	st	Z+, r20
    2fe2:	b3 e0       	ldi	r27, 0x03	; 3
    2fe4:	0f d0       	rcall	.+30     	; 0x3004 <__ultoa_invert+0x86>
    2fe6:	c9 f7       	brne	.-14     	; 0x2fda <__ultoa_invert+0x5c>
    2fe8:	f6 cf       	rjmp	.-20     	; 0x2fd6 <__ultoa_invert+0x58>
    2fea:	46 2f       	mov	r20, r22
    2fec:	4f 70       	andi	r20, 0x0F	; 15
    2fee:	40 5d       	subi	r20, 0xD0	; 208
    2ff0:	4a 33       	cpi	r20, 0x3A	; 58
    2ff2:	18 f0       	brcs	.+6      	; 0x2ffa <__ultoa_invert+0x7c>
    2ff4:	49 5d       	subi	r20, 0xD9	; 217
    2ff6:	31 fd       	sbrc	r19, 1
    2ff8:	40 52       	subi	r20, 0x20	; 32
    2ffa:	41 93       	st	Z+, r20
    2ffc:	02 d0       	rcall	.+4      	; 0x3002 <__ultoa_invert+0x84>
    2ffe:	a9 f7       	brne	.-22     	; 0x2fea <__ultoa_invert+0x6c>
    3000:	ea cf       	rjmp	.-44     	; 0x2fd6 <__ultoa_invert+0x58>
    3002:	b4 e0       	ldi	r27, 0x04	; 4
    3004:	a6 95       	lsr	r26
    3006:	97 95       	ror	r25
    3008:	87 95       	ror	r24
    300a:	77 95       	ror	r23
    300c:	67 95       	ror	r22
    300e:	ba 95       	dec	r27
    3010:	c9 f7       	brne	.-14     	; 0x3004 <__ultoa_invert+0x86>
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	61 05       	cpc	r22, r1
    3016:	71 05       	cpc	r23, r1
    3018:	08 95       	ret
    301a:	9b 01       	movw	r18, r22
    301c:	ac 01       	movw	r20, r24
    301e:	0a 2e       	mov	r0, r26
    3020:	06 94       	lsr	r0
    3022:	57 95       	ror	r21
    3024:	47 95       	ror	r20
    3026:	37 95       	ror	r19
    3028:	27 95       	ror	r18
    302a:	ba 95       	dec	r27
    302c:	c9 f7       	brne	.-14     	; 0x3020 <__ultoa_invert+0xa2>
    302e:	62 0f       	add	r22, r18
    3030:	73 1f       	adc	r23, r19
    3032:	84 1f       	adc	r24, r20
    3034:	95 1f       	adc	r25, r21
    3036:	a0 1d       	adc	r26, r0
    3038:	08 95       	ret

0000303a <_exit>:
    303a:	f8 94       	cli

0000303c <__stop_program>:
    303c:	ff cf       	rjmp	.-2      	; 0x303c <__stop_program>
